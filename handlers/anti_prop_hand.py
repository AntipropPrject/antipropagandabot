import asyncio
from typing import List
from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bata import all_data
from data_base.DBuse import poll_get, redis_just_one_read
from data_base.DBuse import sql_safe_select, data_getter, sql_safe_update
from filters.All_filters import WebPropagandaFilter, TVPropagandaFilter, PplPropagandaFilter, PoliticsFilter
from handlers.true_resons_hand import TruereasonsState
from keyboards.map_keys import antip_why_kb, antip_killme_kb
from middleware import CounterMiddleware
from resources.all_polls import web_prop
from resources.other_lists import channels
from states.antiprop_states import propaganda_victim
from stats.stat import mongo_update_stat
from utilts import simple_media

router = Router()
router.message.middleware(CounterMiddleware())

router.message.filter(state=propaganda_victim)


# –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–∂–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–µ—Ö–∞–ª–∏!".


@router.message(TVPropagandaFilter(option="–°–∫–æ—Ä–µ–µ –¥–∞"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_all_yes_start(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π üì∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π üì∫'))
async def antiprop_all_yes_second(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def rather_no_TV(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antip_all_no_TV(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
        (F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î", "–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"})))
async def antiprop_tv_selecter(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π', 'üá∑üá∫1Ô∏è‚É£ –†–æ—Å—Å–∏—è 1 / 24', '‚ùáÔ∏è‚ñ∂Ô∏è–ù–¢–í', '‚≠êÔ∏èüÖæÔ∏è –ó–≤–µ–∑–¥–∞']
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞?"))
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é... üëΩ"))
    nmarkup.adjust(1, 2, 2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('1Ô∏è‚É£')) & ~(F.text.contains('üá∑üá∫')))
async def antiprop_tv_first(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.tv_first)
    try:
        count = (await state.get_data())['first_tv_count']
    except:
        count = 0
    if count == 5:
        count = 0
    count += 1
    await state.update_data(first_tv_count=count)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
    await simple_media(message, f'tv_first_lie_{count}', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('üá∑üá∫1Ô∏è‚É£')))
async def antiprop_tv_24(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.tv_russia24)
    try:
        count = (await state.get_data())['rus24_tv_count']
    except:
        count = 0
    if count == 5:
        count = 0
    count += 1
    await state.update_data(rus24_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_24_lie_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               caption=f'{count} —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏24')


@router.message((F.text.contains('‚ùáÔ∏è‚ñ∂Ô∏è')))
async def antiprop_tv_HTB(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_HTB)
    try:
        count = (await state.get_data())['HTB_tv_count']
    except:
        count = 0
    if count == 5:
        count = 0
    count += 1
    await state.update_data(HTB_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_HTB_lie_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               caption=f'{count} —Å—é–∂–µ—Ç —Å –ù–¢–í')


@router.message((F.text.contains('‚≠êÔ∏èüÖæÔ∏è')))
async def antiprop_tv_star(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.tv_star)
    try:
        count = (await state.get_data())['Star_tv_count']
    except:
        count = 0
    if count == 5:
        count = 0
    count += 1
    await state.update_data(Star_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_star_lie_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               caption=f'{count} —Å—é–∂–µ—Ç —Å–æ –ó–≤–µ–∑–¥—ã')


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_first)
async def russia_tv_first_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['first_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_first_reb_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    if count < 5:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å 1Ô∏è‚É£ –ü–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîõ"))
    nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_russia24)
async def tv_russia24_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['rus24_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–∏24'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_24_reb_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    if count < 5:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç üá∑üá∫1Ô∏è‚É£ c –†–æ—Å—Å–∏–∏1/24 üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîõ"))
    nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_HTB)
async def tv_HTB_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['HTB_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ù–¢–í'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_HTB_reb_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    if count < 5:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç ‚ùáÔ∏è‚ñ∂Ô∏è –ù–¢–í üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîõ"))
    nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_star)
async def tv_star_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['Star_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Å–æ–≤–∫–∞–Ω–∞–ª–∞'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': f'tv_star_reb_{count}'})
    nmarkup = ReplyKeyboardBuilder()
    if count < 5:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç ‚≠êÔ∏èüÖæÔ∏è –ó–≤–µ–∑–¥—ã üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîõ"))
    nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç') & (F.text.contains('–ø–æ–Ω—è—Ç–Ω–æ'))))
async def antip_crossed_boy_1(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_1'})
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'))
async def antip_crossed_boy_2(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥'))
async def antip_crossed_boy_3(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_3'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Åüò±"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–ºüòï"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ö–∞–∫–æ–π —É–∂–∞—Åüò±") | (F.text == "–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–ºüòï"))
async def antip_crossed_boy_3(message: Message):
    text2 = await sql_safe_select('text', 'texts', {'name': 'antip_be_honest'})
    await message.answer(text2, reply_markup=antip_killme_kb())


@router.message((F.text.contains('–¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª')) | (F.text.contains('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ')))
async def antip_another_tv(message: Message, state: FSMContext):
    bigdata = await state.get_data()
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    tvtags = {'first_tv_count': '1Ô∏è‚É£', 'rus1_tv_count': 'üá∑üá∫1Ô∏è‚É£', 'HTB_tv_count': '‚ùáÔ∏è‚ñ∂Ô∏è', 'Star_tv_count': '‚≠êÔ∏èüÖæÔ∏è'}
    for tag in tvtags:
        try:
            if bigdata[tag] < 5:
                raise Exception
        except:
            nmarkup.row(types.KeyboardButton(text=tvtags[tag]))
    nmarkup.adjust(1, 2, 2)
    await message.answer('–Ø —Å–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –±–æ–ª—å—à—É—é –±–∞–∑—É –ª–∂–∏ –Ω–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.'
                         ' –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π -- –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!', reply_markup=nmarkup.as_markup())


@router.message((F.text.contains('–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_is_prop'})
    utv_list = ['1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π', 'üá∑üá∫1Ô∏è‚É£ –†–æ—Å—Å–∏—è 1 / 24', '‚ùáÔ∏è‚ñ∂Ô∏è–ù–¢–í', '‚≠êÔ∏èüÖæÔ∏è –ó–≤–µ–∑–¥–∞']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é... üëΩ"))
    nmarkup.adjust(2, 2, 1)
    await message.answer(text, disable_web_page_preview=True)


@router.message((F.text.contains('–∑–∞–≥–æ–≤–æ—Ä–∞')))
async def antip_conspirasy(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    await message.answer(text)


@router.message(WebPropagandaFilter(), (
        (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) |
        (F.text.contains('–∑–Ω–∞–ª'))))
@router.message(WebPropagandaFilter(), commands=["test"])
async def antip_not_only_TV(message: Message, web_lies_list: List[str], state=FSMContext):
    answer_id_str = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: ethernet_id:')
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∑—ã–≤–∞–π"))
    lies_list = web_lies_list
    answer_id_int = []
    all_answers = web_prop
    for i in answer_id_str:
        answer_id_int.append(int(i))  # —á–∏—Å–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        answer_id_int.remove(2)
        lies_list.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
        all_answers.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
    except:
        pass
    try:
        answer_id_int.remove(8)
        lies_list.remove('–í–∏–∫–∏–ø–µ–¥–∏—è')
        all_answers.remove("–í–∏–∫–∏–ø–µ–¥–∏—è")
    except:
        pass
    try:
        answer_id_int.remove(9)
        lies_list.remove('–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...')
        all_answers.remove("–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...")
    except:
        pass

    await state.update_data(all_answers=all_answers)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞
    await state.update_data(answers_int=answer_id_int)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–¥–µ–∫—Å—ã
    await state.update_data(answers_str=lies_list)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏
    channel = lies_list[0]
    text = '–ù–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –≤ –†–æ—Å—Å–∏–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ' \
           '–Ω–∞ –¢–í. –ú–æ–ª–æ–¥–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç ' \
           '–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö ' \
           '–ø–æ—Ä—Ç–∞–ª–æ–≤, —Å–æ—Ü—Å–µ—Ç–µ–π –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤.  ' \
           '–ë–æ–ª—å—à–µ 10 –ª–µ—Ç –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ' \
           '–∑–∞—Ö–≤–∞—Ç—ã–≤–∞–ª–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ ' \
           '–¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏: –†–ò–ê ' \
           '–ù–æ–≤–æ—Å—Ç–∏, –ò–∑–≤–µ—Å—Ç–∏—è, –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç, –†–ë–ö –∏ ' \
           '–¥–∞–∂–µ –Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏. –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ' \
           '–≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–æ—Ç–Ω–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Ä—Ç–∞–ª–æ–≤,  ' \
           '–∞ —Ç–∞–∫–∂–µ –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã.\n\n' \
           '–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Å—Ä–µ–¥–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º ' \
           f'–≤—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ - –µ—Å—Ç—å {channel}.' \
           f' –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {channel} —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª—å—é –Ω–µ ' \
           '–¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥–∏–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É ' \
           '–ª—é–¥–µ–π –Ω—É–∂–Ω—É—é [–≤–ª–∞—Å—Ç—è–º] –∫–∞—Ä—Ç–∏–Ω—É –º–∏—Ä–∞. ' \
           '–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—é–∂–µ—Ç–æ–≤,  ' \
           '–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ –¥–æ–∫–∞–∂—É—Ç'
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


async def keyboard_for_next_chanel(text):
    markup = ReplyKeyboardBuilder()
    if text:
        markup.row(types.KeyboardButton(text=text))
    markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö"))
    return markup


async def keyboard_for_all_chanel(lst_kb):
    markup = ReplyKeyboardBuilder()
    for button in lst_kb:
        markup.row(types.KeyboardButton(text=button+' üëÄ'))
    markup.row(types.KeyboardButton(text='–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è'))
    return markup


@router.message(((F.text.contains('–ü–æ–∫–∞–∑—ã–≤–∞–π')) | (F.text.contains('–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏ üëÄ')) | (
        F.text.contains('Russia Today üëÄ')) | (
                         F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã: –í–æ–µ–Ω–Ω—ã–π –æ—Å–≤–µ–¥–æ–º–∏—Ç–µ–ª—å / WarGonzo / Kotsnews üëÄ')) | (
                         F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏ üëÄ')) | (F.text.contains('–†–ë–ö üëÄ')) | (
                         F.text.contains('–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ê–∏–§ / –í–µ–¥–æ–º–æ—Å—Ç–∏ / –õ–µ–Ω—Ç–∞ / –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å üëÄ')) | (
                         F.text.contains('–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏ üëÄ')) | (
                         F.text.contains('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))) & ~(
F.text.contains('–µ—â–µ')))  # –≤—Ö–æ–¥ –≤ —Ü–∏–∫–ª
async def show_the_news(message: types.Message, state=FSMContext):
    data = await state.get_data()
    if message.text == '–ü–æ–∫–∞–∑—ã–≤–∞–π':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        # –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        user_answer_str = data['answers_str']
        one_channel = channels[channels.index(user_answer_str[0]) + 1]  # –ø–æ–ª—É—á–∞—é –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        one_media = await sql_safe_select('t_id', 'assets',
                                          {'name': list(one_channel[0].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        one_caption = await sql_safe_select('text', 'texts',
                                            {'name': list(one_channel[0].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(viewed_channel=user_answer_str[0])  # –ø–µ—Ä–µ–¥–∞—é –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è
        await state.update_data(count_news=0)  # –°—Ç–∞–≤–ª—é —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 0 –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        await state.update_data(all_viwed=[user_answer_str[0]])  # –∑–∞–ø–∏—Å—ã–≤–∞—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        await message.answer_video(one_media, caption=one_caption, reply_markup=markup.as_markup(resize_keyboard=True))
    elif message.text != '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        await state.update_data(count_news=0)
        await state.update_data(viewed_channel=message.text[:-2])
        new_data = 0
        other_channel = message.text
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è':
            viewed = data["all_viwed"]
            viewed.append(other_channel)
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        channel_exposure = channels[channels.index(other_channel[:-2]) + 1]
        media = await sql_safe_select('t_id', 'assets',
                                      {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption = await sql_safe_select('text', 'texts',
                                        {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))

    elif message.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        await state.update_data(count_news=0)
        new_data = 0
        other_channel = data['not_viewed_chanel']
        await state.update_data(viewed_channel=other_channel)
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è':
            viewed = data["all_viwed"]
            viewed.append(other_channel)
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        channel_exposure = channels[channels.index(other_channel) + 1]
        media = await sql_safe_select('t_id', 'assets',
                                      {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption = await sql_safe_select('text', 'texts',
                                        {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        await poll_get(f'Usrs: {message.from_user.id}: Start_answers: ethernet:')


@router.message((F.text.contains('–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î')))
async def revealing_the_news(message: types.Message, state=FSMContext):
    data = await state.get_data()
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª  –º–µ–Ω—è—Ç—å —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    count_news = data['count_news']  # –ü–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
    if count_news <= 3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        markup = await keyboard_for_next_chanel(f"–ü–æ–∫–∞–∂–∏ –µ—â–µ –Ω–æ–≤–æ—Å—Ç—å —Å {viewed_channel} üëÄ")
        channel_exposure = channels[channels.index(viewed_channel) + 1]

        media_exposure = await sql_safe_select('t_id', 'assets', {
            'name': list(channel_exposure[count_news].values())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption_exposure = await sql_safe_select('text', 'texts', {
            'name': list(channel_exposure[count_news].values())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ

        await message.answer_video(media_exposure, caption=caption_exposure,
                                   reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö"))
        channel_exposure = channels[channels.index(viewed_channel) + 1]

        media_exposure = await sql_safe_select('t_id', 'assets', {
            'name': list(channel_exposure[count_news].values())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption_exposure = await sql_safe_select('text', 'texts', {
            'name': list(channel_exposure[count_news].values())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media_exposure, caption=caption_exposure,
                                   reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(text_contains=('–ü–æ–∫–∞–∂–∏', '–µ—â–µ', '–Ω–æ–≤–æ—Å—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def show_more(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_data = data['count_news'] + 1
    await state.update_data(count_news=new_data)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª
    channel_exposure = channels[channels.index(viewed_channel) + 1]
    media = await sql_safe_select('t_id', 'assets',
                                  {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
    caption = await sql_safe_select('text', 'texts',
                                    {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
    await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö')))
async def revealing_the_news(message: Message, state: FSMContext):
    data = await state.get_data()
    if len(data['answers_str']) - len(data['all_viwed']) != 0:
        # –ü–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ —é–∑–µ—Ä –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        data = await state.get_data()
        markup = await keyboard_for_all_chanel(data['answers_str'])
        text = await sql_safe_select('text', 'texts', {'name': 'antip_another_web_lie'})
        await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        redis = all_data().get_data_red()
        for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:*"):
            redis.delete(key)
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ!'))
        await message.answer("–°—Ä–µ–¥–∏ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ –ª–∂–∏. "
                             "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤—ã —Å–æ –º–Ω–æ–π –≤ —ç—Ç–æ–º —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —É –º–µ–Ω—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã."
                             "\n–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è')))
async def skip_web(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_channel = data['answers_str']  # –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    all_viwed = data['all_viwed']  # –í—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    not_viewed = list(set(answer_channel) - set(all_viwed))
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é, —á—Ç–æ –æ–Ω–∏ –≤—Ä—É—Ç'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É –¥–æ–≤–µ—Ä—è—Ç—å –∏–º'))
    lst_web_answers = str(', '.join(not_viewed))
    next_channel = str(not_viewed[0])
    await state.update_data(not_viewed_chanel=not_viewed[0])
    await message.answer("–Ø —Ö–æ—Ç–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –µ—â–µ, –∫–∞–∫ –≤—Ä—É—Ç "
                         f"{lst_web_answers}, –≤–µ–¥—å –≤—ã "
                         "–æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏–º. –î–ª—è –Ω–∞—à–µ–π "
                         "–¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ—Å–µ–¥—ã –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã "
                         "—Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, –∫–æ–º—É –º–æ–∂–Ω–æ –≤–µ—Ä–∏—Ç—å, –∞ –∫–æ–º—É –Ω–µ—Ç.\n\n"
                         "–ú–æ–∂–Ω–æ —è –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–∫–∞–∂—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "
                         f"—Å—é–∂–µ—Ç –æ—Ç {next_channel}?", reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ù–µ –Ω–∞–¥–æ')))
async def antip_web_exit_1(message: Message, state=FSMContext):
    text = '–•–æ—Ä–æ—à–æ, —ç—Ç–æ –≤–∞—à–µ –ø—Ä–∞–≤–æ. –¢–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å -- –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å!'
    redis = all_data().get_data_red()
    for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:"):
        redis.delete(key)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–ù—É –¥–∞–≤–∞–π'))
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(PplPropagandaFilter(),
                (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (
                        F.text.contains('–∑–Ω–∞–ª')) | (F.text == '–ö–æ–Ω–µ—á–Ω–æ!') | (F.text == '–ù—É –¥–∞–≤–∞–π'))
async def antip_bad_people_lies(message: Message, ppl_lies_list, state: FSMContext):
    redis = all_data().get_data_red()
    await state.set_state(propaganda_victim.ppl_propaganda)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    for key in redis.scan_iter(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust:*'):
        redis.delete(key)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (
        F.text.contains('–∑–Ω–∞–ª')) | (F.text == '–ö–æ–Ω–µ—á–Ω–æ!') | (F.text == '–ù—É –¥–∞–≤–∞–π'))
async def antip_truth_game_start(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º! üöÄ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ù–∞—á–Ω–µ–º! üöÄ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
async def antip_truth_game_start_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['gamecount']
    except:
        count = 0
    how_many_rounds = data_getter("SELECT COUNT (*) FROM public.truthgame")[0][0]
    print(f"–í —Ç–∞–±–ª–∏—Ü–µ {how_many_rounds} –∑–∞–ø–∏—Å–µ–π, –∞ –≤–æ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ–π—á–∞—Å {count}")
    if count < how_many_rounds:
        count += 1
        truth_data = data_getter("SELECT truth, t_id, text, belivers, nonbelivers, rebuttal FROM public.truthgame "
                                 "left outer join assets on asset_name = assets.name "
                                 "left outer join texts ON text_name = texts.name "
                                 f"where id = {count}")[0]
        print('aaaaaa', truth_data)
        await state.update_data(gamecount=count, truth=truth_data[0], rebuttal=truth_data[5], belive=truth_data[3],
                                not_belive=truth_data[4])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ"))
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ª–æ–∂—å ‚ùå"))
        if truth_data[1] is not None:
            capt = ""
            if truth_data[2] is not None:
                capt = truth_data[2]
            try:
                await message.answer_video(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except:
                await message.answer_photo(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(truth_data[2], reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
        await message.answer(
                "–û–π, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–≥—Ä—ã :(\n\n–î–∞–≤–∞–π—Ç–µ —è –ª—É—á—à–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –∞–Ω–µ–∫–¥–æ—Ç!",
                reply_markup=nmarkup.as_markup())


@router.message((F.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ") | (F.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå"))
async def antip_truth_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    base_update_dict = dict()
    if message.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ":
        if data['truth'] == True:
            reality = "—á–∏—Å—Ç–∞—è –ø—Ä–∞–≤–¥–∞, –≤—ã –ø—Ä–∞–≤—ã!"
            reb = ""
        elif data['truth'] == False:
            reality = "–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —á–∏—Å—Ç–∞—è –ª–æ–∂—å, –±–æ—é—Å—å, —á—Ç–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å."
            reb = f"–ò –≤–æ—Ç –ø–æ—á–µ–º—É:\n{data['rebuttal']}\n"
        base_update_dict = {'belivers': data['belive'] + 1}
        print('–≠—Ç–æ–º—É –≤–µ—Ä–∏—Ç', base_update_dict)
    elif message.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå":
        if data['truth'] == True:
            reality = "—á–∏—Å—Ç–∞—è –ø—Ä–∞–≤–¥–∞, –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ—à–∏–±–∫—É."
            reb = f"–ò –≤–æ—Ç –ø–æ—á–µ–º—É:\n{data['rebuttal']}\n"
        elif data['truth'] == False:
            reality = "–ª–æ–∂—å, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ!"
            reb = ""
        base_update_dict = {'nonbelivers': data['not_belive'] + 1}
        print('–≠—Ç–æ–º—É –≤–µ—Ä–∏—Ç', base_update_dict)
    await sql_safe_update("truthgame", base_update_dict, {'id': data['gamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ  üôÖ‚Äç‚ôÄÔ∏è"))
    await message.answer(
            f'–ö–æ–Ω–µ—á–Ω–æ –∂–µ —ç—Ç–æ {reality}\n{reb}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n–ü—Ä–∞–≤–¥–∞: {round(t_percentage * 100, 1)}%\n–õ–æ–∂—å: {round((100 - t_percentage * 100), 1)}',
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è") | (F.text.contains("–¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ")))
async def antip_ok(message: Message):
    await message.answer("–•–æ—Ä–æ—à–æ", reply_markup=ReplyKeyboardRemove())
    if await redis_just_one_read(f'Usrs: {message.from_user.id}: INFOState:') == '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã':
        await asyncio.sleep(2)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
        await message.answer("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç")
        await asyncio.sleep(1)
        await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        await asyncio.sleep(1)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –£–∫—Ä–∞–∏–Ω–µ"))
        await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –¥–æ –≤–∞—Å –Ω–µ –¥–æ–±—Ä–∞–ª–∞—Å—å. –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≥–ª–∞–≤–Ω–æ–º...",
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π'))
async def antip_anecdote(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    await state.clear()
    await state.set_state(propaganda_victim.start)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(1, 1, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})))
async def antip_emoji(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ! üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π ü§Æ"))
    await message.answer("–ú–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ö–æ–Ω–µ—á–Ω–æ! üôÇ", "–ù—É –¥–∞–≤–∞–π ü§Æ"})))
async def antip_do_you_agree(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_do_you_agree'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω üëåüèº"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ / —á–∞—Å—Ç–∏—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(—Å–Ω–∞) üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö üá∫üá∏"))

    nmarkup.adjust(2, 1, 2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø–æ—á–µ–º—É')))
async def antip_why_they_belive(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_why_they_belive'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–í–æ–∑–º–æ–∂–Ω–æ') | (F.text.contains('–ø–æ–ª–Ω–æ—Å—Ç—å—é')) | (F.text.contains('–°–∫–æ—Ä–µ–µ'))))
async def antip_to_the_main(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_to_the_main'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–≤–æ –º–Ω–æ–≥–∏—Ö')))
async def antip_to_the_main(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_prop_difference'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(—Å–Ω–∞)')))
async def antip_love_propaganda(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_love_propaganda'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω(—Å–Ω–∞)"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö üá∫üá∏"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–∞–º —Ö–æ—Ç—è—Ç –¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥—É üòå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == '–ù–µ—Ç, –Ω–∞–º —Ö–æ—Ç—è—Ç –¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥—É üòå')
async def antip_big_love_propaganda(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_big_love_propaganda'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(
            text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üá∑üá∫üá∫üá¶"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø—Ä–∞–≤–¥–∞. –û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å')))
async def antip_reputation_matters(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_reputation_matters'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ü–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –£–∫—Ä–∞–∏–Ω–µ."))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


# –ü–æ —Ö–æ—Ä–æ—à–µ–º—É, —ç—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ –≤–æ–π–Ω—ã
# –Ø –ù–ï –ó–ù–ê–Æ –ö–ê–ö –≠–¢–û –ù–û–†–ú–ê–õ–¨–ù–û –ü–û–í–ï–°–ò–¢–¨
@router.message(PoliticsFilter(title='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã'),
                ((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
                        F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üá∑üá∫üá∫üá¶')))
async def war_point_now(message: Message, state: FSMContext):
    await mongo_update_stat(message.from_user.id, 'antiprop')
    await state.set_state(TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_war_point_now'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(PoliticsFilter(title='–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π'),
                ((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
                        F.text.contains("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üá∑üá∫üá∫üá¶")))
async def reasons_lets_figure(message: Message, state: FSMContext):
    await state.set_state(TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_lets_figure'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º üëåüèº"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –ø–æ–ª–∏—Ç–∏–∫–æ–π üòê"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ–∑–∞—á–µ–º, –≤–µ–¥—å —ç—Ç–∏ —Ü–µ–ª–∏ - –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã ü§¨"))
    nmarkup.adjust(2,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)



@router.message(((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
        F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üá∑üá∫üá∫üá¶')))
async def reasons_king_of_info(message: Message, state: FSMContext):
    await state.set_state(TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_king_of_info'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëåüèº"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏. –Ø —Ç–∞–∫ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª(–∞). –° —á–µ–≥–æ —Ç—ã –≤–∑—è–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏? ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))
