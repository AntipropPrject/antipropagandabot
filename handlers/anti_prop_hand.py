import asyncio

from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from DBuse import sql_safe_select
from bata import all_data
from filters.All_filters import WebPropagandaFilter, TVPropagandaFilter, PplPropagandaFilter
from keyboards.map_keys import antip_why_kb
from states.antiprop_states import propaganda_victim

router = Router()
router.message.filter(state = propaganda_victim)

#–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–∂–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–µ—Ö–∞–ª–∏!".



@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –¥–∞"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_all_yes_start(message: Message, state=FSMContext):
    print('IN LIE HE TRUST')
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def antiprop_all_yes_second(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'rather_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message(TVPropagandaFilter(option ="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'all_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î", "–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"})))
async def antiprop_tv_selecter(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞?"))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é"))
    nmarkup.adjust(3,3,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


#–¢—É—Ç –∏—Ñ–∞–º–∏, –Ω–æ –º–æ–∂–Ω–æ –∏ –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º
@router.message((F.text.in_({'1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫'})))
async def antiprop_tv_selecter(message: Message, state=FSMContext):
    if message.text == '1Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    elif message.text == '2Ô∏è‚É£4Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏24")
    elif message.text == 'üá∑üá∫1Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏1")
    elif message.text == '‚ùáÔ∏è‚ñ∂Ô∏è':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –ù–¢–í")
    elif message.text == '‚≠êÔ∏èüÖæÔ∏è':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –∑–≤–µ–∑–¥—ã")
    elif message.text == 'üü†üç∫':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–µ–Ω–¢–í")


@router.message((F.text.contains('–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_is_prop'})
    await message.answer(text)



@router.message((F.text.contains('–∑–∞–≥–æ–≤–æ—Ä–∞')))
async def antip_conspirasy(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    await message.answer(text)



@router.message(WebPropagandaFilter(), ((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª'))))
async def antip_not_only_TV(message: Message, web_lies_list, state=FSMContext):
    lies_list = web_lies_list['web_lies_list']
    print(lies_list)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_not_only_TV'})
    await message.answer(text)
    await message.answer('–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.')


@router.message(PplPropagandaFilter(), (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_bad_people_lies(message: Message, ppl_lies_list,state=FSMContext):
    lies_list = ppl_lies_list["ppl_lies_list"]
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    await message.answer(text)
    await message.answer('–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç–∞–º–∏.')


@router.message((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_truth_game_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_ok(message: Message, state=FSMContext):
    msg = await message.answer("–•–æ—Ä–æ—à–æ")
    await asyncio.sleep(2)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
    all_data().get_bot().edit_message_text("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_anecdote(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(1,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})))
async def antip_emoji(message: Message, state=FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ! üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π ü§Æ"))
    await message.answer("–ú–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.in_({"–ö–æ–Ω–µ—á–Ω–æ! üôÇ", "–ù—É –¥–∞–≤–∞–π ü§Æ"})))
async def antip_do_you_agree(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_do_you_agree'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø–æ—á–µ–º—É')))
async def antip_why_they_belive(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_why_they_belive'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–í–æ–∑–º–æ–∂–Ω–æ') | (F.text.contains('–ø–æ–ª–Ω–æ—Å—Ç—å—é'))))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_to_the_main'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–≤–æ –≤—Å–µ—Ö')))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_prop_difference'})
    await message.answer(text, reply_markup=antip_why_kb())


#@router.message((F.text @ ({"–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?", "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω", "–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ", "–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö", "–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"})))
