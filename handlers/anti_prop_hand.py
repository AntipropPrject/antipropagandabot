import asyncio

from typing import List
from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from DBuse import poll_get, redis_pop
from DBuse import sql_safe_select
from bata import all_data
from filters.All_filters import WebPropagandaFilter, TVPropagandaFilter, PplPropagandaFilter
from keyboards.map_keys import antip_why_kb
from states.antiprop_states import propaganda_victim
from resources.all_polls import web_prop

router = Router()
router.message.filter(state = propaganda_victim)

#–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–∂–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–µ—Ö–∞–ª–∏!".



@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –¥–∞"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_all_yes_start(message: Message, state=FSMContext):
    print('IN LIE HE TRUST')
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def antiprop_all_yes_second(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def rather_no_TV(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'rather_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message(TVPropagandaFilter(option ="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antip_all_no_TV(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î", "–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"})))
async def antiprop_tv_selecter(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞?"))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é"))
    nmarkup.adjust(3,3,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


#–¢—É—Ç –∏—Ñ–∞–º–∏, –Ω–æ –º–æ–∂–Ω–æ –∏ –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º
@router.message((F.text.in_({'1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫'})))
async def antiprop_tv_selecter(message: Message, state=FSMContext):
    if message.text == '1Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    elif message.text == '2Ô∏è‚É£4Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏24")
    elif message.text == 'üá∑üá∫1Ô∏è‚É£':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏1")
    elif message.text == '‚ùáÔ∏è‚ñ∂Ô∏è':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –ù–¢–í")
    elif message.text == '‚≠êÔ∏èüÖæÔ∏è':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –∑–≤–µ–∑–¥—ã")
    elif message.text == 'üü†üç∫':
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å—é–∂–µ—Ç —Å –†–µ–Ω–¢–í")
    vid_id = await sql_safe_select('t_id', 'assets', {'name': '123'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ"))
    await message.answer_video(vid_id, caption='–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤',
                               reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    text = '–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ'
    await message.answer(text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))



@router.message((F.text.contains('–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_is_prop'})
    await message.answer(text)



@router.message((F.text.contains('–∑–∞–≥–æ–≤–æ—Ä–∞')))
async def antip_conspirasy(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    await message.answer(text)



@router.message(WebPropagandaFilter(), ((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª'))))
@router.message(WebPropagandaFilter(), commands=["test"])
async def antip_not_only_TV(message: Message, web_lies_list: List[str], state=FSMContext):
    print("HERE LIES LIES LIST", web_lies_list)
    answer_id_str = await poll_get(f'Start_answers: ethernet_id: {message.from_user.id}')
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∑—ã–≤–∞–π"))
    lies_list = web_lies_list
    answer_id_int = []
    all_answers = web_prop
    for i in answer_id_str:
        answer_id_int.append(int(i)) # —á–∏—Å–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        answer_id_int.remove(2)
        lies_list.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
        all_answers.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
    except:
        pass
    try:
        answer_id_int.remove(8)
        lies_list.remove('–í–∏–∫–∏–ø–µ–¥–∏—è')
        all_answers.remove("–í–∏–∫–∏–ø–µ–¥–∏—è")
    except:
        pass
    try:
        answer_id_int.remove(9)
        lies_list.remove('–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...')
        all_answers.remove("–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...")
    except:
        pass

    await state.update_data(all_answers=all_answers)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞
    await state.update_data(answers_int=answer_id_int) # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–¥–µ–∫—Å—ã
    await state.update_data(answers_str=lies_list)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏
    channel = lies_list[0]
    text = '–ù–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –≤ –†–æ—Å—Å–∏–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ' \
           '–Ω–∞ –¢–í. –ú–æ–ª–æ–¥–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç ' \
           '–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö ' \
           '–ø–æ—Ä—Ç–∞–ª–æ–≤, —Å–æ—Ü—Å–µ—Ç–µ–π –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤.  ' \
           '–ë–æ–ª—å—à–µ 10 –ª–µ—Ç –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ' \
           '–∑–∞—Ö–≤–∞—Ç—ã–≤–∞–ª–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ ' \
           '–¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏: –†–ò–ê ' \
           '–ù–æ–≤–æ—Å—Ç–∏, –ò–∑–≤–µ—Å—Ç–∏—è, –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç, –†–ë–ö –∏ ' \
           '–¥–∞–∂–µ –Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏. –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ' \
           '–≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–æ—Ç–Ω–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Ä—Ç–∞–ª–æ–≤,  ' \
           '–∞ —Ç–∞–∫–∂–µ –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã.\n\n' \
           '–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Å—Ä–µ–¥–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º ' \
           f'–≤—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ - –µ—Å—Ç—å {channel}.' \
           f' –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {channel} —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª—å—é –Ω–µ ' \
           '–¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥–∏–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É ' \
           '–ª—é–¥–µ–π –Ω—É–∂–Ω—É—é [–≤–ª–∞—Å—Ç—è–º] –∫–∞—Ä—Ç–∏–Ω—É –º–∏—Ä–∞. ' \
           '–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—é–∂–µ—Ç–æ–≤,  ' \
           '–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ –¥–æ–∫–∞–∂—É—Ç'
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


channels = [
    "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", [{("RIANEWS_media_1", "RIANEWS_caption_1"): ("RIANEWS_exposure_1", "RIANEWS_cap_exposure_1")},
                    {("RIANEWS_media_2", "RIANEWS_caption_2"): ("RIANEWS_exposure_2", "RIANEWS_cap_exposure_2")},
                    {("RIANEWS_media_3", "RIANEWS_caption_3"): ("RIANEWS_exposure_3", "RIANEWS_cap_exposure_3")},
                    {("RIANEWS_media_4", "RIANEWS_caption_4"): ("RIANEWS_exposure_4", "RIANEWS_cap_exposure_4")},
                    {("RIANEWS_media_5", "RIANEWS_caption_5"): ("RIANEWS_exposure_5", "RIANEWS_cap_exposure_5")}],

    "Russia Today", [{("RUSSIATODAY_media_1", "RUSSIATODAY_caption_1"): ("RUSSIATODAY_exposure_1", "RUSSIATODAY_cap_exposure_1")},
                     {("RUSSIATODAY_media_2", "RUSSIATODAY_caption_2"): ("RUSSIATODAY_exposure_2", "RUSSIATODAY_cap_exposure_2")},
                     {("RUSSIATODAY_media_3", "RUSSIATODAY_caption_3"): ("RUSSIATODAY_exposure_3", "RUSSIATODAY_cap_exposure_3")},
                     {("RUSSIATODAY_media_4", "RUSSIATODAY_caption_4"): ("RUSSIATODAY_exposure_4", "RUSSIATODAY_cap_exposure_4")},
                     {("RUSSIATODAY_media_5", "RUSSIATODAY_caption_5"): ("RUSSIATODAY_exposure_5", "RUSSIATODAY_cap_exposure_5")}],

    "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã: –í–æ–µ–Ω–Ω—ã–π –æ—Å–≤–µ–¥–æ–º–∏—Ç–µ–ª—å / WarGonzo / Kotsnews", [{("TCHANEL_media_1", "TCHANEL_caption_1"): ("TCHANEL_exposure_1", "TCHANEL_cap_exposure_1")},
                        {("TCHANEL_media_2", "TCHANEL_caption_2"): ("TCHANEL_exposure_2", "TCHANEL_cap_exposure_2")},
                        {("TCHANEL_media_3", "TCHANEL_caption_3"): ("TCHANEL_exposure_3", "TCHANEL_cap_exposure_3")},
                        {("TCHANEL_media_4", "TCHANEL_caption_4"): ("TCHANEL_exposure_4", "TCHANEL_cap_exposure_4")},
                        {("TCHANEL_media_5", "TCHANEL_caption_5"): ("TCHANEL_exposure_5", "TCHANEL_cap_exposure_5")}],

    "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏", [{("TCHANEL_WAR_media_1", "TCHANEL_WAR_caption_1"):("TCHANEL_WAR_exposure_1", "TC_WAR_cap_exposure_1")},
                        {("TCHANEL_WAR_media_2", "TCHANEL_WAR_caption_2"): ("TCHANEL_WAR_exposure_2", "TC_WAR_cap_exposure_2")},
                        {("TCHANEL_WAR_media_3", "TCHANEL_WAR_caption_3"): ("TCHANEL_WAR_exposure_3", "TC_WAR_cap_exposure_3")},
                        {("TCHANEL_WAR_media_4", "TCHANEL_WAR_caption_4"): ("TCHANEL_WAR_exposure_4", "TC_WAR_cap_exposure_4")},
                        {("TCHANEL_WAR_media_5", "TCHANEL_WAR_caption_5"): ("TCHANEL_WAR_exposure_5", "TC_WAR_cap_exposure_5")}],

    "–†–ë–ö", [{("RBK_media_1", "RBK_caption_1"): ("RBK_exposure_1", "RBK_cap_exposure_1")},
                        {("RBK_media_2", "RBK_caption_2"):("RBK_exposure_2", "RBK_cap_exposure_2")},
                        {("RBK_media_3", "RBK_caption_3"):("RBK_exposure_3", "RBK_cap_exposure_3")},
                        {("RBK_media_4", "RBK_caption_4"):("RBK_exposure_4", "RBK_cap_exposure_4")},
                        {("RBK_media_5", "RBK_caption_5"):("RBK_exposure_5", "RBK_cap_exposure_5")}],

    "–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ê–∏–§ / –í–µ–¥–æ–º–æ—Å—Ç–∏ / –õ–µ–Ω—Ç–∞ / –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å", [{("TACC_media_1", "TACC_caption_1"):("TACC_exposure_1", "TACC_cap_exposure_1")},
                        {("TACC_media_2", "TACC_caption_2"):("TACC_exposure_2", "TACC_cap_exposure_2")},
                        {("TACC_media_3", "TACC_caption_3"):("TACC_exposure_3", "TACC_cap_exposure_3")},
                        {("TACC_media_4", "TACC_caption_4"):("TACC_exposure_4", "TACC_cap_exposure_4")},
                        {("TACC_media_5", "TACC_caption_5"):("TACC_exposure_5", "TACC_cap_exposure_5")}],

    "–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏", [{("YANDEXNEWS_media_1", "YANDEXNEWS_caption_1"):("YANDEXNEWS_exposure_1", "YNEWS_cap_exposure_1")},
                        {("YANDEXNEWS_media_2", "YANDEXNEWS_caption_2"):("YANDEXNEWS_exposure_2", "YNEWS_cap_exposure_2")},
                        {("YANDEXNEWS_media_3", "YANDEXNEWS_caption_3"):("YANDEXNEWS_exposure_3", "YNEWS_cap_exposure_3")},
                        {("YANDEXNEWS_media_4", "YANDEXNEWS_caption_4"):("YANDEXNEWS_exposure_4", "YNEWS_cap_exposure_4")},
                        {("YANDEXNEWS_media_5", "YANDEXNEWS_caption_5"):("YANDEXNEWS_exposure_5", "YNEWS_cap_exposure_5")}]
    ]



async def keyboard_for_next_chanel(text):
    markup = ReplyKeyboardBuilder()
    if text:
        markup.row(types.KeyboardButton(text=text))
    markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    return markup

async def keyboard_for_all_chanel(lst_kb):
    markup = ReplyKeyboardBuilder()
    for button in lst_kb:
        markup.row(types.KeyboardButton(text=button))
    markup.row(types.KeyboardButton(text='–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'))
    return markup


@router.message(((F.text.contains('–ü–æ–∫–∞–∑—ã–≤–∞–π')) | (F.text.contains('–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏')) |
                (F.text.contains('Russia Today')) | (F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã: –í–æ–µ–Ω–Ω—ã–π –æ—Å–≤–µ–¥–æ–º–∏—Ç–µ–ª—å / WarGonzo / Kotsnews')) |
                (F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏')) | (F.text.contains('–†–ë–ö')) |
                (F.text.contains('–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ê–∏–§ / –í–µ–¥–æ–º–æ—Å—Ç–∏ / –õ–µ–Ω—Ç–∞ / –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å')) | (F.text.contains('–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏')) |
                 (F.text.contains('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º'))) &~(F.text.contains('–µ—â–µ')))  # –≤—Ö–æ–¥ –≤ —Ü–∏–∫–ª
async def show_the_news(message: types.Message, state=FSMContext):
    data = await state.get_data()
    if message.text == '–ü–æ–∫–∞–∑—ã–≤–∞–π':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫?"))
        # –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        user_answer_str = data['answers_str']
        one_channel = channels[channels.index(user_answer_str[0])+1]  # –ø–æ–ª—É—á–∞—é –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        one_media = await sql_safe_select('t_id', 'assets', {'name': list(one_channel[0].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        one_caption = await sql_safe_select('text', 'texts', {'name': list(one_channel[0].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(viewed_channel=user_answer_str[0])  # –ø–µ—Ä–µ–¥–∞—é –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è
        await state.update_data(count_news=0)  # –°—Ç–∞–≤–ª—é —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 0 –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        await state.update_data(all_viwed=[user_answer_str[0]])  # –∑–∞–ø–∏—Å—ã–≤–∞—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        await message.answer_video(one_media, caption=one_caption, reply_markup=markup.as_markup(resize_keyboard=True))

    elif message.text != '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫?"))
        await state.update_data(count_news=0)
        await state.update_data(viewed_channel=message.text)
        new_data = 0
        other_channel = message.text
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏':
            viewed = data["all_viwed"]
            viewed.append(other_channel)
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        channel_exposure = channels[channels.index(other_channel) + 1]
        media = await sql_safe_select('t_id', 'assets', {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption = await sql_safe_select('text', 'texts', {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))

    elif message.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫?"))
        await state.update_data(count_news=0)
        new_data = 0
        other_channel = data['not_viewed_chanel']
        await state.update_data(viewed_channel=other_channel)
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏':
            viewed = data["all_viwed"]
            viewed.append(other_channel)
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        channel_exposure = channels[channels.index(other_channel) + 1]
        media = await sql_safe_select('t_id', 'assets', {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption = await sql_safe_select('text', 'texts', {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        await poll_get(f'Start_answers: ethernet: {message.from_user.id}')






@router.message((F.text.contains('–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫?')))
async def revealing_the_news(message: types.Message, state=FSMContext):
    data = await state.get_data()
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª  –º–µ–Ω—è—Ç—å —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    count_news = data['count_news']  # –ü–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
    print(viewed_channel)
    if count_news <=3: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        markup = await keyboard_for_next_chanel(f"–ü–æ–∫–∞–∂–∏ –µ—â–µ –Ω–æ–≤–æ—Å—Ç—å —Å {viewed_channel}")
        channel_exposure = channels[channels.index(viewed_channel)+1]

        media_exposure = await sql_safe_select('t_id', 'assets', {'name': list(channel_exposure[count_news].values())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption_exposure = await sql_safe_select('text', 'texts', {'name': list(channel_exposure[count_news].values())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ

        await message.answer_video(media_exposure, caption=caption_exposure, reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
        channel_exposure = channels[channels.index(viewed_channel) + 1]

        media_exposure = await sql_safe_select('t_id', 'assets', {'name': list(channel_exposure[count_news].values())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption_exposure = await sql_safe_select('text', 'texts', {'name': list(channel_exposure[count_news].values())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer_video(media_exposure, caption=caption_exposure, reply_markup=markup.as_markup(resize_keyboard=True))



@router.message(text_contains=('–ü–æ–∫–∞–∂–∏', '–µ—â–µ', '–Ω–æ–≤–æ—Å—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def show_more(message: types.Message, state=FSMContext):
        data = await state.get_data()
        new_data = data['count_news'] + 1
        await state.update_data(count_news=new_data)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª
        channel_exposure = channels[channels.index(viewed_channel) + 1]
        media = await sql_safe_select('t_id', 'assets', {'name': list(channel_exposure[new_data].keys())[0][0]})  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        caption = await sql_safe_select('text', 'texts', {'name': list(channel_exposure[new_data].keys())[0][1]})  # –ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫?"))
        await message.answer_video(media, caption=caption, reply_markup=markup.as_markup(resize_keyboard=True))



@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ')))
async def revealing_the_news(message: Message, state=FSMContext):
    data = await state.get_data()
    if len(data['answers_str']) - len(data['all_viwed']) != 0:
        #–ü–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ —é–∑–µ—Ä –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        data = await state.get_data()
        markup = await keyboard_for_all_chanel(data['answers_str'])
        text = await sql_safe_select('text', 'texts', {'name': 'antip_another_web_lie'})
        await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await redis_pop(f'Start_answers: ethernet: {message.from_user.id}')


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')))
async def skip_web(message: Message, state=FSMContext):
    data = await state.get_data()
    answer_channel = data['answers_str']  # –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    all_viwed = data['all_viwed']  # –í—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    not_viewed = list(set(answer_channel)-set(all_viwed))
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é, —á—Ç–æ –æ–Ω–∏ –≤—Ä—É—Ç'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É –¥–æ–≤–µ—Ä—è—Ç—å –∏–º'))
    lst_web_answers = str(', '.join(not_viewed))
    next_channel = str(not_viewed[0])
    await state.update_data(not_viewed_chanel=not_viewed[0])

    await message.answer("–Ø —Ö–æ—Ç–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –µ—â–µ, –∫–∞–∫ –≤—Ä—É—Ç "
                         f"{lst_web_answers}, –≤–µ–¥—å –≤—ã "
                         "–æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏–º. –î–ª—è –Ω–∞—à–µ–π "
                         "–¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ—Å–µ–¥—ã –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã "
                         "—Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, –∫–æ–º—É –º–æ–∂–Ω–æ –≤–µ—Ä–∏—Ç—å, –∞ –∫–æ–º—É –Ω–µ—Ç.\n\n"
                         "–ú–æ–∂–Ω–æ —è –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–∫–∞–∂—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "
                         f"—Å—é–∂–µ—Ç –æ—Ç {next_channel}?", reply_markup=markup.as_markup(resize_keyboard=True))



@router.message(PplPropagandaFilter(), (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_bad_people_lies(message: Message, ppl_lies_list,state=FSMContext):
    print("HERE LIES LIES LIST", lies_list)
    lies_list = ppl_lies_list
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    await message.answer(text)
    await message.answer('–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç–∞–º–∏. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—É–ø–∏–∫.')


@router.message((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_truth_game_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_ok(message: Message, state=FSMContext):
    msg = await message.answer("–•–æ—Ä–æ—à–æ")
    await asyncio.sleep(2)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
    all_data().get_bot().edit_message_text("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_anecdote(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(1,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})))
async def antip_emoji(message: Message, state=FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ! üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π ü§Æ"))
    await message.answer("–ú–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.in_({"–ö–æ–Ω–µ—á–Ω–æ! üôÇ", "–ù—É –¥–∞–≤–∞–π ü§Æ"})))
async def antip_do_you_agree(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_do_you_agree'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø–æ—á–µ–º—É')))
async def antip_why_they_belive(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_why_they_belive'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–í–æ–∑–º–æ–∂–Ω–æ') | (F.text.contains('–ø–æ–ª–Ω–æ—Å—Ç—å—é'))))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_to_the_main'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–≤–æ –≤—Å–µ—Ö')))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_prop_difference'})
    await message.answer(text, reply_markup=antip_why_kb())


#@router.message((F.text @ ({"–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?", "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω", "–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ", "–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö", "–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"})))
