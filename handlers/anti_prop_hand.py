import asyncio
from typing import List
from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bata import all_data
from data_base.DBuse import poll_get, redis_just_one_read
from data_base.DBuse import sql_safe_select, data_getter, sql_safe_update
from filters.MapFilters import WebPropagandaFilter, TVPropagandaFilter, PplPropagandaFilter, PoliticsFilter
from handlers import true_resons_hand
from keyboards.map_keys import antip_why_kb, antip_killme_kb
from resources.all_polls import web_prop
from resources.other_lists import channels
from states.antiprop_states import propaganda_victim
from stats.stat import mongo_update_stat
from utilts import simple_media

flags = {"throttling_key": "True"}
router = Router()

router.message.filter(state=propaganda_victim)

"""@router.message(TVPropagandaFilter(option="–°–∫–æ—Ä–µ–µ –¥–∞"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_all_yes_start(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π üì∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def rather_no_TV(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antip_all_no_TV(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥ üëâ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)"""


@router.message(TVPropagandaFilter(option="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'), flags=flags)
async def antiprop_all_yes_second(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î", "–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í ‚Äî –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"})),
    flags=flags)
async def antiprop_tv_selecter(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1 –∫–∞–Ω–∞–ª üì∫', '–†–æ—Å—Å–∏—è 1 / 24 üì∫', '–ó–≤–µ–∑–¥–∞ üì∫', '–ù–¢–í üì∫']
    await state.update_data(first_tv_count=0, rus24_tv_count=0, HTB_tv_count=0, Star_tv_count=0)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞? ü§î"))
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é... üëΩ"))
    nmarkup.adjust(1, 2, 2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('1 –∫–∞–Ω–∞–ª')) & ~(F.text.contains('üá∑üá∫')), flags=flags)
async def antiprop_tv_first(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_first)
        count = (await state.get_data())['first_tv_count'] + 1
        await state.update_data(first_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await simple_media(message, f'tv_first_lie_{count}', nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('1 / 24 üì∫')), flags=flags)
async def antiprop_tv_24(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_russia24)
        count = (await state.get_data())['rus24_tv_count'] + 1
        await state.update_data(rus24_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await simple_media(message, f'tv_24_lie_{count}', nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ù–¢–í üì∫')), flags=flags)
async def antiprop_tv_HTB(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_HTB)
        count = (await state.get_data())['HTB_tv_count'] + 1
        await state.update_data(HTB_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await simple_media(message, f'tv_HTB_lie_{count}', nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ó–≤–µ–∑–¥')), flags=flags)
async def antiprop_tv_star(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_star)
        count = (await state.get_data())['Star_tv_count'] + 1
        await state.update_data(Star_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await simple_media(message, f'tv_star_lie_{count}', nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_first, flags=flags)
async def russia_tv_first_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['first_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_first_reb_{count + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å 1 –∫–∞–Ω–∞–ª–∞ üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await simple_media(message, f'tv_first_reb_{count}', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_russia24, flags=flags)
async def tv_russia24_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['rus24_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_24_reb_{count + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç c –†–æ—Å—Å–∏–∏ 1 / 24 üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await simple_media(message, f'tv_24_reb_{count}', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_HTB, flags=flags)
async def tv_HTB_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['HTB_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_HTB_reb_{count + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç –ù–¢–í üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await simple_media(message, f'tv_HTB_reb_{count}', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_star, flags=flags)
async def tv_star_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['Star_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_star_lie_{count + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å —Ç–µ–ª–µ–∫–∞–Ω–∞–ª–∞ –ó–≤–µ–∑–¥–∞ üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    await simple_media(message, f'tv_star_reb_{count}', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ') & (F.text.contains('–ø–æ–Ω—è—Ç–Ω–æ ‚úã'))), flags=flags)
async def antip_crossed_boy_1(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_1'})
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'))
    await simple_media(message, 'antip_crossed_boy_1', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'), flags=flags)
async def antip_crossed_boy_2(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥"))
    await simple_media(message, 'antip_crossed_boy_2', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥'), flags=flags)
async def antip_crossed_boy_3(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_3'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å üò±"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üòï"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–∞–∫–æ–π —É–∂–∞—Å üò±") | (F.text == "–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üòï"), flags=flags)
async def antip_crossed_boy_3(message: Message):
    text2 = await sql_safe_select('text', 'texts', {'name': 'antip_be_honest'})
    await message.answer(text2, reply_markup=antip_killme_kb(), disable_web_page_preview=True)


# –ø–µ—Ä–µ–¥–µ–ª–∞—é
@router.message((F.text.contains('–¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª')) | (F.text.contains('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ')), flags=flags)
async def antip_another_tv(message: Message, state: FSMContext):
    bigdata = await state.get_data()
    nmarkup = ReplyKeyboardBuilder()
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_first_lie_{bigdata["first_tv_count"] + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text='1 –∫–∞–Ω–∞–ª üì∫'))
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_24_lie_{bigdata["rus24_tv_count"] + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text='–†–æ—Å—Å–∏—è 1 / 24 üì∫'))
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_star_lie_{bigdata["Star_tv_count"] + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text='–ó–≤–µ–∑–¥–∞ üì∫'))
    if await sql_safe_select('t_id', 'assets', {'name': f'tv_HTB_lie_{bigdata["HTB_tv_count"] + 1}'}) is not False:
        nmarkup.row(types.KeyboardButton(text='–ù–¢–í üì∫'))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ‚úã"))
    nmarkup.adjust(2, 2, 1)
    await message.answer('–Ø —Å–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –±–æ–ª—å—à—É—é –±–∞–∑—É –ª–∂–∏ –Ω–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.'
                         ' –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π -- –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!', reply_markup=nmarkup.as_markup(resize_keyboard=True),
                         disable_web_page_preview=True)


@router.message((F.text.contains('–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞')), flags=flags)
async def russia_in_nutshell(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_is_prop'})
    utv_list = ['1 –∫–∞–Ω–∞–ª üì∫', '–†–æ—Å—Å–∏—è 1 / 24 üì∫', '–ó–≤–µ–∑–¥–∞ üì∫', '–ù–¢–í üì∫']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é... üëΩ"))
    nmarkup.adjust(2, 2, 1)
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–∑–∞–≥–æ–≤–æ—Ä–∞')), flags=flags)
async def antip_conspirasy(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞? ü§î"))
    utv_list = ['1 –∫–∞–Ω–∞–ª üì∫', '–†–æ—Å—Å–∏—è 1 / 24 üì∫', '–ó–≤–µ–∑–¥–∞ üì∫', '–ù–¢–í üì∫']
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.adjust(1, 2, 2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WebPropagandaFilter(), (
        (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) |
        (F.text.contains('–∑–Ω–∞–ª'))), flags=flags)
@router.message(WebPropagandaFilter(), commands=["test"])
async def antip_not_only_TV(message: Message, web_lies_list: List[str], state: FSMContext):
    answer_id_str = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: ethernet_id:')
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ"))
    lies_list = web_lies_list
    answer_id_int = []

    all_answers = web_prop.copy()
    for i in answer_id_str:
        answer_id_int.append(int(i))  # —á–∏—Å–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        answer_id_int.remove(2)
        lies_list.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
        all_answers.remove('Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞')
    except:
        pass
    try:
        answer_id_int.remove(7)
        lies_list.remove('–í–∏–∫–∏–ø–µ–¥–∏—è')
        all_answers.remove("–í–∏–∫–∏–ø–µ–¥–∏—è")
    except:
        pass
    try:
        answer_id_int.remove(6)
        lies_list.remove('–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏')
        all_answers.remove("–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏")
    except:
        pass
    try:
        answer_id_int.remove(8)
        lies_list.remove('–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...')
        all_answers.remove("–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...")
    except:
        pass

    await state.update_data(all_answers=all_answers)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞
    await state.update_data(answers_int=answer_id_int)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–¥–µ–∫—Å—ã
    await state.update_data(answers_str=lies_list)  # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏
    channel = lies_list[0]
    #antip_not_only_TV
    text = await sql_safe_select('text', 'texts', {'name': 'antip_not_only_TV'})
    text = text.replace('[[–ø–µ—Ä–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫]]', channel)
    text = text.replace('[[–µ—â—ë —Ä–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞]]', channel)

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


async def keyboard_for_next_chanel(text):
    markup = ReplyKeyboardBuilder()
    if text:
        markup.row(types.KeyboardButton(text=text))
    markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö"))
    return markup


async def keyboard_for_all_chanel(lst_kb):
    markup = ReplyKeyboardBuilder()
    for button in lst_kb:
        markup.row(types.KeyboardButton(text=button + ' üëÄ'))
        markup.adjust(2)
    markup.row(types.KeyboardButton(text='–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è'))
    return markup


async def check_name(tag):
    try:
        conn = all_data().get_postg()
        with conn:
            with conn.cursor() as cur:
                cur.execute(f"SELECT t_id from public.assets WHERE name = '{tag}';")
                data = cur.fetchall()
        conn.close()
        return data[0]
    except:
        return False


@router.message(((F.text.contains('–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ')) | (F.text.contains('–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏ üëÄ')) | (
        F.text.contains('Russia Today üëÄ')) | (
                         F.text.contains('–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§ üëÄ')) | (
                         F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏ üëÄ')) | (F.text.contains('–†–ë–ö üëÄ')) | (
                         F.text.contains('–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä / Lenta.ru / –ò–∑–≤–µ—Å—Ç–∏—è üëÄ')) |
                 (F.text.contains('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))) & ~(
        F.text.contains('–µ—â–µ')), flags=flags)  # –≤—Ö–æ–¥ –≤ —Ü–∏–∫–ª
async def show_the_news(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == '–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        # –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        user_answer_str = data['answers_str']
        one_channel = channels[channels.index(user_answer_str[0])]  # –ø–æ–ª—É—á–∞—é –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(count_news=1)  # –°—Ç–∞–≤–ª—é —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 0 –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏

        tag_media = ''
        if one_channel == web_prop[0]:
            tag_media = 'RIANEWS_media_'
        elif one_channel == web_prop[1]:
            tag_media = 'RUSSIATODAY_media_'
        elif one_channel == web_prop[3]:
            tag_media = 'TCHANEL_WAR_media_'
        elif one_channel == web_prop[4]:
            tag_media = 'TACC_media_'
        elif one_channel == web_prop[5]:
            tag_media = 'MINISTRY_media_'

        await simple_media(message, tag_media + "1",
                           reply_markup=markup.as_markup(resize_keyboard=True))  # –ü–æ–ª—É—á–∞—é id –≤–∏–¥–µ–æ
        await state.update_data(viewed_channel=user_answer_str[0])  # –ø–µ—Ä–µ–¥–∞—é –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è
        await state.update_data(all_viwed=[user_answer_str[0]])  # –∑–∞–ø–∏—Å—ã–≤–∞—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    elif message.text != '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        await state.update_data(count_news=1)
        await state.update_data(viewed_channel=message.text[:-2])
        new_data = 1
        other_channel = message.text[:-2]
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è':
            viewed = data["all_viwed"]
            viewed.append(other_channel[:-2])
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        tag_media = ''

        if other_channel == web_prop[0]:
            tag_media = 'RIANEWS_media_'
        elif other_channel == web_prop[1]:
            tag_media = 'RUSSIATODAY_media_'
        elif other_channel == web_prop[3]:
            tag_media = 'TCHANEL_WAR_media_'
        elif other_channel == web_prop[4]:
            tag_media = 'TACC_media_'
        elif other_channel == web_prop[5]:
            tag_media = 'MINISTRY_media_'
        await simple_media(message, tag_media + str(new_data), reply_markup=markup.as_markup(resize_keyboard=True))

    elif message.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
        await state.update_data(count_news=1)
        new_data = 1
        other_channel = data['not_viewed_chanel']
        tag_media = ''
        if other_channel == web_prop[0]:
            tag_media = 'RIANEWS_media_'
        elif other_channel == web_prop[1]:
            tag_media = 'RUSSIATODAY_media_'
        elif other_channel == web_prop[3]:
            tag_media = 'TCHANEL_WAR_media_'
        elif other_channel == web_prop[4]:
            tag_media = 'TACC_media_'
        elif other_channel == web_prop[5]:
            tag_media = 'MINISTRY_media_'
        await state.update_data(viewed_channel=other_channel)
        if other_channel != '–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è':
            viewed = data["all_viwed"]
            viewed.append(other_channel)
            await state.update_data(all_viwed=list(set(viewed)))  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await simple_media(message, tag_media + str(new_data), reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        await poll_get(f'Usrs: {message.from_user.id}: Start_answers: ethernet:')


@router.message((F.text.contains('–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î')), flags=flags)
async def revealing_the_news(message: types.Message, state: FSMContext):
    data = await state.get_data()
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª  –º–µ–Ω—è—Ç—å —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    count_news = data['count_news']  # –ü–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
    tag_exposure = ''
    if viewed_channel == web_prop[0]:
        tag_exposure = 'RIANEWS_exposure_'
    elif viewed_channel == web_prop[1]:
        tag_exposure = 'RUSSIATODAY_exposure_'
    elif viewed_channel == web_prop[3]:
        tag_exposure = 'TCHANEL_WAR_exposure_'
    elif viewed_channel == web_prop[4]:
        tag_exposure = 'TACC_exposure_'
    elif viewed_channel == web_prop[5]:
        tag_exposure = 'MINISTRY_exposure_'
    check_end = await check_name(tag_exposure + str(count_news + 1))
    if check_end is not False:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        markup = await keyboard_for_next_chanel(f"–ü–æ–∫–∞–∂–∏ –µ—â–µ –Ω–æ–≤–æ—Å—Ç—å —Å {viewed_channel} üëÄ")
        await simple_media(message, tag_exposure + str(count_news), reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö"))
        await simple_media(message, tag_exposure + str(count_news), reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(text_contains=('–ü–æ–∫–∞–∂–∏', '–µ—â–µ', '–Ω–æ–≤–æ—Å—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def show_more(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_data = data['count_news'] + 1
    await state.update_data(count_news=new_data)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª
    tag_media = ''
    if viewed_channel == web_prop[0]:
        tag_media = 'RIANEWS_media_'
    elif viewed_channel == web_prop[1]:
        tag_media = 'RUSSIATODAY_media_'
    elif viewed_channel == web_prop[3]:
        tag_media = 'TCHANEL_WAR_media_'
    elif viewed_channel == web_prop[4]:
        tag_media = 'TACC_media_'
    elif viewed_channel == web_prop[5]:
        tag_media = 'MINISTRY_media_'

    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î"))
    await simple_media(message, tag_media + str(new_data), reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö')), flags=flags)
async def revealing_the_news(message: Message, state: FSMContext):
    data = await state.get_data()
    if len(data['answers_str']) - len(data['all_viwed']) != 0:
        # –ü–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ —é–∑–µ—Ä –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        data = await state.get_data()
        markup = await keyboard_for_all_chanel(data['answers_str'])
        text = await sql_safe_select('text', 'texts', {'name': 'antip_another_web_lie'})
        await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        redis = all_data().get_data_red()
        for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:*"):
            redis.delete(key)
        print(set(await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust:')).isdisjoint(
            ("–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤",
             "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤")))
        if set(await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust:')).isdisjoint(
                ("–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤",
                 "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤")) is False:
            await antip_bad_people_lies(message, state)
        else:
            await antip_truth_game_start(message, state)


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è')), flags=flags)
async def skip_web(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_channel = data['answers_str']  # –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    all_viwed = data['all_viwed']  # –í—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    not_viewed = list(set(answer_channel) - set(all_viwed))
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é, —á—Ç–æ –æ–Ω–∏ –≤—Ä—É—Ç üòí'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É –¥–æ–≤–µ—Ä—è—Ç—å –∏–º üëç'))
    lst_web_answers = str(', '.join(not_viewed))
    next_channel = str(not_viewed[0])
    await state.update_data(not_viewed_chanel=not_viewed[0])
    await message.answer("–Ø —Ö–æ—Ç–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –µ—â–µ, –∫–∞–∫ –≤—Ä—É—Ç "
                         f"{lst_web_answers}, –≤–µ–¥—å –≤—ã "
                         "–æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏–º. –î–ª—è –Ω–∞—à–µ–π "
                         "–¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ—Å–µ–¥—ã –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã "
                         "—Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, –∫–æ–º—É –º–æ–∂–Ω–æ –≤–µ—Ä–∏—Ç—å, –∞ –∫–æ–º—É –Ω–µ—Ç.\n\n"
                         "–ú–æ–∂–Ω–æ —è –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–∫–∞–∂—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "
                         f"—Å—é–∂–µ—Ç –æ—Ç {next_channel}?", reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ù–µ –Ω–∞–¥–æ')), flags=flags)
async def antip_web_exit_1(message: Message, state: FSMContext):
    redis = all_data().get_data_red()
    for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:"):
        redis.delete(key)
    print(f"{await state.get_state()} asdwdqdwqsdqad")
    if await state.get_state() == "propaganda_victim:options":
        await antip_truth_game_start(message, state)

        redis.delete(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust:')
        return
    if set(await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust:')).isdisjoint(
            ("–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤",
             "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤")) is False:
        await antip_bad_people_lies(message, state)
    else:
        await antip_truth_game_start(message, state)


@router.message(PplPropagandaFilter(),
                (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (
                        F.text.contains('–∑–Ω–∞–ª')) | (F.text == '–ö–æ–Ω–µ—á–Ω–æ!'), flags=flags)
async def antip_bad_people_lies(message: Message, state: FSMContext):
    redis = all_data().get_data_red()
    await state.set_state(propaganda_victim.ppl_propaganda)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    text = text.replace('[[–ø–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å]]',
                        ((await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:'))[0]))

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º üôÇ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (
        F.text.contains('–∑–Ω–∞–ª')) | (F.text == '–ö–æ–Ω–µ—á–Ω–æ!') | (F.text == '–ù—É –¥–∞–≤–∞–π'), flags=flags)
async def antip_truth_game_start(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º! üöÄ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–∞—á–Ω–µ–º! üöÄ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"), flags=flags)
async def antip_truth_game_start_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['gamecount']
    except:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.truthgame"))[0][0]
    print(f"–í —Ç–∞–±–ª–∏—Ü–µ {how_many_rounds} –∑–∞–ø–∏—Å–µ–π, –∞ –≤–æ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ–π—á–∞—Å {count}")
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter(f"""SELECT * FROM ( SELECT truth, t_id, text, belivers, nonbelivers,
                                         rebuttal, reb_asset_name,
                                         ROW_NUMBER () OVER (ORDER BY id), id FROM public.truthgame
                                         left outer join assets on asset_name = assets.name
                                         left outer join texts ON text_name = texts.name)
                                         AS sub WHERE row_number = {count}"""))[0]
        await state.update_data(gamecount=count, truth=truth_data[0], rebuttal=truth_data[5], belive=truth_data[3],
                                not_belive=truth_data[4], reb_media_tag=truth_data[6], game_id=truth_data[8])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ"))
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ª–æ–∂—å ‚ùå"))
        if truth_data[1] is not None:
            capt = ""
            if truth_data[2] is not None:
                capt = truth_data[2]
            try:
                await message.answer_video(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except:
                await message.answer_photo(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(truth_data[2], reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º"))
        await message.answer(
            "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—é–∂–µ—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—Éü§ù",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ") | (F.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå"), flags=flags)
async def antip_truth_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    END = bool(data['gamecount'] == (await data_getter('SELECT COUNT(id) FROM public.truthgame'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ  üôÖ‚Äç‚ôÄÔ∏è"))
    else:
        nmarkup.row(types.KeyboardButton(text="ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º"))
    base_update_dict, reality = dict(), str()
    if message.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ":
        if data['truth'] == True:
            reality = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ø—Ä–∞–≤–¥–∞!"
        elif data['truth'] == False:
            reality = "–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –ª–æ–∂—å!"
        base_update_dict = {'belivers': data['belive'] + 1}
    elif message.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå":
        if data['truth'] == True:
            reality = "–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –ø—Ä–∞–≤–¥–∞!"
        elif data['truth'] == False:
            reality = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ª–æ–∂—å!"
        base_update_dict = {'nonbelivers': data['not_belive'] + 1}
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    text = reality + f'\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n‚úÖ <b>–ü—Ä–∞–≤–¥–∞:</b> {round(t_percentage * 100)}%\n' \
                     f'‚ùå <b>–õ–æ–∂—å</b>: {round((100 - t_percentage * 100))}%' + '\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –Ω–∏–∂–µ.'
    reb = data['rebuttal']
    await sql_safe_update("truthgame", base_update_dict, {'id': data['game_id']})
    media = await sql_safe_select('t_id', 'assets', {'name': data['reb_media_tag']})
    if media is False:
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
        await message.answer(reb, disable_web_page_preview=True)
    else:
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
        try:
            await message.answer_video(media, caption=reb)
        except TelegramBadRequest:
            await message.answer_photo(media, caption=reb)
    if END is True:
        await message.answer('–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—é–∂–µ—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—Éü§ù')


@router.message(
    (F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è") | (F.text == 'ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º') | (F.text == '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ  üôÖ‚Äç‚ôÄÔ∏è'),
    flags=flags)
async def antip_ok(message: Message, state: FSMContext):
    await message.answer("–•–æ—Ä–æ—à–æ", reply_markup=ReplyKeyboardRemove())
    if await redis_just_one_read(f'Usrs: {message.from_user.id}: INFOState:') == '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã':
        await asyncio.sleep(1)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
        await message.answer("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        polistate = await redis_just_one_read(f'Usrs: {message.from_user.id}: Politics:')
        await asyncio.sleep(1)
        if polistate == '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π':
            await reasons_lets_figure(message, state)
        elif polistate == '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã':
            await war_point_now(message, state)
        elif polistate == '–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä':
            await reasons_king_of_info(message, state)


@router.message((F.text == '–î–∞–≤–∞–π'), flags=flags)
async def antip_anecdote(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    await state.clear()
    await state.set_state(propaganda_victim.start)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(1, 1, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})), flags=flags)
async def antip_emoji(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ! üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π ü§Æ"))
    await message.answer("–ú–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ö–æ–Ω–µ—á–Ω–æ! üôÇ", "–ù—É –¥–∞–≤–∞–π ü§Æ"})), flags=flags)
async def antip_do_you_agree(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_do_you_agree'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω üëå"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö üá∫üá∏"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ / —á–∞—Å—Ç–∏—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.adjust(2, 1, 2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ø–æ—á–µ–º—É')), flags=flags)
async def antip_why_they_belive(message: Message):
    await simple_media(message, 'antip_why_they_belive', antip_why_kb())


@router.message((F.text.contains('–í–æ–∑–º–æ–∂–Ω–æ') | (F.text.contains('–ø–æ–ª–Ω–æ—Å—Ç—å—é')) | (F.text.contains('–°–∫–æ—Ä–µ–µ')) | (
F.text.contains('–î–æ–ø—É—Å–∫–∞—é'))), flags=flags)
async def antip_to_the_main(message: Message):
    await simple_media(message, 'antip_to_the_main', antip_why_kb())


@router.message((F.text.contains('—Å—Ç—Ä–∞–Ω–∞—Ö')) | (F.text.contains('üá∫üá∏')), flags=flags)
async def antip_to_the_main(message: Message):
    await simple_media(message, 'antip_prop_difference', antip_why_kb())


@router.message((F.text.contains("–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üôÖ‚Äç‚ôÇÔ∏è")), flags=flags)
async def antip_love_propaganda(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_love_propaganda'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö üá∫üá∏"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–∞–º —Ö–æ—Ç—è—Ç –¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥—É üòå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–ù–µ—Ç, –Ω–∞–º —Ö–æ—Ç—è—Ç –¥–æ–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–¥—É üòå')
async def antip_big_love_propaganda(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_big_love_propaganda'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(
        text="–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞). –î–æ–ø—É—Å–∫–∞—é, —á—Ç–æ –¢–í –∏ –≥–æ—Å. –°–ú–ò –Ω–µ —Å—Ç–∞–≤—è—Ç —Ü–µ–ª—å—é –¥–æ–Ω–µ—Å—Ç–∏ –¥–æ –ª—é–¥–µ–π –ø—Ä–∞–≤–¥—É üòî"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å')), flags=flags)
async def antip_reputation_matters(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_reputation_matters'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üá∑üá∫üá∫üá¶'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


# –ü–æ —Ö–æ—Ä–æ—à–µ–º—É, —ç—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ –≤–æ–π–Ω—ã
# –Ø –ù–ï –ó–ù–ê–Æ –ö–ê–ö –≠–¢–û –ù–û–†–ú–ê–õ–¨–ù–û –ü–û–í–ï–°–ò–¢–¨
@router.message(PoliticsFilter(title='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã'),
                ((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
                        F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏–º üá∑üá∫üá∫üá¶')), flags=flags)
async def war_point_now(message: Message, state: FSMContext):
    await mongo_update_stat(message.from_user.id, 'antiprop')
    await state.set_state(true_resons_hand.TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_war_point_now'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(PoliticsFilter(title='–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π'),
                ((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
                        F.text.contains("–ü—Ä–æ–¥–æ–ª–∂–∏–º üá∑üá∫üá∫üá¶")), flags=flags)
async def reasons_lets_figure(message: Message, state: FSMContext):
    await state.set_state(true_resons_hand.TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_lets_figure'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º üëå"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –ø–æ–ª–∏—Ç–∏–∫–æ–π üòê"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ–∑–∞—á–µ–º, –≤–µ–¥—å —ç—Ç–∏ —Ü–µ–ª–∏ - –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã ü§¨"))
    nmarkup.adjust(2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text.contains('–¥–µ–π—Å—Ç–≤–∏—è')) & (F.text.contains('–£–∫—Ä–∞–∏–Ω–µ'))) | (
        F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏–º üá∑üá∫üá∫üá¶')), flags=flags)
async def reasons_king_of_info(message: Message, state: FSMContext):
    await state.set_state(true_resons_hand.TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_king_of_info'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå"))
    nmarkup.row(
        types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏. –Ø —Ç–∞–∫ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª(–∞). –° —á–µ–≥–æ —Ç—ã –≤–∑—è–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏? ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
