import asyncio

from typing import List
from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from DBuse import sql_safe_select
from bata import all_data
from filters.All_filters import WebPropagandaFilter, TVPropagandaFilter, PplPropagandaFilter
from keyboards.map_keys import antip_why_kb, antip_killme_kb
from states.antiprop_states import propaganda_victim

router = Router()
router.message.filter(state = propaganda_victim)

#–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å "–∂–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–µ—Ö–∞–ª–∏!".



@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –¥–∞"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_rather_yes_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antiprop_all_yes_start(message: Message, state=FSMContext):
    print('IN LIE HE TRUST')
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(TVPropagandaFilter(option ="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def antiprop_all_yes_second(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message(TVPropagandaFilter(option ="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def rather_no_TV(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'rather_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message(TVPropagandaFilter(option ="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"), (F.text == '–ü–æ–µ—Ö–∞–ª–∏!'))
async def antip_all_no_TV(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_all_no_TV'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î", "–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í -- –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"})))
async def antiprop_tv_selecter(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞?"))
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∞—è-—Ç–æ —Ç–µ–æ—Ä–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞, –Ω–µ –≤–µ—Ä—é"))
    nmarkup.adjust(3,3,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('1Ô∏è‚É£')) & ~(F.text.contains('üá∑üá∫')))
async def antiprop_tv_first(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_first)
    try:
        count = (await state.get_data())['first_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(first_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å –ü–µ—Ä–≤–æ–≥–æ')


@router.message((F.text.contains('2Ô∏è‚É£4Ô∏è‚É£')))
async def antiprop_tv_24(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_russia24)
    try:
        count = (await state.get_data())['rus24_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(rus24_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏24')

@router.message((F.text.contains('üá∑üá∫1Ô∏è‚É£')))
async def antiprop_tv_russia1(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_russia1)
    try:
        count = (await state.get_data())['rus1_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(rus1_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å –†–æ—Å—Å–∏–∏1')

@router.message((F.text.contains('‚ùáÔ∏è‚ñ∂Ô∏è')))
async def antiprop_tv_HTB(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_HTB)
    try:
        count = (await state.get_data())['HTB_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(HTB_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å –ù–¢–í')

@router.message((F.text.contains('‚≠êÔ∏èüÖæÔ∏è')))
async def antiprop_tv_star(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_star)
    try:
        count = (await state.get_data())['Star_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(Star_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å–æ –ó–≤–µ–∑–¥—ã')

@router.message((F.text.contains('üü†üç∫')))
async def antiprop_tv_ren(message: Message, state=FSMContext):
    await state.set_state(propaganda_victim.tv_ren)
    try:
        count = (await state.get_data())['ren_tv_count']
    except:
        count = 0
    count += 1
    await state.update_data(ren_tv_count=count)
    vid_id = await sql_safe_select('t_id', 'assets', {'name':'TV_shit_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∏–¥–µ–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫?"))
    await message.answer_video(vid_id, reply_markup=nmarkup.as_markup(resize_keyboard=True), caption=f'{count} —Å—é–∂–µ—Ç —Å –†–µ–Ω—Ç–≤')


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_first)
async def russia_tv_first_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['first_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å 1Ô∏è‚É£ –ü–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_russia24)
async def tv_russia24_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['rus24_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–∏24'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç 2Ô∏è‚É£4Ô∏è‚É£ –†–æ—Å—Å–∏–∏24"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_russia1)
async def tv_russia1_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['rus1_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–∏1'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç üá∑üá∫1Ô∏è‚É£ –†–æ—Å—Å–∏–∏1"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_HTB)
async def tv_HTB_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['HTB_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ù–¢–í'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç ‚ùáÔ∏è‚ñ∂Ô∏è –ù–¢–í"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_star)
async def tv_star_reb(message: Message, state=FSMContext):
    count = (await state.get_data())['Star_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Å–æ–≤–∫–∞–Ω–∞–ª–∞'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç ‚≠êÔ∏èüÖæÔ∏è –ó–≤–µ–∑–¥—ã"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—á—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state = propaganda_victim.tv_ren)
async def russia_in_nutshell(message: Message, state=FSMContext):
    count = (await state.get_data())['ren_tv_count']
    text = f'{count} –†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ —Ä–µ–Ω—Ç–≤'
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç üü†üç∫ –†–µ–Ω—Ç–≤"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ') & (F.text.contains('–ø–æ–Ω—è—Ç–Ω–æ'))))
async def antip_crossed_boy_1(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_1'})
    vid_id = await sql_safe_select('t_id', 'assets', {'name': 'TV_rebuttal_filler'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç 2Ô∏è‚É£4Ô∏è‚É£ –†–æ—Å—Å–∏–∏24"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª"))
    await message.answer_video(vid_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ–ª'))
async def antip_crossed_boy_2(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π..."))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π...'))
async def antip_crossed_boy_3(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_3'})
    text2 = await sql_safe_select('text', 'texts', {'name': 'antip_be_honest'})
    await message.answer(text)
    await asyncio.sleep(4)
    await message.answer(text2, reply_markup=antip_killme_kb())


@router.message((F.text.contains('–¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª'))| (F.text.contains('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    utv_list = ['1Ô∏è‚É£','2Ô∏è‚É£4Ô∏è‚É£','üá∑üá∫1Ô∏è‚É£','‚ùáÔ∏è‚ñ∂Ô∏è', '‚≠êÔ∏èüÖæÔ∏è', 'üü†üç∫']
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.adjust(2,2,2)
    await message.answer('–Ø —Å–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –±–æ–ª—å—à—É—é –±–∞–∑—É –ª–∂–∏ –Ω–∞ —Ñ–µ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö. –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π -- –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!',
                         reply_markup=nmarkup.as_markup())



@router.message((F.text.contains('–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞')))
async def russia_in_nutshell(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_is_prop'})
    await message.answer(text)



@router.message((F.text.contains('–∑–∞–≥–æ–≤–æ—Ä–∞')))
async def antip_conspirasy(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    await message.answer(text)



@router.message(WebPropagandaFilter(), ((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª'))))
async def antip_not_only_TV(message: Message, web_lies_list: List[str], state=FSMContext):
    print("HERE LIES LIES LIST", web_lies_list)
    lies_list = web_lies_list
    text = await sql_safe_select('text', 'texts', {'name': 'antip_not_only_TV'})
    await message.answer(text)
    await message.answer('–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—É–ø–∏–∫')


@router.message(PplPropagandaFilter(), (F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_bad_people_lies(message: Message, ppl_lies_list,state=FSMContext):
    print("HERE LIES LIES LIST", ppl_lies_list)
    lies_list = ppl_lies_list
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    await message.answer(text)
    await message.answer('–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç–∞–º–∏. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—É–ø–∏–∫.')


@router.message((F.text.contains('—à–∞–≥')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text.contains('—à–æ–∫–µ')) | (F.text.contains('–∑–Ω–∞–ª')))
async def antip_truth_game_start(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å"))
    await message.answer(text, reply_markup=nmarkup.as_markup())


@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_ok(message: Message, state=FSMContext):
    msg = await message.answer("–•–æ—Ä–æ—à–æ")
    await asyncio.sleep(2)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
    all_data().get_bot().edit_message_text("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text == '–ù–µ —Å–µ–π—á–∞—Å'))
async def antip_anecdote(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(1,1,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})))
async def antip_emoji(message: Message, state=FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ! üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π ü§Æ"))
    await message.answer("–ú–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å?", reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.in_({"–ö–æ–Ω–µ—á–Ω–æ! üôÇ", "–ù—É –¥–∞–≤–∞–π ü§Æ"})))
async def antip_do_you_agree(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_do_you_agree'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø–æ—á–µ–º—É')))
async def antip_why_they_belive(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_why_they_belive'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–í–æ–∑–º–æ–∂–Ω–æ') | (F.text.contains('–ø–æ–ª–Ω–æ—Å—Ç—å—é'))))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_to_the_main'})
    await message.answer(text, reply_markup=antip_why_kb())


@router.message((F.text.contains('–≤–æ –≤—Å–µ—Ö')))
async def antip_to_the_main(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_prop_difference'})
    await message.answer(text, reply_markup=antip_why_kb())


#@router.message((F.text @ ({"–î–∞, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –ª—é–¥–∏ –µ–π –≤–µ—Ä—è—Ç?", "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω", "–í–æ–∑–º–æ–∂–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ", "–î–∞, –∫–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö", "–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"})))
