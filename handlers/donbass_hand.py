from aiogram import Router, F
from aiogram import types, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from data_base.DBuse import poll_write, sql_safe_select, poll_get, redis_delete_from_list
from filters.MapFilters import DonbassOptionsFilter
from handlers.true_resons_hand import TruereasonsState
from keyboards.main_keys import filler_kb
from resources.all_polls import donbass_first_poll
from states.donbass_states import donbass_state
from utilts import simple_media

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=donbass_state)


@router.message(F.text == '–ß—Ç–æ –≥–ª–∞–≤–Ω–æ–µ? ü§î', flags=flags)
async def donbass_chart_1(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–î–∞, –∑–Ω–∞–ª(–∞) üëå'))
    nmarkup.add(types.KeyboardButton(text='–ù–µ—Ç, –Ω–µ –∑–Ω–∞–ª(–∞) ü§î'))
    nmarkup.row(types.KeyboardButton(text='–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ¬ª? üë®‚Äçüë©‚Äçüëß‚Äçüë¶'))
    nmarkup.adjust(2, 1)
    await simple_media(message, 'donbass_chart_1', nmarkup.as_markup(resize_keyboard=True))


@router.message(text_contains='–∑–Ω–∞—á–∏—Ç', content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def eight_years_add(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_years_add'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–î–∞, –∑–Ω–∞–ª(–∞) üëå'))
    nmarkup.add(types.KeyboardButton(text='–ù–µ—Ç, –Ω–µ –∑–Ω–∞–ª(–∞) ü§î'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–∑–Ω–∞–ª')), flags=flags)
async def donbass_chart_2(message: Message, state: FSMContext):
    await state.set_state(donbass_state.eight_years_selection)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è'))
    await simple_media(message, 'donbass_chart_2', nmarkup.as_markup(resize_keyboard=True))


@router.message(donbass_state.eight_years_selection, (F.text.contains('–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è')), flags=flags)
async def donbass_poll(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    await message.answer_poll("–û—Ç–º–µ—Ç—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≥–ª–∞—Å–Ω—ã",
                              donbass_first_poll, is_anonymous=False, allows_multiple_answers=True,
                              reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(donbass_state.eight_years_selection, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'), flags=flags)
async def poll_filler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–û–õ–û–°–û–í–ê–¢–¨¬ª –∏–ª–∏ ¬´VOTE¬ª',
                         reply_markup=ReplyKeyboardRemove())


# –¢—É—Ç —É–¥–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∫–∞–∂–¥–æ–π –≤–µ—Ç–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å –°–†–ê–ó–£ –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞
@router.poll_answer(state=donbass_state.eight_years_selection)
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    indexes = poll_answer.option_ids
    true_options = list()
    print(indexes)
    for index in indexes:
        if index == 0:
            # TODO:–ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
            continue
        true_options.append(donbass_first_poll[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[index])
    if "üõ° –ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–Ω–µ—Å–ª–∏ —É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —É–¥–∞—Ä, —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –Ω–∞–ø–∞–ª–∞ –±—ã –ø–µ—Ä–≤–∞—è –∏ –∂–µ—Ä—Ç–≤ –±—ã–ª–æ –±—ã –±–æ–ª—å—à–µ" in true_options:
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:',
                         "üíÇ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –≤ –£–∫—Ä–∞–∏–Ω–µ")
    # –ï—Å–ª–∏ –±–ª–æ–∫ —Å —É–ø—Ä–µ–∂–¥–∞—é—â–∏–º —É–¥–∞—Ä–æ–º –ø–æ–¥–∫–ª—é—á–∞—Ç, —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —ç–ª–∏—Ñ–∞–º–∏
    if "üòï –≠—Ç–∏ ¬´–º–∏—Ä–Ω—ã–µ –ª—é–¥–∏¬ª - –∂–∏—Ç–µ–ª–∏ –£–∫—Ä–∞–∏–Ω—ã, –∞ –∑–Ω–∞—á–∏—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã, –∏—Ö –Ω–µ –∂–∞–ª–∫–æ" in true_options:
        await state.update_data(nazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:',
                         'ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤')
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[3])
    if "üìä –û–û–ù –≤—Ä—ë—Ç, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏—Ö –∂–µ—Ä—Ç–≤ —Å—Ä–µ–¥–∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è" in true_options:
        text = await sql_safe_select('text', 'texts', {'name': 'civil_casualties'})
        video = await sql_safe_select('t_id', 'assets', {'name': 'civil_casualties'})
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[2])
        try:
            await bot.send_video(poll_answer.user.id, video, caption=text, reply_markup=filler_kb())
        except TelegramBadRequest:
            await bot.send_message(poll_answer.user.id, text, reply_markup=filler_kb(), disable_web_page_preview=True)
    elif "üè¢ –≠—Ç–æ —É–∫—Ä–∞–∏–Ω—Ü—ã —Å–∞–º–∏ —Å—Ç—Ä–µ–ª—è—é—Ç –ø–æ —Å–≤–æ–∏–º –∂–µ –∂–∏—Ç–µ–ª—è–º! –ú—ã –∂–µ –±—å–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º" in true_options:
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[4])
        text = await sql_safe_select('text', 'texts', {'name': 'only_war_objects'})
        video = await sql_safe_select('t_id', 'assets', {'name': 'only_war_objects'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∂–∞—Å. üò® –î–∞–≤–∞–π –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."))
        nmarkup.row(types.KeyboardButton(text="–ù–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è, —á—Ç–æ–±—ã –æ–±–≤–∏–Ω–∏—Ç—å –†–æ—Å—Å–∏—é üëÜ"))
        nmarkup.row(
            types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–æ–º–∞—Ö –∏ –¥–µ–ª–∞—é—Ç –∏—Ö –ª–µ–≥–∏—Ç–∏–º–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é üò°"))
        try:
            await bot.send_video(poll_answer.user.id, video, caption=text, reply_markup=filler_kb())
        except TelegramBadRequest:
            await bot.send_message(poll_answer.user.id, text, reply_markup=filler_kb(), disable_web_page_preview=True)
    elif "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –¢–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –∫–∞–∫ –∂–∏–≤–æ–π —â–∏—Ç! –ü–æ—ç—Ç–æ–º—É –ø–æ–≥–∏–±–∞—é—Ç –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏" in true_options:
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[5])
        text = await sql_safe_select('text', 'texts', {'name': 'donbas_live_shield_start'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ó–∞—á–µ–º –æ–Ω–∏ –≤–æ–æ–±—â–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª–∏—Å—å? ü§∑‚Äç‚ôÄÔ∏è–ú—ã –∂–µ –∏–º –∂–µ–ª–∞–µ–º –º–∏—Ä–∞."))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               parse_mode="HTML", disable_web_page_preview=True)
    elif "üè≥Ô∏è –£–∫—Ä–∞–∏–Ω—Ü–∞–º –Ω–∞–¥–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–∞—Ç—å—Å—è, —Ç–æ–≥–¥–∞ –±—ã —Å—Ç–æ–ª—å–∫–æ –∂–µ—Ä—Ç–≤ –Ω–µ –±—ã–ª–æ" in true_options:
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[6])
        await state.update_data(nazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
        text = await sql_safe_select('text', 'texts', {'name': 'war_beginning'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(
            types.KeyboardButton(text="–¢—É—Ç –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ, –º—ã –∏—Ö –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç–æ–≤, –∑–∞—Ö–≤–∞—Ç–∏–≤—à–∏—Ö –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üôã‚Äç‚ôÇÔ∏è"))
        nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), —è –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–∞—á–∞–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è üëå"))
        nmarkup.row(types.KeyboardButton(
            text="–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞), –≤ —Å–ª—É—á–∞–µ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –†–æ—Å—Å–∏—é –ª—É—á—à–µ —Å–¥–∞—Ç—å—Å—è, –∑–∞—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∂–µ—Ä—Ç–≤ üïä"))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               parse_mode="HTML", disable_web_page_preview=True)
    elif "üéØ –≠—Ç–æ —É–∂–∞—Å–Ω–æ, –Ω–æ –ø–æ–º–∏–º–æ –∑–∞—â–∏—Ç—ã –∂–∏—Ç–µ–ª–µ–π –î–æ–Ω–±–∞—Å—Å–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã" in true_options:
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Donbass_polls: First:', donbass_first_poll[7])
        text = await sql_safe_select('text', 'texts', {'name': 'reasons_here'})
        reason_list_2 = set(await poll_get(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:'))
        reason_text = '\n\n'
        for reason in reason_list_2:
            reason_text = reason_text + reason + '\n'
        text = text + reason_text + '\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –≤—Å–µ –æ–±—Å—É–¥–∏–º, –∞ –ø–æ–∫–∞ —á—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Ç–µ–º–µ –î–æ–Ω–±–∞—Å—Å–∞'
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå "))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")
    elif indexes == [0]:
        await bot.send_message(poll_answer.user.id, '–ù—É —á—Ç–æ –∂–µ, –ø–æ—Ö–æ–∂–µ –º–Ω–µ –Ω–µ –Ω–∞–¥–æ –≤–∞—Å –ø–µ—Ä–µ—É–±–µ–∂–¥–∞—Ç—å. –ü–æ–π–¥–µ–º –¥–∞–ª—å—à–µ?',
                               reply_markup=filler_kb(), disable_web_page_preview=True)
    await state.set_state(donbass_state.after_poll)


# –≠—Ç–æ—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
"""@router.message(option_filter(option = '–ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–Ω–µ—Å–ª–∏ —É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —É–¥–∞—Ä,
 —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –Ω–∞–ø–∞–ª–∞ –±—ã –ø–µ—Ä–≤–∞—è, –∏ –∂–µ—Ä—Ç–≤ –±—ã–ª–æ –±—ã –±–æ–ª—å—à–µ'))
async def preventive_strike(message: Message, state=FSMContext):
    text = '–£ –º–µ–Ω—è –µ—Å—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ: "–ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–Ω–µ—Å–ª–∏ —É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —É–¥–∞—Ä,
     —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –Ω–∞–ø–∞–ª–∞ –±—ã –ø–µ—Ä–≤–∞—è..." –ö—É–¥–∞?'
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="...–Ω–∞ –î–ù–†/–õ–ù–† –∏ –ö—Ä—ã–º"))
    nmarkup.row(types.KeyboardButton(text="...–≤–º–µ—Å—Ç–µ —Å –ù–ê–¢–û –Ω–∞ –†–æ—Å—Å–∏—é"))
    nmarkup.row(types.KeyboardButton(text="–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"))
    nmarkup.adjust(2,1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))"""

"""@router.message((F.text.contains('–î–ù–†/–õ–ù–†') | (F.text.contains('–ù–ê–¢–û')) | (F.text.contains('–û–±–∞'))))
async def donbas_reason_to_war(message: Message, state=FSMContext):
    reason = str
    if message.text == "...–Ω–∞ –î–ù–†/–õ–ù–† –∏ –ö—Ä—ã–º":
        reason = '–ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–ø–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏, —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –±—ã –Ω–∞–ø–∞–ª–∞ –Ω–∞ –î–ù–†/–õ–ù–† –∏ –ö—Ä—ã–º'
    if message.text == "...–≤–º–µ—Å—Ç–µ —Å –ù–ê–¢–û –Ω–∞ –†–æ—Å—Å–∏—é":
        reason = '–ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–ø–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏, —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –±—ã –Ω–∞–ø–∞–ª–∞ –≤–º–µ—Å—Ç–µ —Å –ù–ê–¢–û –Ω–∞ –†–æ—Å—Å–∏—é'
    if message.text == "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞":
        reason = '–ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞–ø–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏, —Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –±—ã –Ω–∞–ø–∞–ª–∞ –Ω–∞ –î–ù–†/–õ–ù–† –∏ –≤–º–µ—Å—Ç–µ —Å –ù–ê–¢–û –Ω–∞ –†–æ—Å—Å–∏—é'
    await state.update_data(war_reasons=reason)
    await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: First:')
    text = await sql_safe_select('text', 'texts', {'name': 'reason_to_war'})
    video_id = await sql_safe_select('t_id', 'assets', {'name': 'putin_may'})
    try:
        await message.answer_video(video_id, caption=text, reply_markup=filler_kb())
    except:
        await message.answer_photo(video_id, caption=text, reply_markup=filler_kb())"""


@router.message(DonbassOptionsFilter(option='–û–û–ù –≤—Ä—ë—Ç, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏—Ö –∂–µ—Ä—Ç–≤ —Å—Ä–µ–¥–∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è'),
                (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ üëå ", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_OOH(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[2])
    await simple_media(message, 'civil_casualties', filler_kb())


# @router.message(
#     DonbassOptionsFilter(option='–≠—Ç–∏ "–º–∏—Ä–Ω—ã–µ –ª—é–¥–∏" ‚Äî –∂–∏—Ç–µ–ª–∏ –£–∫—Ä–∞–∏–Ω—ã, –∞ –∑–Ω–∞—á–∏—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∂–∞–ª–∫–æ'),
#     (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
# async def donbas_nazi(message: Message, state=FSMContext):
#     await state.update_data(nazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
#     if '–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤' not in (
#             await poll_get(f'Usrs: {message.from_user.id}: Start_answers: Invasion:')):
#         await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
#                          'ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤')
#         print('TEST NAZI')
#     text = await sql_safe_select('text', 'texts', {'name': 'donbas_nazi'})
#     await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: First:')
#     await message.answer(text, reply_markup=filler_kb())


@router.message(
    DonbassOptionsFilter(
        option="üè¢ –≠—Ç–æ —É–∫—Ä–∞–∏–Ω—Ü—ã —Å–∞–º–∏ —Å—Ç—Ä–µ–ª—è—é—Ç –ø–æ —Å–≤–æ–∏–º –∂–µ –∂–∏—Ç–µ–ª—è–º! –ú—ã –∂–µ –±—å–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º"),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ üëå ", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_only_war_objects(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[4])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∂–∞—Å. üò® –î–∞–≤–∞–π –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."))
    nmarkup.row(types.KeyboardButton(text="–ù–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è, —á—Ç–æ–±—ã –æ–±–≤–∏–Ω–∏—Ç—å –†–æ—Å—Å–∏—é üëÜ"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–æ–º–∞—Ö –∏ –¥–µ–ª–∞—é—Ç –∏—Ö –ª–µ–≥–∏—Ç–∏–º–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é üò°"))
    await simple_media(message, 'only_war_objects', nmarkup.as_markup())


@router.message(text_contains=('–æ–±–≤–∏–Ω–∏—Ç—å', '–ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è'), content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def provocation(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'protection'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(
        types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–æ–º–∞—Ö –∏ –¥–µ–ª–∞—é—Ç –∏—Ö –ª–µ–≥–∏—Ç–∏–º–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é üò°"))
    nmarkup.row(
        types.KeyboardButton(text="–ñ–µ—Ä—Ç–≤—ã —Å—Ä–µ–¥–∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è - —ç—Ç–æ –ø–ª–æ—Ö–æ, –Ω–æ —ç—Ç–æ –≤—Å–µ —Ä–∞–¥–∏ –≤–∞–∂–Ω—ã—Ö —Ü–µ–ª–µ–π. üá∑üá∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('—Å—Ä–µ–¥–∏', '–Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–≤–∞–∂–Ω—ã—Ö'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def exit_point_two(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_return_to_donbass'})
    answers = await poll_get(f'Usrs: {message.from_user.id}: Donbass_polls: First:')
    await poll_write(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[7])
    await state.update_data(big_game='–ü–æ–º–∏–º–æ –∑–∞—â–∏—Ç—ã –∂–∏—Ç–µ–ª–µ–π –î–æ–Ω–±–∞—Å—Å–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã.')
    await message.answer(text, reply_markup=filler_kb(), parse_mode="HTML")


@router.message(text_contains=('—É–∂–∞—Å', '—Å–ª–µ–¥—É—é—â–µ–π', '—Ç–µ–º–µ'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def exit_point_zero(message: Message):
    await message.answer('–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª—è—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞.', reply_markup=filler_kb(), parse_mode="HTML")


@router.message(text_contains=('—É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã', '–ª–µ–≥–∏—Ç–∏–º–Ω–æ–π'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
@router.message(
    DonbassOptionsFilter(
        option="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –¢–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –∫–∞–∫ –∂–∏–≤–æ–π —â–∏—Ç! –ü–æ—ç—Ç–æ–º—É –ø–æ–≥–∏–±–∞—é—Ç –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ üëå ", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_live_shield_start(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[5])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_live_shield_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—á–µ–º –æ–Ω–∏ –≤–æ–æ–±—â–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª–∏—Å—å? ü§∑‚Äç‚ôÄÔ∏è–ú—ã –∂–µ –∏–º –∂–µ–ª–∞–µ–º –º–∏—Ä–∞."))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(text_contains=('—Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª–∏—Å—å', '–º–∏—Ä–∞'), content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def provocation(message: Message, state: FSMContext):
    await state.update_data(surrender='–£–∫—Ä–∞–∏–Ω—Ü–∞–º –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–∞—Ç—å—Å—è, —Ç–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –±—ã —Å—Ç–æ–ª—å–∫–∏—Ö –∂–µ—Ä—Ç–≤')
    await donbas_why_not_surrender(message)


@router.message(DonbassOptionsFilter(option="üè≥Ô∏è –£–∫—Ä–∞–∏–Ω—Ü–∞–º –Ω–∞–¥–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–∞—Ç—å—Å—è, —Ç–æ–≥–¥–∞ –±—ã —Å—Ç–æ–ª—å–∫–æ –∂–µ—Ä—Ç–≤ –Ω–µ –±—ã–ª–æ"),
                (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ üëå ", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_why_not_surrender(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[6])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_why_not_surrender'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), —è –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–∞—á–∞–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è üëå"))
    nmarkup.row(types.KeyboardButton(
        text="–¢—É—Ç –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ, –º—ã –∏—Ö –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç–æ–≤, –∑–∞—Ö–≤–∞—Ç–∏–≤—à–∏—Ö –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üôã‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(
        text="–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞), –≤ —Å–ª—É—á–∞–µ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –†–æ—Å—Å–∏—é –ª—É—á—à–µ —Å–¥–∞—Ç—å—Å—è, –∑–∞—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∂–µ—Ä—Ç–≤ üïä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º', '–Ω–µ–æ–Ω–∞—Ü'), content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def donbas_putin_unleashed(message: Message, state: FSMContext):
    await state.update_data(neonazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è.')
    await poll_write(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                     "üíÄ –ù–∞ –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå "))
    await simple_media(message, 'donbas_putin_unleashed', nmarkup.as_markup(resize_keyboard=True))


@router.message(text_contains=('—Å–ª—É—á–∞–µ', '–∂–µ—Ä—Ç–≤', '—Å–¥–∞—Ç—å—Å—è'), content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def donbas_strange_world(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_strange_world'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), —è –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–∞—á–∞–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è üëå"))
    nmarkup.row(types.KeyboardButton(text="–õ—É—á—à–µ –±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∏–∫—Ç–æ –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –Ω–∞–ø–∞–¥–∞–ª üïä"))
    nmarkup.row(
        types.KeyboardButton(text="–ù–æ –†–æ—Å—Å–∏—è - –Ω–µ –∞–≥—Ä–µ—Å—Å–æ—Ä. –ú—ã –Ω–µ –Ω–∞–ø–∞–¥–∞–µ–º, –∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É –æ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º–∞ üôã‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('–õ—É—á—à–µ', '–Ω–∏–∫—Ç–æ', '–∫–æ–≥–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def donbas_sentient_bot(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_sentient_bot'})
    await message.answer(text, reply_markup=filler_kb(), parse_mode="HTML", disable_web_page_preview=True)


@router.message(text_contains=('–°–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–Ω–∏–º–∞—é', '–Ω–∞—á–∞–ª–∏'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def donbas_understanding(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_understanding'})
    await message.answer(text, reply_markup=filler_kb(), parse_mode="HTML", disable_web_page_preview=True)


@router.message(DonbassOptionsFilter(
    option='üéØ –≠—Ç–æ —É–∂–∞—Å–Ω–æ, –Ω–æ –ø–æ–º–∏–º–æ –∑–∞—â–∏—Ç—ã –∂–∏—Ç–µ–ª–µ–π –î–æ–Ω–±–∞—Å—Å–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ üëå ", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_more_reasons(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[7])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_more_reasons'})
    reason_list_2 = set(await poll_get(f'Usrs: {message.from_user.id}: Start_answers: Invasion:'))
    reason_text = '\n\n'
    for reason in reason_list_2:
        reason_text = reason_text + reason + '\n'
    text = text + reason_text + '\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –≤—Å–µ –æ–±—Å—É–¥–∏–º, –∞ –ø–æ–∫–∞ —á—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Ç–µ–º–µ –î–æ–Ω–±–∞—Å—Å–∞'
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå "))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML", disable_web_page_preview=True)


@router.message(state=donbass_state.after_poll, flags=flags)
async def donbas_who_do_that(message: Message, state=FSMContext):
    await state.set_state(donbass_state.second_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_who_do_that'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö üìú"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–æ—Ä–æ—á–µ ‚è±"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–∫–æ—Ä–æ—á–µ ‚è±"), flags=flags)
async def donbas_long_maidan(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'short_separ_text'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"))
    nmarkup.row(types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == '–í –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö üìú'), flags=flags)
async def donbas_long_maidan(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_long_maidan'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –¥–∞–ª—å—à–µ? ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –¥–∞–ª—å—à–µ? ‚è≥"), flags=flags)
async def donbas_can_you_be_normal(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
    nmarkup.row(types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"))
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_can_you_be_normal'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


"""@router.poll_answer(state=donbass_state.second_poll)
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state=FSMContext):
    indexes = poll_answer.option_ids
    true_options = list()
    print(indexes)
    for index in indexes:
        if index == 0:
            continue
        true_options.append(donbass_second_poll[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:', donbass_second_poll[index])
    if '–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–í–æ–æ–±—â–µ-—Ç–æ –Ω–∞—à–∏ –≤–æ–π—Å–∫–∞ –±—ã–ª–∏ –≤ –î–ù–† –∏ –õ–ù–†, –≤–æ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n\n"
                               "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>", reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif '–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–∏—é,' \
         ' –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –±—ã –ø–æ–º–æ–≥–ª–æ –ü—É—Ç–∏–Ω—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å\n\n"
                               "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>", reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif '–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–¢–µ–ø–µ—Ä—å –ù–ê–¢–û –≤–ø–æ—Ä—É –ø—Ä–æ—Å–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω—É."
                               " –ì–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?..\n\n\n\n\n–ó–¥–µ—Å—å: (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)"
                               , reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif indexes == [0]:
        await bot.send_message(poll_answer.user.id, '–ù—É —á—Ç–æ –∂–µ, –ø–æ—Ö–æ–∂–µ –º–Ω–µ –Ω–µ'
                                                    ' –Ω–∞–¥–æ –≤–∞—Å –ø–µ—Ä–µ—É–±–µ–∂–¥–∞—Ç—å. –ü–æ–π–¥–µ–º –¥–∞–ª—å—à–µ?', reply_markup=filler_kb())
    await state.set_state(donbass_state.after_second_poll)
"""

"""@router.message(second_donbass_filter(
    option='–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
async def donbas_no_army_here(message: Message):
    await message.answer(
        "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –±—ã –ø–æ–º–æ–≥–ª–æ –ü—É—Ç–∏–Ω—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å\n\n"
        "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>",
        reply_markup=filler_kb())
    await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: Second:')


@router.message(
    second_donbass_filter(option='–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
async def donbas_no_army_here(message: Message):
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ù–ê–¢–û –≤–ø–æ—Ä—É –ø—Ä–æ—Å–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω—É. –ì–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?..\n"
        "–ó–¥–µ—Å—å:\n\n\n\n (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ)\n           *–∫—Ä–æ–¥–µ—Ç—Å—è*\n\n(–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ2)\n *—Å–ø–∏—Ç*",
        reply_markup=filler_kb())
    await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: Second:')


@router.message(state=donbass_state.after_second_poll)
async def donbas_no_army_here(message: Message, state=FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç"))
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–Ω–±–∞—Å—Å–∞
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ")
    await state.set_state(TruereasonsState.main)
    await message.answer(
        "–†–∞–¥, —á—Ç–æ –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –î–æ–Ω–±–∞—Å—Å–æ–º."
        " –í–µ—Ä–Ω–µ–º—Å—è –∂–µ –∫ –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã.\n"
        "–í –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –Ω–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –µ—Å—Ç—å.",
        reply_markup=nmarkup.as_markup(resize_keyboard=True))"""


@router.message((F.text == "–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"), flags=flags)
async def donbas_hypocrisy(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_hypocrisy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–πüñ±"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"), flags=flags)
async def donbas_untrue(message: Message, state=FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_untrue'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–πüñ±") | (F.text == '–•–æ—Ä–æ—à–æ üëå'), flags=flags)
@router.message((F.text == "–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
@router.message((F.text == "–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
async def donbas_no_army_here(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∑–∞–º–µ—á–∞—é‚Äç‚ôÄ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –∑–∞–º–µ—á–∞—éü§∑‚Äç‚ôÄ"))
    await simple_media(message, 'donbass_no_male', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞, –∑–∞–º–µ—á–∞—é‚Äç‚ôÄ") | (F.text == "–ù–µ—Ç, –Ω–µ –∑–∞–º–µ—á–∞—éü§∑‚Äç‚ôÄ"), flags=flags)
async def donbas_no_army_here(message: Message, state=FSMContext):
    await state.set_state(TruereasonsState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å üò®"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media(message, 'lnr_mobilization', nmarkup.as_markup(resize_keyboard=True))
