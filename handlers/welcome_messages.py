import asyncio
import datetime
from datetime import time

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.filters.command import CommandStart, CommandObject
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bata import all_data
from data_base.DBuse import poll_write, sql_safe_select, mongo_add, mongo_select, redis_just_one_write, \
    mongo_user_info, redis_just_one_read, advertising_value
from day_func import day_count
from resources.all_polls import web_prop, welc_message_one, people_prop
from states import welcome_states
from states.antiprop_states import propaganda_victim
from stats.stat import mongo_stat, mongo_update_stat, mongo_stat_new, mongo_update_stat_new

flags = {"throttling_key": "True"}
router = Router()


@router.message(CommandStart(command_magic=F.args), flags=flags)
async def adv_company(message: types.Message, state: FSMContext, command: CommandObject):
    await advertising_value(command.args)
    await commands_start(message, state)


@router.message(commands=['start', 'help', 'restart'], state='*', flags=flags)
async def commands_start(message: types.Message, state: FSMContext):  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    asyncio.create_task(start_base(message))
    await state.clear()
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º üá∑üá∫üá∫üá¶"))
    markup.row(types.KeyboardButton(text="–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å? ü§î"))
    text = await sql_safe_select("text", "texts", {"name": "start_hello"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_1)
    # else:
    #    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")

async def start_base(message):
    user_id = message.from_user.id  # if old is None:
    redis = all_data().get_data_red()
    for key in redis.scan_iter(f"Usrs: {message.from_user.id}:*"):
        redis.delete(key)
    await mongo_stat(user_id)
    await mongo_stat_new(user_id)
    await mongo_user_info(user_id, message.from_user.username)


@router.message(welcome_states.start_dialog.dialogue_1, text_contains='–≤–µ—Ä–∏—Ç—å', content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)  # –ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?
async def message_1(message: types.Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='first_button', value='–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?')
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå"))
    text = await sql_safe_select("text", "texts", {"name": "start_why_belive"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_2)


@router.message(welcome_states.start_dialog.dialogue_2, text_contains='–•–æ—Ä–æ—à–æ', content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
@router.message(welcome_states.start_dialog.dialogue_1, text_contains='–ù–∞—á–Ω–µ–º üá∑üá∫üá∫üá¶',
                content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
# @router.message(welcome_states.start_dialog.dialogue_3) –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã –≤ –±–∞–∑—É
async def message_2(message: types.Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='first_button', value='–ù–∞—á–Ω–µ–º')
    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()

    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞"))
    markup.row(types.KeyboardButton(text="–°–µ–π—á–∞—Å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ "
                                         "–≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ. –í–¥—Ä—É–≥ –≤—ã –∏–∑ –§–°–ë? ü§ê"))
    text = await sql_safe_select("text", "texts", {"name": "start_what_about_you"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_4)


@router.message(welcome_states.start_dialog.dialogue_4, (F.text == '1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)'),
                flags=flags)
async def message_3(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Is_it_war:', message.text)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='war_or_not', value=message.text)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    markup.row(types.KeyboardButton(text="–°—Ç–æ–ø! –ü—Ä–∞–≤–∏–ª—å–Ω–æ ¬´–≤ –£–∫—Ä–∞–∏–Ω–µ¬ª! ‚òùÔ∏è"))
    await state.update_data(answer_1=message.text)
    text = await sql_safe_select("text", "texts", {"name": "start_lets_start"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_4, (F.text == "2Ô∏è‚É£ –í–æ–π–Ω–∞"), flags=flags)
async def start_lets_start_2(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Is_it_war:', message.text)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='war_or_not', value=message.text)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    markup.row(types.KeyboardButton(text="–°—Ç–æ–ø! –ü—Ä–∞–≤–∏–ª—å–Ω–æ ¬´–≤ –£–∫—Ä–∞–∏–Ω–µ¬ª! ‚òùÔ∏è"))
    await state.update_data(answer_1=message.text)
    text = await sql_safe_select("text", "texts", {"name": "start_lets_start_2"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_5, (F.text == "–°—Ç–æ–ø! –ü—Ä–∞–≤–∏–ª—å–Ω–æ ¬´–≤ –£–∫—Ä–∞–∏–Ω–µ¬ª! ‚òùÔ∏è"), flags=flags)
async def start_lets_start_2(message: types.Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='on_ucraine_or_not', value='–î–∞')
    text = await sql_safe_select("text", "texts", {"name": "start_is_it_correct"})
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–≤—ã—Ä–∞–∂–∞—Ç—å', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def message_4(message: types.Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞"))
    text = await sql_safe_select("text", "texts", {"name": "start_afraid"})
    # if –Ω–∞ —Ç—ã
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–¥–æ–ª–≥–æ', '–¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def message_5(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üëå"))
    text = await sql_safe_select("text", "texts", {"name": "start_only_five"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'), state=(welcome_states.start_dialog.dialogue_10,
                                                 welcome_states.start_dialog.dialogue_9,
                                                 welcome_states.start_dialog.dialogue_7), flags=flags)
async def poll_filler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–û–õ–û–°–û–í–ê–¢–¨¬ª –∏–ª–∏ ¬´VOTE¬ª',
                         reply_markup=ReplyKeyboardRemove(), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–•–æ—Ä–æ—à–æ', '—Å–≤–æ–∏', '–≤–æ–ø—Ä–æ—Å—ã'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
@router.message(welcome_states.start_dialog.dialogue_5, text_contains='–ó–∞–¥–∞–≤–∞–π', content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)  # –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def message_6(message: types.Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='on_ucraine_or_not', value='–ù–µ—Ç')
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞  üôÇ"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç  üôÖ‚Äç‚ôÇ"))
    markup.row(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è üá∑üá∫üá∫üá¶"))
    text = await sql_safe_select("text", "texts", {"name": "start_do_you_love_politics"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_6)



@router.message(welcome_states.start_dialog.dialogue_6, flags=flags)
async def message_6to7(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è üá∑üá∫üá∫üá¶" or message.text == "–°–∫–æ—Ä–µ–µ –¥–∞  üôÇ":
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úç"))
        text = await sql_safe_select("text", "texts", {"name": "start_russia_goal"})
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: interest_in_politics:',
                         message.text[:-3].strip())
    elif message.text == '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç  üôÖ‚Äç‚ôÇ':
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
        text = await sql_safe_select("text", "texts", {"name": "not_in_vain"})
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_extrafix)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='interest_politics', value=message.text)


@router.message((F.text.contains('–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º')) | (F.text.contains('–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã')), state=welcome_states.start_dialog.dialogue_extrafix, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 1 –≤–æ–ø—Ä–æ—Å
async def message_7(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    await message.answer_poll(
        question="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Ü–µ–ª–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≥–ª–∞—Å–Ω—ã. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å¬ª",
        options=welc_message_one, is_anonymous=False, allows_multiple_answers=True,
        reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_7)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_7, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 2 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(welc_message_one[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:', welc_message_one[index])
    await state.update_data(ans_lst_2=lst_str)
    await state.update_data(answer_2=lst_answers)

    if '–Ø –Ω–µ –∑–Ω–∞—é' == lst_str[0]:  # idnt know
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen', value='–¢–æ–ª—å–∫–æ "–Ø –Ω–µ –∑–Ω–∞—é"')
    elif {0, 1, 2, 3, 5, 8}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {4, 6}.isdisjoint(set(lst_answers)) is False:  # green
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen', value='–ï—Å—Ç—å –∑–µ–ª—ë–Ω—ã–µ –∏ –Ω–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö')

    await mongo_update_stat_new(tg_id=poll_answer.user.id,column='war_aims_ex', value=lst_str)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ"),
               types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    markup.row(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ"))
    text = await sql_safe_select("text", "texts", {"name": "start_belive_TV"})
    await state.set_state(welcome_states.start_dialog.dialogue_8)
    await bot.send_message(chat_id=poll_answer.user.id, text=text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(state=welcome_states.start_dialog.dialogue_8, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 3 –≤–æ–ø—Ä–æ—Å
async def message_8(message: types.Message, state: FSMContext):
    m_text = message.text
    if m_text == "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ" or m_text == "–°–∫–æ—Ä–µ–µ –¥–∞ üëç" or \
            m_text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé" or m_text == "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî" or \
            m_text == "–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ":
        await mongo_update_stat_new(tg_id=message.from_user.id, column='tv_love_gen', value=m_text)
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: tv:', m_text)
        await state.update_data(answer_3=m_text)
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"))
        text = await sql_safe_select("text", "texts", {"name": "start_internet_belive"})
        await message.answer(text=text, reply_markup=markup.as_markup(resize_keyboard=True),
                             disable_web_page_preview=True)
        await state.set_state(welcome_states.start_dialog.button_next)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                             disable_web_page_preview=True)


@router.message((F.text.contains("–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è")), state=welcome_states.start_dialog.button_next, flags=flags)
async def button(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    text = await sql_safe_select("text", "texts", {"name": "start_internet_poll"})
    await message.answer_poll(text, web_prop, is_anonymous=False, allows_multiple_answers=True,
                              reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_9)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_9, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 4 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_tho(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(web_prop[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet:', web_prop[index])

    if '–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...' in lst_str[0]:  # idnt know
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen', value='–¢–æ–ª—å–∫–æ "–Ø –Ω–µ –∑–Ω–∞—é"')
    elif {2, 3, 4, 5, 7}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {1, 6}.isdisjoint(set(lst_answers)) is False:  # green
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen', value='–ï—Å—Ç—å –∑–µ–ª—ë–Ω—ã–µ –∏ –Ω–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö')
    if '–í–∏–∫–∏–ø–µ–¥–∏—è' not in lst_str:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='why_not_wiki', value=lst_str)

    await state.update_data(answer_4=poll_answer.option_ids)
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_ex', value=lst_str)
    await state.update_data(ans_lst_4=lst_str)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    text = await sql_safe_select("text", "texts", {"name": "start_people_belive"})
    await state.set_state(welcome_states.start_dialog.dialogue_10)
    await bot.send_message(poll_answer.user.id, text)
    await bot.send_poll(poll_answer.user.id, '–û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ—Ö –ª—é–¥–µ–π,'
                                             ' –∫–æ—Ç–æ—Ä—ã–º –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.'
                                             ' –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å¬ª',
                        people_prop, is_anonymous=False,
                        allows_multiple_answers=True,
                        reply_markup=markup.as_markup(resize_keyboard=True))


@router.poll_answer(state=welcome_states.start_dialog.dialogue_10)  # –°–æ—Ö—Ä–∞–Ω—è—é 5 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_three(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    data = await state.get_data()
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(people_prop[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust:', people_prop[index])
        if people_prop[index] != "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω" and people_prop[index] != "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...":
            await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons:',
                             people_prop[index])
            await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons_newpoll:',
                             people_prop[index])
        elif people_prop[index] == "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω":
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: LovePutin', 'True')

    if {1, 2, 3, 4, 5}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {0}.isdisjoint(set(lst_answers)) is False:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–ö—Ä–∞—Å–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ü—É—Ç–∏–Ω')
    else:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–ù–µ—Ç –Ω–∏ –∫—Ä–∞—Å–Ω—ã—Ö, –Ω–∏ –ü—É—Ç–∏–Ω–∞')

    await mongo_update_stat_new(tg_id=poll_answer.user.id,column='prop_ex', value=lst_str)
    text = await sql_safe_select("text", "texts", {"name": "start_thank_you"})
    await bot.send_message(poll_answer.user.id, text)
    await mongo_update_stat(poll_answer.user.id, 'start')
    if await mongo_select(poll_answer.user.id):  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
    else:
        await mongo_add(poll_answer.user.id,
                        [data['answer_1'], data['ans_lst_2'], data['answer_3'], data['ans_lst_4'], lst_str])
    answer_3, answer_4, answer_5 = set(data["answer_3"]), set(data["answer_4"]), set(poll_answer.option_ids)
    if (data["answer_3"] != "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî"
        and data["answer_3"] != "–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ") \
            or ({0, 2, 3, 4, 5, 7}.isdisjoint(answer_4) is False
                or {1, 2, 3, 4, 5}.isdisjoint(answer_5) is False
                or '–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ' in answer_3) \
                or '–°–∫–æ—Ä–µ–µ –¥–∞ üëç' in answer_3 \
                or '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé' in answer_3:

        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')
        await mongo_update_stat(poll_answer.user.id, column='faith', value='victim', options='$set')

        if {0}.isdisjoint(answer_4) is False:
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: Yandex', 1)
        if {1}.isdisjoint(answer_4):
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: NotWiki', 1)
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')
        print('–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')

    elif {1, 6}.isdisjoint(answer_4) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        await mongo_update_stat(poll_answer.user.id, column='faith', value='kinginfo', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        print('–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

    elif {1, 6}.isdisjoint(answer_4) is True:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', "–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π")
        await mongo_update_stat(poll_answer.user.id, column='faith', value='foma', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π')
        print('–§–æ–º–∞ –Ω–µ–µ—Ä—É—é—â–∏–π')

    await state.clear()
    await state.set_state(propaganda_victim.start)

    if {0, 1, 2, 3, 5, 7, 8}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='warsupp', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
    elif {4, 6}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='oppos', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
    elif {9}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='apolitical', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
    if await redis_just_one_read(f'Usrs: {poll_answer.user.id}: INFOState:') == '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã':
        text = await sql_safe_select("text", "texts", {"name": "antip_only_facts"})
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')

        nmarkap = ReplyKeyboardBuilder()
        nmarkap.row(types.KeyboardButton(text="–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëå"))
        nmarkap.add(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π... ü§®"))
        nmarkap.row(types.KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞? ü§î"))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkap.as_markup(resize_keyboard=True))
    else:
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥ üëâ"))
        markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í ‚Äî –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"))
        text = await sql_safe_select("text", "texts", {"name": "antip_all_no_TV"})
        await bot.send_message(poll_answer.user.id, text, reply_markup=markup.as_markup(resize_keyboard=True),
                               disable_web_page_preview=True)


"""    if data["answer_3"] == "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî":
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥ üëâ"))
        markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –ª–æ–∂—å –Ω–∞ –¢–í ‚Äî –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å! üì∫"))
        text = await sql_safe_select("text", "texts", {"name": "antip_all_no_TV"})
        await bot.send_message(poll_answer.user.id, text, reply_markup=markup.as_markup(resize_keyboard=True),
                               disable_web_page_preview=True)
    elif data["answer_3"] == "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ":
        text = await sql_safe_select('text', 'texts', {'name': 'antip_all_yes_TV'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               disable_web_page_preview=True)
    elif data["answer_3"] == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé":
        text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_no_TV'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
        nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               disable_web_page_preview=True)
    elif data["answer_3"] == "–°–∫–æ—Ä–µ–µ –¥–∞ üëç":
        text = await sql_safe_select('text', 'texts', {'name': 'antip_rather_yes_TV'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
        nmarkup.row(types.KeyboardButton(text="–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
        await bot.send_message(poll_answer.user.id, text, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                               disable_web_page_preview=True)"""
