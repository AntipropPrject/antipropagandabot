from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from data_base.DBuse import *
from handlers.anti_prop_hand import antip_truth_game_start
from states.antiprop_states import propaganda_victim

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=propaganda_victim)
messageDict = dict()


@router.message((F.text.contains("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!")), flags=flags)
@router.message((F.text.contains("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ—Å–ª—É—à–∞–µ–º üó£")), flags=flags)
@router.message((F.text.contains('–ø–æ—Å–ª—É—à–∞–µ–º –µ–≥–æ –µ—â–µ! üó£')), flags=flags)
@router.message(commands=["testsmi"], flags=flags)
async def smi_statement(message: Message, state: FSMContext):
    messageDict.update({message.from_user.id: message})

    person_list = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')

    for person in person_list:
        try:
            count = (await state.get_data())[f'{person}_gamecount']
        except:
            await state.update_data({f'{person}_gamecount': 0})
            count = 0

    try:
        how_many_rounds = (await data_getter(
            f"SELECT COUNT (*) FROM public.mistakeorlie where asset_name like '%{str(person_list[0])[-5:-1].strip()}%'"))[
            0][0]
    except:
        errmarkup = ReplyKeyboardBuilder()
        errmarkup.rows(types.KeyboardButton(text="–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ –≤ –ø—Ä–∞–≤–¥—É"))
        await message.answer(
            "–£ –ù–∞–¥–æ –ø—Ä–æ–¥—É–º–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ—Ç –±–æ–ª—å—à–µ –∫—Ä–∞—Å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π? ")
        # Todo send user on truthgame

    print(f"–í —Ç–∞–±–ª–∏—Ü–µ {how_many_rounds} –∑–∞–ø–∏—Å–µ–π, –∞ –≤–æ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ–π—á–∞—Å {count}")
    if count < how_many_rounds:
        count += 1
        try:
            truth_data = (await data_getter(
                "SELECT truth, t_id, text, belivers, nonbelivers, rebuttal, asset_name FROM public.mistakeorlie "
                "left outer join assets on asset_name = assets.name "
                "left outer join texts ON text_name = texts.name "
                f"where asset_name like '%{str(person_list[0])[-5:-1].strip()}%' and asset_name like '%{str(count)}%'"))[
                0]

            print('aaaaaa', truth_data)

            await state.update_data(gamecount=count, truth=truth_data[0], rebuttal=truth_data[5], belive=truth_data[3],
                                    not_belive=truth_data[4], last_media=truth_data[6])

        except IndexError as er:
            await message.answer(text=f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω {er}")


        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé"))
        nmarkup.row(types.KeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç"))
        if truth_data[1] is not None:
            capt = ""
            if truth_data[5] is not None:
                capt = truth_data[5]
            try:
                await message.answer_video(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML"
                                           )
            except:
                await message.answer_photo(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            await state.update_data({f'{person}_gamecount': count})
        else:
            await message.answer(truth_data[2], reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:

        # await message.answer(
        #     "–û–π, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã",
        #     reply_markup=nmarkup.as_markup())
        await sme_statement_start_over(message, state)


@router.message((F.text.in_({"–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç", "–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé"})), flags=flags)
async def smi_statement_enough(message: Message, state: FSMContext):
    person_list = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
    data = await state.get_data()
    base_update_dict = dict()
    print(message.text)
    if message.text == "–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç":
        base_update_dict = {'belivers': data['belive'] + 1}
        print('–≠—Ç–æ–º—É –≤–µ—Ä–∏—Ç', base_update_dict)
    elif message.text == "–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé":
        base_update_dict = {'nonbelivers': data['not_belive'] + 1}
        print('–≠—Ç–æ–º—É –≤–µ—Ä–∏—Ç', base_update_dict)
    await sql_safe_update("mistakeorlie", base_update_dict, {'asset_name': data['last_media']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    nmarkup = ReplyKeyboardBuilder()
    try:
        nmarkup.row(types.KeyboardButton(text=f"{person_list[0]} - –ø–æ—Å–ª—É—à–∞–µ–º –µ–≥–æ –µ—â–µ! üó£"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§ö"))
    except IndexError as er:
        print(er)
    await message.answer(
        f'–ê –≤–æ—Ç —á—Ç–æ –¥—É–º–∞—é—Ç–¥—Ä—É–≥–∏–µ –º–æ–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:\n–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞: {round(t_percentage * 100)}%\n–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å: {round(100 - t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))


# @router.poll_answer(state=antiprop_states.propaganda_victim.dialogue_start_over)
# async def smi_statement(poll_answer: types.PollAnswer, state=FSMContext):
#     text = await sql_safe_select('text', 'texts',
#                                  {
#                                      'name': 'antip_people_stats'})  # todo Change asset name to correct\\check the media type
#     nmarkup = ReplyKeyboardBuilder()
#     nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"))
#     nmarkup.row(types.KeyboardButton(text="–°–∫–∞–∂–∏ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å!"))
#     await Bot(all_data().bot_token).send_message(chat_id=poll_answer.user.id, text=text,
#                                                  reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§ö"), flags=flags)
async def sme_statement_start_over(message: Message, state: FSMContext):
    await redis_delete_first_item("Usrs: 5316104187: Start_answers: who_to_trust_persons:")
    person_list = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
    print(person_list)

    try:
        person = person_list[0]
    except IndexError:
        await antip_truth_game_start(message, state)
    else:
        nmarkup = ReplyKeyboardBuilder()
        options = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons_newpoll:')
        for person in options:
            nmarkup.row(types.KeyboardButton(text=f'{person}üó£'))
        nmarkup.row(types.KeyboardButton(text="–•–≤–∞—Ç–∏—Ç, –Ω–µ –±—É–¥–µ–º —Å–ª—É—à–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö üôÖ‚Äç‚ôÇÔ∏è"))
        await state.set_state(propaganda_victim.options)
        text = await sql_safe_select('text', 'texts',
                                     {
                                         'name': 'antip_game_continue'})

        await state.update_data(options_start_over=options)
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

        # await state.set_state(antiprop_states.propaganda_victim.ppl_propaganda.dialogue_start_over)


@router.message(state=propaganda_victim.options, flags=flags)
async def smi_statement_poll(message: Message, state: FSMContext):
    trimed = ""
    redis = all_data().get_data_red()

    list_to_customize = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
    list_to_customize1 = list_to_customize.copy()

    print(list_to_customize)

    try:
        message_text = message.text
        trimed = message_text.rstrip(message_text[-1])
        list_to_customize.remove(trimed)
    except:
        print('–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç')
    print(list_to_customize)

    redis.delete(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')

    if message.text == "–•–≤–∞—Ç–∏—Ç, –Ω–µ –±—É–¥–µ–º —Å–ª—É—à–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö üôÖ‚Äç‚ôÇÔ∏è":
        for person in list_to_customize1:
            await poll_write(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:', person)
        await sme_statement_skip(message, state)
    else:

        for person in list_to_customize:
            await poll_write(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:', person)
            redis.lpush(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:', trimed)
        await smi_statement(message, state)


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç, –Ω–µ –±—É–¥–µ–º —Å–ª—É—à–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö üôÖ‚Äç‚ôÇÔ∏è')), flags=flags)
async def sme_statement_skip(message: Message, state=FSMContext):
    data = await state.get_data()

    not_viewed = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
    try:
        next_channel = str(not_viewed[0])
    except:
        await message.answer("–ù–µ—Ç—É –ª–∏—á–Ω–æ—Å—Ç–µ–π –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–Ω–æ–≤–æ")
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ—Å–ª—É—à–∞–µ–º üó£'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é, —á—Ç–æ –æ–Ω–∏ –≤—Ä—É—Ç üòí'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É –¥–æ–≤–µ—Ä—è—Ç—å –∏–º üëç'))
    lst_web_answers = str(', '.join(not_viewed))

    await state.update_data(not_viewed_chanel=not_viewed[0])
    string = "–≤—Ä—É—Ç"
    if lst_web_answers.__sizeof__() == 1:
        string = "–≤—Ä—ë—Ç"

    await message.answer(f"–Ø —Ö–æ—Ç–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –µ—â–µ, –∫–∞–∫ {string} "
                         f"{lst_web_answers}, –≤–µ–¥—å –≤—ã "
                         "–æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏–º. –î–ª—è –Ω–∞—à–µ–π "
                         "–¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ—Å–µ–¥—ã –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã "
                         "—Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, –∫–æ–º—É –º–æ–∂–Ω–æ –≤–µ—Ä–∏—Ç—å, –∞ –∫–æ–º—É –Ω–µ—Ç.\n\n"
                         "–ú–æ–∂–Ω–æ —è –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–∫–∞–∂—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "
                         f"—Å—é–∂–µ—Ç –æ—Ç {next_channel}?", reply_markup=markup.as_markup(resize_keyboard=True))
