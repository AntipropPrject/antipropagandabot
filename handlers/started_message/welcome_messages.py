from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from data_base.DBuse import poll_get, poll_write, sql_safe_select, mongo_add, mongo_select, mongo_update
from bata import all_data
from states import welcome_states
from states.antiprop_states import propaganda_victim
from resources.all_polls import web_prop
from stats.stat import mongo_stat, mongo_update


router = Router()


@router.message(commands=['start', 'help'], state="*")
async def commands_start(message: types.Message, state: FSMContext):  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await mongo_stat(message.from_user.id)
    await state.clear()
    all_data().get_data_red().flushdb()
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!"))
    markup.add(types.KeyboardButton(text="–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?"))
    text = await sql_safe_select("text", "texts", {"name": "start_hello"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_1)


@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–≤–µ—Ä–∏—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?
async def message_1(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ"))
    text = await sql_safe_select("text", "texts", {"name": "start_why_belive"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_2)


#@router.message(welcome_states.start_dialog.dialogue_2, text_contains=('–•–æ—Ä–æ—à–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
#@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–ù–∞—á–Ω–µ–º'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –û–±—â–∞–µ–º—Å—è –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã?
#async def message_1(message: types.Message, state: FSMContext):
#    markup = ReplyKeyboardBuilder()
#    markup.add(types.KeyboardButton(text="–ù–∞ —Ç—ã üëã"))
#    markup.add(types.KeyboardButton(text="–ù–∞ –≤—ã ü§ù"))
#    await message.answer("–ö–∞–∫ –Ω–∞–º –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è: –Ω–∞ –¢—ã –∏–ª–∏ –Ω–∞ –í—ã?", reply_markup=markup.as_markup(resize_keyboard=True))
#    await state.set_state(welcome_states.start_dialog.dialogue_3)


@router.message(welcome_states.start_dialog.dialogue_2, text_contains=('–•–æ—Ä–æ—à–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–ù–∞—á–Ω–µ–º'), content_types=types.ContentType.TEXT, text_ignore_case=True)
#@router.message(welcome_states.start_dialog.dialogue_3)  # –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã –≤ –±–∞–∑—É
async def message_2(message: types.Message, state: FSMContext):
    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–µ–π—á–∞—Å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ "
                                 "–≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ. –í–¥—Ä—É–≥ –≤—ã –∏–∑ –§–°–ë?"))
    markup.row(types.KeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="–í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_what_about_you"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    # if –Ω–∞ —Ç—ã

    await state.set_state(welcome_states.start_dialog.dialogue_4)


@router.message(welcome_states.start_dialog.dialogue_4, ((F.text == '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)') | (F.text == '–í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É')))
async def message_3(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Is_it_war:', message.text)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å?"))
    await state.update_data(answer_1=message.text)
    text = await sql_safe_select("text", "texts", {"name": "start_lets_start"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–≤—ã—Ä–∞–∂–∞—Ç—å', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_4(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="–í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_afraid"})
    # if –Ω–∞ —Ç—ã
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–¥–æ–ª–≥–æ', '–¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_5(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã"))
    text = await sql_safe_select("text", "texts", {"name": "start_only_five"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_5)

#((F.text @ ('–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É —É–¥–∏–≤–∏ –º–µ–Ω—è ü§î"))
#@router.message(((F.text == '–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å') | (F.text == '–•–æ—Ä–æ—à–æ')))
@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–•–æ—Ä–æ—à–æ', '—Å–≤–æ–∏', '–≤–æ–ø—Ä–æ—Å—ã'), content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–ó–∞–¥–∞–≤–∞–π'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def message_6(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"))
    text = await sql_safe_select("text", "texts", {"name": "start_do_you_love_politics"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_6)


@router.message(welcome_states.start_dialog.dialogue_6)  # –°–æ—Ö—Ä–∞–Ω—è—é 1 –≤–æ–ø—Ä–æ—Å
async def message_7(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    text = message.text
    if text == '–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è' or text == "–°–∫–æ—Ä–µ–µ –¥–∞" or text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç":
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: interest_in_politics:', message.text)
        options = ["–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ",  # –í–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
                   "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é"
                   " –†–æ—Å—Å–∏–∏ –∏–ª–∏ –õ–ù–†/–î–ù–†", "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤", "–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏",
                   "–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ", "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –±–∏–æ–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ / –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è",
                   "–ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞", "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –î–æ–Ω–±–∞—Å—Å–∞ –∏ —é–≥–∞ –£–∫—Ä–∞–∏–Ω—ã",
                   "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –≤ –£–∫—Ä–∞–∏–Ω–µ", "–Ø –Ω–µ –∑–Ω–∞—é..."
                   ]
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 1 –≤–æ–ø—Ä–æ—Å–∞ –≤ –¥–∞—Ç—É
        await state.update_data(option_1=options)
        text = await sql_safe_select("text", "texts", {"name": "start_russia_goal"})
        await message.answer_poll(text, options, is_anonymous=False, allows_multiple_answers=True, reply_markup=ReplyKeyboardRemove())
        await state.set_state(welcome_states.start_dialog.dialogue_7)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@router.poll_answer(state=welcome_states.start_dialog.dialogue_7)  # –°–æ—Ö—Ä–∞–Ω—è—é 2 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler(poll_answer: types.PollAnswer, state=FSMContext):
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 2 –≤–æ–ø—Ä–æ—Å–∞
    options = await state.get_data()
    lst_options = options["option_1"]
    lst_answers = poll_answer.option_ids
    lst = []
    for index in lst_answers:
        lst.append(lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:', lst_options[index])
    await state.update_data(answer_2=lst_answers)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"))
    markup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_belive_TV"})
    await Bot(all_data().bot_token).send_message(chat_id=poll_answer.user.id, text=text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_8)


@router.message(state=welcome_states.start_dialog.dialogue_8)  # –°–æ—Ö—Ä–∞–Ω—è—é 3 –≤–æ–ø—Ä–æ—Å
async def message_8(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é" or text == "–°–∫–æ—Ä–µ–µ –¥–∞" or text =="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç" or text == "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É":

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞

        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: tv:', message.text)
        await state.update_data(option_3=web_prop)
        await state.update_data(answer_3=message.text)
        text=await sql_safe_select("text", "texts", {"name": "start_internet_belive"})
        await message.answer_poll(text, web_prop, is_anonymous=False, allows_multiple_answers=True, reply_markup=ReplyKeyboardRemove())
        await state.set_state(welcome_states.start_dialog.dialogue_9)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@router.poll_answer(state = welcome_states.start_dialog.dialogue_9)  # –°–æ—Ö—Ä–∞–Ω—è—é 4 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_tho(poll_answer: types.PollAnswer, state=FSMContext):
    options = ["–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω", "–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–†–∞–º–∑–∞–Ω –ö–∞–¥—ã—Ä–æ–≤",
               "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤", "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤",
               "–û–ª—å–≥–∞ –°–∫–∞–±–µ–µ–≤–∞", "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö..."
               ]
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 4 –≤–æ–ø—Ä–æ—Å–∞
    option = await state.get_data()
    lst_options = option["option_3"]
    lst_answers = poll_answer.option_ids
    lst = []
    for index in lst_answers:

        lst.append(lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet_id:', int(index))
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet:', lst_options[index])
    await state.update_data(answer_4=poll_answer.option_ids)
    await state.update_data(option_4=options)
    answer_id_str = await poll_get(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet_id:')
    text = await sql_safe_select("text", "texts", {"name": "start_people_belive"})
    await Bot(all_data().bot_token).send_poll(poll_answer.user.id, text, options, is_anonymous=False, allows_multiple_answers=True)
    await state.set_state(welcome_states.start_dialog.dialogue_10)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_10)  # –°–æ—Ö—Ä–∞–Ω—è—é 5 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_three(poll_answer: types.PollAnswer, state=FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏!"))
    options = await state.get_data()
    lst_options = options["option_4"]
    lst_answers = poll_answer.option_ids
    lst = []
    for index in lst_answers:
        lst.append(lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust:', lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons:', lst_options[index])
    await state.update_data(answer_5=poll_answer.option_ids)
    text = await sql_safe_select("text", "texts", {"name": "start_thank_you"})
    await Bot(all_data().bot_token).send_message(poll_answer.user.id, text, reply_markup=markup.as_markup(resize_keyboard=True))
    data = await state.get_data()
    await mongo_update(poll_answer.user.id, 'start')
    if await mongo_select(poll_answer.user.id):  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
    else:
        await mongo_add(poll_answer.user.id, [data['answer_1'], data['answer_2'], data['answer_3'], data['answer_4'], data['answer_5']])
    if data["answer_3"] != "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"\
            or {0, 1, 3, 4, 5, 6, 7}.isdisjoint(set(data["answer_4"]))==False\
            or {1, 2, 3, 4, 5, 6}.isdisjoint(set(data["answer_5"])) == False:  # –ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã?
        print("–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã")
        print(await mongo_select(poll_answer.user.id))
        await state.set_state(propaganda_victim.start)
    elif {2, 8}.isdisjoint(set(data["answer_4"]))==False or {7}.isdisjoint(set(data["answer_5"]))==False:  # –ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?
        if len(data["answer_2"]) <= 2 and {0, 1, 2, 3, 5, 7, 8} not in set(data["answer_2"]):
            print("–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        else:
            print("–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π")

