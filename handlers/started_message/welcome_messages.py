from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from DBuse import poll_get, poll_write
from bata import all_data
from states import welcome_states
from DBuse import sql_safe_select
router = Router()


@router.message(commands=['message', 'help'], state="*")
async def commands_start(message: types.Message, state: FSMContext):  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.clear()
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!"))
    markup.add(types.KeyboardButton(text="–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?"))
    text = await sql_safe_select("text", "texts", {"name": "start_hello"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_1)


@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–≤–µ—Ä–∏—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?
async def message_1(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ"))
    text = await sql_safe_select("text", "texts", {"name": "start_why_belive"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_2)


#@router.message(welcome_states.start_dialog.dialogue_2, text_contains=('–•–æ—Ä–æ—à–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
#@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–ù–∞—á–Ω–µ–º'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –û–±—â–∞–µ–º—Å—è –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã?
#async def message_1(message: types.Message, state: FSMContext):
#    markup = ReplyKeyboardBuilder()
#    markup.add(types.KeyboardButton(text="–ù–∞ —Ç—ã üëã"))
#    markup.add(types.KeyboardButton(text="–ù–∞ –≤—ã ü§ù"))
#    await message.answer("–ö–∞–∫ –Ω–∞–º –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è: –Ω–∞ –¢—ã –∏–ª–∏ –Ω–∞ –í—ã?", reply_markup=markup.as_markup(resize_keyboard=True))
#    await state.set_state(welcome_states.start_dialog.dialogue_3)


@router.message(welcome_states.start_dialog.dialogue_2, text_contains=('–•–æ—Ä–æ—à–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_1, text_contains=('–ù–∞—á–Ω–µ–º'), content_types=types.ContentType.TEXT, text_ignore_case=True)
#@router.message(welcome_states.start_dialog.dialogue_3)  # –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã –≤ –±–∞–∑—É
async def message_2(message: types.Message, state: FSMContext):
    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–µ–π—á–∞—Å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ "
                                 "–≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ. –í–¥—Ä—É–≥ –≤—ã –∏–∑ –§–°–ë?"))
    markup.row(types.KeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="–í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_what_about_you"})

    await message.answer(text, reply_markup=markup.as_markup())
    # if –Ω–∞ —Ç—ã

    await state.set_state(welcome_states.start_dialog.dialogue_4)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('(–°–í–û)'), content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–í—Ç–æ—Ä–∂–µ–Ω–∏–µ', '–£–∫—Ä–∞–∏–Ω—É'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_3(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å?"))
    text = await sql_safe_select("text", "texts", {"name": "start_lets_start"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–≤—ã—Ä–∞–∂–∞—Ç—å', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_4(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.add(types.KeyboardButton(text="–í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_afraid"})
    # if –Ω–∞ —Ç—ã
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–¥–æ–ª–≥–æ', '–¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_5(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã"))
    text = await sql_safe_select("text", "texts", {"name": "start_only_five"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–•–æ—Ä–æ—à–æ', '—Å–≤–æ–∏', '–≤–æ–ø—Ä–æ—Å—ã'), content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–ó–∞–¥–∞–≤–∞–π'), content_types=types.ContentType.TEXT, text_ignore_case=True)  # –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def message_6(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"))
    text = await sql_safe_select("text", "texts", {"name": "start_do_you_love_politics"})
    await message.answer(text, reply_markup=markup.as_markup())
    await state.set_state(welcome_states.start_dialog.dialogue_6)


@router.message(welcome_states.start_dialog.dialogue_6)  # –°–æ—Ö—Ä–∞–Ω—è—é 1 –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—é –≤—Ç–æ—Ä–æ–π
async def message_7(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    print(1)
    options = ["–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ",  # –í–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
               "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é"
               " –†–æ—Å—Å–∏–∏ –∏–ª–∏ –õ–ù–†/–î–ù–†", "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤", "–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏",
               "–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ", "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –±–∏–æ–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ / –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è",
               "–ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞", "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –î–æ–Ω–±–∞—Å—Å–∞ –∏ —é–≥–∞ –£–∫—Ä–∞–∏–Ω—ã",
               "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –≤ –£–∫—Ä–∞–∏–Ω–µ", "–Ø –Ω–µ –∑–Ω–∞—é..."
               ]
    text = await sql_safe_select("text", "texts", {"name": "start_russia_goal"})
    await message.answer_poll(text, options, is_anonymous=False, allows_multiple_answers=True)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    await state.set_state(welcome_states.start_dialog.dialogue_7)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_7)  # –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
async def poll_answer_handler(poll_answer: types.PollAnswer, state=FSMContext):
    print(poll_answer.option_ids)  # —Ç—É—Ç –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é"))
    markup.add(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"))
    markup.add(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_belive_TV"})
    await Bot(all_data().bot_token).send_message(chat_id=poll_answer.user.id, text=text, reply_markup=markup.as_markup())
    await state.set_state(welcome_states.start_dialog.dialogue_8)


@router.message(state=welcome_states.start_dialog.dialogue_8)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 4
async def message_8(message: types.Message, state: FSMContext):
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞
    options = ["–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", "Russia Today",
               "Meduza / BBC / –†–∞–¥–∏–æ –°–≤–æ–±–æ–¥–∞ / –ú–µ–¥–∏–∞–∑–æ–Ω–∞ / –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è / –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞",
               "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã: –í–æ–µ–Ω–Ω—ã–π –æ—Å–≤–µ–¥–æ–º–∏—Ç–µ–ª—å / WarGonzo / Kotsnews",
               "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏", "–†–ë–ö",
               "–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ê–∏–§ / –í–µ–¥–æ–º–æ—Å—Ç–∏ / –õ–µ–Ω—Ç–∞ / –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å",
               "–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏", "–í–∏–∫–∏–ø–µ–¥–∏—è", "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...",
               ]
    text = await sql_safe_select("text", "texts", {"name": "start_internet_belive"})
    await message.answer_poll(text, options, is_anonymous=False, allows_multiple_answers=True)
    await state.set_state(welcome_states.start_dialog.dialogue_9)


@router.poll_answer(state = welcome_states.start_dialog.dialogue_9)  # –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ—Ç–∏–π
async def poll_answer_handler_tho(poll_answer: types.PollAnswer, state=FSMContext):
    print(poll_answer.option_ids)  # —Ç—É—Ç –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É
    options = ["–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω", "–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–†–∞–º–∑–∞–Ω –ö–∞–¥—ã—Ä–æ–≤",
               "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤", "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤",
               "–û–ª—å–≥–∞ –°–∫–∞–±–µ–µ–≤–∞", "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö..."
               ]
    text = await sql_safe_select("text", "texts", {"name": "start_people_belive"})
    await Bot(all_data().bot_token).send_poll(poll_answer.user.id, text, options, is_anonymous=False, allows_multiple_answers=True)
    await state.set_state(welcome_states.start_dialog.dialogue_10)


@router.poll_answer(state = welcome_states.start_dialog.dialogue_10)  # –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –∫ –∞–Ω—Ç–∏–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–µ
async def poll_answer_handler_three(poll_answer: types.PollAnswer, state=FSMContext):
    text = await sql_safe_select("text", "texts", {"name": "start_thank_you"})
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    await Bot(all_data().bot_token).send_message(poll_answer.user.id, text)