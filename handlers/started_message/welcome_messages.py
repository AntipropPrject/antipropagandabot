import asyncio
from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bata import all_data
from data_base.DBuse import poll_write, sql_safe_select, mongo_add, mongo_select, redis_just_one_write, mongo_user_info
from middleware import CounterMiddleware
from resources.all_polls import web_prop, welc_message_one
from states import welcome_states
from states.antiprop_states import propaganda_victim
from stats.stat import mongo_stat, mongo_update_stat

router = Router()
router.message.middleware(CounterMiddleware())


@router.message(commands=['start', 'help'], state="*")
async def commands_start(message: types.Message, state: FSMContext):  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = message.from_user.id
    await mongo_stat(user_id)
    await mongo_user_info(user_id, message.from_user.username)
    await state.clear()
    redis = all_data().get_data_red()
    for key in redis.scan_iter(f"Usrs: {message.from_user.id}:*"):
        redis.delete(key)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º üá∑üá∫üá∫üá¶"))
    markup.add(types.KeyboardButton(text="–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å? ü§î"))
    text = await sql_safe_select("text", "texts", {"name": "start_hello"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_1)


@router.message(welcome_states.start_dialog.dialogue_1, text_contains='–≤–µ—Ä–∏—Ç—å', content_types=types.ContentType.TEXT,
                text_ignore_case=True)  # –ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?
async def message_1(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ"))
    text = await sql_safe_select("text", "texts", {"name": "start_why_belive"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_2)


@router.message(welcome_states.start_dialog.dialogue_2, text_contains='–•–æ—Ä–æ—à–æ', content_types=types.ContentType.TEXT,
                text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_1, text_contains='–ù–∞—á–Ω–µ–º üá∑üá∫üá∫üá¶', content_types=types.ContentType.TEXT,
                text_ignore_case=True)
# @router.message(welcome_states.start_dialog.dialogue_3) –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞ —Ç—ã –∏–ª–∏ –Ω–∞ –≤—ã –≤ –±–∞–∑—É
async def message_2(message: types.Message, state: FSMContext):
    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–µ–π—á–∞—Å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ "
                                         "–≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ. –í–¥—Ä—É–≥ –≤—ã –∏–∑ –§–°–ë? ü§ê"))
    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_what_about_you"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_4)


@router.message(welcome_states.start_dialog.dialogue_4,
                ((F.text == '1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)') | (F.text == '2Ô∏è‚É£ –í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É')))
async def message_3(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Is_it_war:', message.text)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëåüèª"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    await state.update_data(answer_1=message.text)
    text = await sql_safe_select("text", "texts", {"name": "start_lets_start"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–≤—ã—Ä–∞–∂–∞—Ç—å', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ'),
                content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_4(message: types.Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞ / –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω—É"))
    text = await sql_safe_select("text", "texts", {"name": "start_afraid"})
    # if –Ω–∞ —Ç—ã
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–¥–æ–ª–≥–æ', '–¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å'),
                content_types=types.ContentType.TEXT, text_ignore_case=True)
async def message_5(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üëåüèº"))
    text = await sql_safe_select("text", "texts", {"name": "start_only_five"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–•–æ—Ä–æ—à–æ', '—Å–≤–æ–∏', '–≤–æ–ø—Ä–æ—Å—ã'),
                content_types=types.ContentType.TEXT, text_ignore_case=True)
@router.message(welcome_states.start_dialog.dialogue_5, text_contains='–ó–∞–¥–∞–≤–∞–π', content_types=types.ContentType.TEXT,
                text_ignore_case=True)  # –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def message_6(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üôÇ"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üôÖ‚Äç‚ôÇ"))
    text = await sql_safe_select("text", "texts", {"name": "start_do_you_love_politics"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_6)


@router.message(welcome_states.start_dialog.dialogue_6)  # –°–æ—Ö—Ä–∞–Ω—è—é 1 –≤–æ–ø—Ä–æ—Å
async def message_7(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    text = message.text
    if text == '–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è' or text == "–°–∫–æ—Ä–µ–µ –¥–∞ üôÇ" or text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üôÖ‚Äç‚ôÇ":
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: interest_in_politics:', message.text[:-2].strip())
        options = welc_message_one
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 1 –≤–æ–ø—Ä–æ—Å–∞ –≤ –¥–∞—Ç—É
        await state.update_data(option_1=options)
        text = await sql_safe_select("text", "texts", {"name": "start_russia_goal"})
        markup = ReplyKeyboardBuilder()
        markup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
        await message.answer_poll(text, options, is_anonymous=False, allows_multiple_answers=True,
                                  reply_markup=markup.as_markup(resize_keyboard=True))
        await state.set_state(welcome_states.start_dialog.dialogue_7)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@router.message(welcome_states.start_dialog.dialogue_7, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def poll_filler(message: types.Message, bot: Bot):
    msg = await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å -- –æ—Ç–º–µ—Ç—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" –∏–ª–∏ "Vote"',
                               reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(10)
    await bot.delete_message(message.from_user.id, msg.message_id)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_7)  # –°–æ—Ö—Ä–∞–Ω—è—é 2 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler(poll_answer: types.PollAnswer, state: FSMContext):
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 2 –≤–æ–ø—Ä–æ—Å–∞
    options = await state.get_data()
    lst_options = options["option_1"]
    lst_answers = poll_answer.option_ids
    for index in lst_answers:
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:', lst_options[index])
    await state.update_data(answer_2=lst_answers)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    markup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî"))
    text = await sql_safe_select("text", "texts", {"name": "start_belive_TV"})
    await Bot(all_data().bot_token).send_message(chat_id=poll_answer.user.id, text=text,
                                                 reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_8)


@router.message(state=welcome_states.start_dialog.dialogue_8)  # –°–æ—Ö—Ä–∞–Ω—è—é 3 –≤–æ–ø—Ä–æ—Å
async def message_8(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ" or text == "–°–∫–æ—Ä–µ–µ –¥–∞ üëç" or\
            text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé" or text == "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî":
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: tv:', message.text)
        await state.update_data(option_3=web_prop)
        await state.update_data(answer_3=message.text)
        text = await sql_safe_select("text", "texts", {"name": "start_internet_belive"})
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
        await message.answer_poll(text, web_prop, is_anonymous=False, allows_multiple_answers=True,
                                  reply_markup=markup.as_markup(resize_keyboard=True))
        await state.set_state(welcome_states.start_dialog.dialogue_9)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@router.message(welcome_states.start_dialog.dialogue_9, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def poll_filler(message: types.Message, bot: Bot):
    msg = await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å -- –æ—Ç–º–µ—Ç—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" –∏–ª–∏ "Vote"',
                               reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(10)
    await bot.delete_message(message.from_user.id, msg.message_id)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_9)  # –°–æ—Ö—Ä–∞–Ω—è—é 4 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_tho(poll_answer: types.PollAnswer, state=FSMContext):
    options = ["–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω", "–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–†–∞–º–∑–∞–Ω –ö–∞–¥—ã—Ä–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤", "–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞",
               "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–û–ª—å–≥–∞ –°–∫–∞–±–µ–µ–≤–∞", "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö..."]
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 4 –≤–æ–ø—Ä–æ—Å–∞
    option = await state.get_data()
    lst_options = option["option_3"]
    lst_answers = poll_answer.option_ids
    lst = []
    for index in lst_answers:
        lst.append(lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet_id:', int(index))
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet:', lst_options[index])
    await state.update_data(answer_4=poll_answer.option_ids)
    await state.update_data(option_4=options)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
    text = await sql_safe_select("text", "texts", {"name": "start_people_belive"})
    await Bot(all_data().bot_token).send_poll(poll_answer.user.id, text, options, is_anonymous=False,
                                              allows_multiple_answers=True,
                                              reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_10)


@router.message(welcome_states.start_dialog.dialogue_10, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def poll_filler(message: types.Message, bot: Bot):
    msg = await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å -- –æ—Ç–º–µ—Ç—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" –∏–ª–∏ "Vote"',
                               reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(10)
    await bot.delete_message(message.from_user.id, msg.message_id)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_10)  # –°–æ—Ö—Ä–∞–Ω—è—é 5 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_three(poll_answer: types.PollAnswer, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏!"))
    options = await state.get_data()
    lst_options = options["option_4"]
    lst_answers = poll_answer.option_ids
    lst = []
    for index in lst_answers:
        lst.append(lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust:', lst_options[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons:', lst_options[index])
    await state.update_data(answer_5=poll_answer.option_ids)
    text = await sql_safe_select("text", "texts", {"name": "start_thank_you"})
    await Bot(all_data().bot_token).send_message(poll_answer.user.id, text,
                                                 reply_markup=markup.as_markup(resize_keyboard=True))
    data = await state.get_data()
    await mongo_update_stat(poll_answer.user.id, 'start')
    if await mongo_select(poll_answer.user.id):  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
    else:
        await mongo_add(poll_answer.user.id,
                        [data['answer_1'], data['answer_2'], data['answer_3'], data['answer_4'], data['answer_5']])
    if data["answer_3"] != "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî" or ({0, 1, 3, 4, 5, 6, 7}.isdisjoint(
            set(data["answer_4"])) is False and {1, 2, 3, 4, 5, 6}.isdisjoint(
            set(data["answer_5"])) is False):  # –ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã?
        # –í–æ—Ç —ç—Ç–æ –≤—Å–µ –±—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–∏ —Å–æ–≤–∞—Ç—å, –ø–æ—Ç–æ–º –∑–∞–π–º—É—Å—å
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')
        print('–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')
    elif {2, 8}.isdisjoint(set(data["answer_4"])) is False or {7}.isdisjoint(set(data["answer_5"])) is False:  # –ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?
        if len(data["answer_2"]) <= 2 and {0, 1, 2, 3, 5, 7, 8} not in set(data["answer_2"]):
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            print('–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        else:
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', "–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π")
            print('–§–æ–º–∞ –Ω–µ–µ—Ä—É—é—â–∏–π')

    await state.clear()
    await state.set_state(propaganda_victim.start)

    # –í–æ—Ç —ç—Ç–æ –≤—Å–µ –±—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–∏ —Å–æ–≤–∞—Ç—å
    if {0, 1, 2, 3, 5, 7, 8}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
    elif {4, 6}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
    elif {9}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')

    await state.set_state(propaganda_victim.start)
