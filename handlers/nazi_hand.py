import asyncio

from aiogram import Router, F
from aiogram import types, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from data_base.DBuse import data_getter, poll_write, sql_safe_select, sql_safe_update, redis_delete_from_list, poll_get
from filters.All_filters import NaziFilter, RusHate_pr, NotNaziFilter, ManualFilters
from handlers import true_resons_hand
from middleware import CounterMiddleware
from resources.all_polls import nazizm, nazizm_pr
from utilts import simple_media


class NaziState(StatesGroup):
    main = State()
    small_poll = State()
    after_small_poll = State()
    genocide = State()
    first_poll = State()
    after_first_poll = State()
    game = State()
    final = State()
    rushate = State()
    third_part = State()
    neopower = State()


async def denanazification(message, state):
    naz_answers = await poll_get(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:')
    if nazizm[2] in naz_answers:
        await nazi_genocide(message, state)
    elif nazizm[0] in naz_answers:
        await nazi_second_poll(message, state)
    elif nazizm[1] in naz_answers:
        await nazi_one_neonazi(message, state)
    else:
        await nazi_game_start(message, state)


router = Router()
router.message.middleware(CounterMiddleware())

router.message.filter(state=NaziState)


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"), state=NaziState.first_poll)
async def nazi_first_poll(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    question = "–û—Ç–º–µ—Ç—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≥–ª–∞—Å–Ω—ã"
    await message.answer_poll(question, nazizm, allows_multiple_answers=True, is_anonymous=False,
                              reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), state=NaziState.first_poll)
async def nazi_poll_filler(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –æ–ø—Ä–æ—Å–µ —Ç–µ –ø—É–Ω–∫—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, '
                         '–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"</b> –∏–ª–∏ <b>"Vote"</b>', reply_markup=ReplyKeyboardRemove())


@router.poll_answer(state=NaziState.first_poll)
async def npoll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    nazizm_answers = poll_answer.option_ids
    await state.update_data(nazizm_answers=nazizm_answers)
    for index in nazizm_answers:
        await poll_write(f'Usrs: {poll_answer.user.id}: Nazi_answers: first_poll:', nazizm[index])
    # —ç—Ç–æ –∏–Ω–¥–µ–∫—Å "–Ω–µ–Ω–∞–≤–∏–¥—è—Ç –µ–≤—Ä–µ–µ–≤" –≤ —Å–ø–∏—Å–∫–µ
    if 8 in nazizm_answers:
        await redis_delete_from_list(f'Usrs: {poll_answer.user.id}: Nazi_answers: first_poll:',
                                     "–ú–Ω–æ–≥–∏–µ —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–µ–Ω–∞–≤–∏–¥—è—Ç –µ–≤—Ä–µ–µ–≤")
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        text = await sql_safe_select("text", "texts", {"name": "nazi_word"})
        await bot.send_message(chat_id=poll_answer.user.id, text=text, parse_mode="HTML",
                               reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ê –∫–∞–∫ –∂–µ –Ω–µ–æ–Ω–∞—Ü–∏–∑–º? ü§®"))
        text = await sql_safe_select("text", "texts", {"name": "nazi_negative"})
        await bot.send_message(poll_answer.user.id, text, parse_mode="HTML",
                               reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(NaziState.after_first_poll)


@router.message((F.text.contains('–î–∞–≤–∞–π üëå')), state=NaziState.after_first_poll)
async def nazi_in_masses(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_in_masses"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥')), state=NaziState.after_first_poll)
async def nazi_propaganda(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ê –∫–∞–∫ –∂–µ –Ω–µ–æ–Ω–∞—Ü–∏–∑–º? ü§®"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_propaganda"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ê –∫–∞–∫ –∂–µ –Ω–µ–æ–Ω–∞—Ü–∏–∑–º? ü§®')))
async def nazi_neonazi(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ üëå"))
    markup.row(types.KeyboardButton(text="–ß–µ—Ä—Ç –Ω–æ–≥—É —Å–ª–æ–º–∏—Ç ü§¶‚Äç‚ôÇÔ∏è"))
    markup.row(types.KeyboardButton(text="–ê –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—â–µ? ü§î"))
    markup.adjust(2, 1)
    text = await sql_safe_select("text", "texts", {"name": "nazi_neonazi"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ß–µ—Ä—Ç –Ω–æ–≥—É —Å–ª–æ–º–∏—Ç ü§¶‚Äç‚ôÇÔ∏è')) | (F.text.contains('–ê –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—â–µ? ü§î')))
async def nazi_many_forms(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–¢–∞–∫ –ø–æ–Ω—è—Ç–Ω–µ–µ! üëå"))
    markup.row(types.KeyboardButton(text="–¢—ã –≤—Å—ë —Å–ª–∏—à–∫–æ–º —É–ø—Ä–æ—â–∞–µ—à—å ü§∑‚Äç‚ôÄÔ∏è"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_many_forms"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–¢—ã –≤—Å—ë —Å–ª–∏—à–∫–æ–º —É–ø—Ä–æ—â–∞–µ—à—å ü§∑‚Äç‚ôÄÔ∏è')))
async def nazi_simple(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_simple"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(NotNaziFilter(), (
        (F.text.contains('–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå')) | (F.text.contains('–¢–∞–∫ –ø–æ–Ω—è—Ç–Ω–µ–µ! üëå')) | (
        F.text.contains('–ü–æ–Ω—è—Ç–Ω–æ üëå'))))
async def nazi_not_zombie(message: Message, state: FSMContext):
    await nazi_game_start(message, state)


@router.message(((F.text.contains('–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º')) | (F.text.contains('–¢–∞–∫ –ø–æ–Ω—è—Ç–Ω–µ–µ! üëå')) | (
        F.text.contains('–ü–æ–Ω—è—Ç–Ω–æ üëå'))))
async def nazi_how_many(message: Message, state: FSMContext):
    await state.set_state(NaziState.small_poll)
    text = await sql_safe_select("text", "texts", {"name": "nazi_how_many"})
    question = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç'
    await message.answer(text, disable_web_page_preview=True)
    await message.answer_poll(question=question, options=nazizm_pr, is_anonymous=False,
                              reply_markup=ReplyKeyboardRemove())


@router.poll_answer(state=NaziState.small_poll)
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.set_state(NaziState.after_small_poll)
    pr_answers = poll_answer.option_ids
    for index in pr_answers:
        answer = nazizm_pr[index]
        first_poll_answers = await poll_get(f'Usrs: {poll_answer.user.id}: Nazi_answers: first_poll:')
        await poll_write(f'Usrs: {poll_answer.user.id}: Nazi_answers: small_poll:', answer)
        if answer == "üìä –ú–µ–Ω–µ–µ 5%" and '–ú–Ω–æ–≥–∏–µ —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Ä—É—Å—Å–∫–∏—Ö —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∏ —Ä—É—Å—Å–∫–∏–µ' not in first_poll_answers:
            markup = ReplyKeyboardBuilder()
            markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
            text = await sql_safe_select("text", "texts", {"name": "nazi_piechart"})
            media = await sql_safe_select('t_id', 'assets', {'name': 'nazi_piechart'})
            await bot.send_photo(chat_id=poll_answer.user.id, photo=media, caption=text,
                                 reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            markup_1 = ReplyKeyboardBuilder()
            markup_1.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
            await bot.send_message(poll_answer.user.id,
                                   '–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–∑–∂–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –º—ã –µ–≥–æ –æ–±—Å—É–¥–∏–º',
                                   reply_markup=markup_1.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥')), state=NaziState.after_small_poll)
async def nazi_canny(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"))
    await simple_media(message, "nazi_canny", markup.as_markup())


@router.message((F.text.contains('–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫')), state=NaziState.after_small_poll)
async def nazi_many_forms(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_feels"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(NaziFilter(answer="–ù–∞ –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è"))
async def nazi_genocide(message: Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await state.set_state(NaziState.genocide)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 nazizm[2])
    text = await sql_safe_select("text", "texts", {"name": "nazi_genocide"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=NaziState.genocide)
async def nazi_many_forms(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, –º–æ–∂–Ω–æ üíÄ"))
    markup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ–ª—å–∑—è üôÖ‚Äç‚ôÄÔ∏è"))
    markup.row(types.KeyboardButton(text="–Ø –Ω–µ –≤ –ø—Ä–∞–≤–µ –¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ ü§∑"))
    markup.row(types.KeyboardButton(text="–ê –∫–∞–∫ –∂–µ –ø–æ–∂–∞—Ä –≤ –¥–æ–º–µ –ü—Ä–æ—Ñ—Å–æ—é–∑–æ–≤ –≤ –û–¥–µ—Å—Å–µ üî•"))
    markup.adjust(2, 1, 1)
    await simple_media(message, 'nazi_genocide_chart', markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ø–æ–∂–∞—Ä')), state=NaziState.genocide)
async def nazi_odessa(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, —ç—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –≥–µ–Ω–æ—Ü–∏–¥–æ–º üíÄ"))
    markup.row(types.KeyboardButton(text="–≠—Ç–æ —Ç—Ä–∞–≥–µ–¥–∏—è, –Ω–æ –Ω–µ –≥–µ–Ω–æ—Ü–∏–¥ üôÖ‚Äç‚ôÄÔ∏è"))
    markup.row(types.KeyboardButton(text="–Ø –Ω–µ –≤ –ø—Ä–∞–≤–µ –¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ ü§∑"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_odessa"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–µ—Ç, –Ω–µ–ª—å–∑—è üôÖ‚Äç‚ôÄÔ∏è") | (F.text == "–≠—Ç–æ —Ç—Ä–∞–≥–µ–¥–∏—è, –Ω–æ –Ω–µ –≥–µ–Ω–æ—Ü–∏–¥ üôÖ‚Äç‚ôÄÔ∏è")),
                state=NaziState.genocide)
async def nazi_many_forms(message: Message):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π..."))
    text = await sql_safe_select("text", "texts", {"name": "nazi_emotional"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text.contains("–º–æ–∂–Ω–æ")) | (F.text == "–Ø –Ω–µ –≤ –ø—Ä–∞–≤–µ –¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ ü§∑")),
                state=NaziState.genocide)
async def nazi_eight_years(message: Message, state: FSMContext):
    if message.text == "–Ø –Ω–µ –≤ –ø—Ä–∞–≤–µ –¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ ü§∑":
        text = '–ü–æ–Ω–∏–º–∞—é, –ø–æ—ç—Ç–æ–º—É –ø—É—Å—Ç—å –æ—Ü–µ–Ω–∫—É –¥–∞–¥—É—Ç —Ñ–∞–∫—Ç—ã. –ó–∞–¥–∞–π—Ç–µ —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å:'
    else:
        text = "–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —É –º–µ–Ω—è –µ—Å—Ç—å –∫ –≤–∞–º –±–æ–ª—å—à–æ–π –≤–æ–ø—Ä–æ—Å:"
    await message.answer(text, reply_markup=ReplyKeyboardRemove(), disable_web_page_preview=True)
    await asyncio.sleep(3)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–Ø —Ç–æ–∂–µ –∑–∞–¥–∞—é—Å—å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º ü§î"))
    markup.row(types.KeyboardButton(text="–ì–µ–Ω–æ—Ü–∏–¥–∞ –Ω–µ –±—ã–ª–æ, –Ω–æ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –∫ —Ä—É—Å—Å–∫–∏–º - –µ—Å—Ç—å üò†"))
    markup.row(types.KeyboardButton(text="–û–û–ù –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≥–ª–∞–∑–∞ –Ω–∞ —ç—Ç–æ ‚òùÔ∏è"))
    text2 = await sql_safe_select("text", "texts", {"name": "nazi_eight_years"})
    await message.answer(text2, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∞–π...', "–Ø —Ç–æ–∂–µ –∑–∞–¥–∞—é—Å—å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º ü§î", "–û–û–ù –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≥–ª–∞–∑–∞ –Ω–∞ —ç—Ç–æ ‚òùÔ∏è"})),
    state=NaziState.genocide)
async def nazi_exaggeration(message: Message, state: FSMContext):
    await state.set_state(NaziState.third_part)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ üëå"))
    markup.row(types.KeyboardButton(text="–ù–µ—Ç, —ç—Ç–æ –≥–µ–Ω–æ—Ü–∏–¥ üíÄ"))
    markup.row(types.KeyboardButton(text="–ì–µ–Ω–æ—Ü–∏–¥–∞ –Ω–µ –±—ã–ª–æ, –Ω–æ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –∫ —Ä—É—Å—Å–∫–∏–º - –µ—Å—Ç—å üò†"))
    text = await sql_safe_select("text", "texts", {"name": "nazi_exaggeration"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


"""@router.message((F.text == "–î–∞, —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ üëå"), state=NaziState.genocide)
async def nazi_genocide_exit_2(message: Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π"))
    await message.answer('–ü—Ä–∏—è—Ç–Ω–æ –∏–º–µ—Ç—å —Å –≤–∞–º–∏ –¥–µ–ª–æ. –¢–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º?',
                         reply_markup=markup.as_markup(resize_keyboard=True))"""


@router.message((F.text == "–ì–µ–Ω–æ—Ü–∏–¥–∞ –Ω–µ –±—ã–ª–æ, –Ω–æ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –∫ —Ä—É—Å—Å–∫–∏–º - –µ—Å—Ç—å üò†"), state=NaziState.third_part)
async def nazi_genocide_exit_1(message: Message, state: FSMContext):
    await nazi_second_poll(message, state)


@router.message((F.text == "–ù–µ—Ç, —ç—Ç–æ –≥–µ–Ω–æ—Ü–∏–¥ üíÄ"), state=NaziState.third_part)
async def nazi_bounds(message: Message, state: FSMContext):
    text = await sql_safe_select("text", "texts", {"name": "nazi_bounds"})
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π"))
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(NaziFilter(answer="–ú–Ω–æ–≥–∏–µ —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Ä—É—Å—Å–∫–∏—Ö —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∏ —Ä—É—Å—Å–∫–∏–µ"))
async def nazi_second_poll(message: Message, state: FSMContext):
    await state.set_state(NaziState.rushate)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 nazizm[0])
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_second_poll'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=ReplyKeyboardRemove())
    await message.answer_poll(question='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!', options=['95%', '76%', '45%', '21%', '6%'],
                              is_anonymous=False, allows_multiple_answers=False, correct_option_id=1)


@router.message(NaziState.rushate, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π'))
async def poll_filler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å -- –æ—Ç–º–µ—Ç—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" –∏–ª–∏ "Vote"',
                         reply_markup=ReplyKeyboardRemove())


@router.poll_answer(state=NaziState.rushate)
async def nazi_76_percent(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_76_percent'})
    photo = await sql_safe_select('t_id', 'assets', {'name': 'nazi_76_percent'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —É–¥–∏–≤–ª–µ–Ω(–∞) ü§î"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ —É–¥–∏–≤–ª–µ–Ω(–∞) üòê"))
    nmarkup.row(types.KeyboardButton(text="–ê —è —Å–ª—ã—à–∞–ª(–∞) –¥—Ä—É–≥–∏–µ —Ü–∏—Ñ—Ä—ã üìä"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –¥–æ–≤–µ—Ä—è—é —Å–æ—Ü. –æ–ø—Ä–æ—Å–∞–º üôÖ"))
    nmarkup.adjust(2, 1, 1)
    try:
        await bot.send_photo(poll_answer.user.id, photo, caption=text,
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        await bot.send_video(poll_answer.user.id, photo, caption=text,
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ê —è —Å–ª—ã—à–∞–ª(–∞) –¥—Ä—É–≥–∏–µ —Ü–∏—Ñ—Ä—ã')), state=NaziState.rushate)
async def nazi_manipulation(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —É–¥–∏–≤–ª–µ–Ω(–∞) ü§î"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ —É–¥–∏–≤–ª–µ–Ω(–∞) üòê"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –¥–æ–≤–µ—Ä—è—é —Å–æ—Ü. –æ–ø—Ä–æ—Å–∞–º üôÖ"))
    await simple_media(message, 'nazi_manipulation', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—É–¥–∏–≤–ª–µ–Ω')) | (F.text == "–•–æ—Ä–æ—à–æ, –ø–æ–∫–∞–∂–∏"), state=NaziState.rushate)
async def nazi_not_really(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"))
    await simple_media(message, 'nazi_not_really', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–Ω–µ –¥–æ–≤–µ—Ä—è—é —Å–æ—Ü. –æ–ø—Ä–æ—Å–∞–º')), state=NaziState.rushate)
async def nazi_poll_is_cool(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_poll_is_cool'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø–æ–∫–∞–∂–∏"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"), state=NaziState.rushate)
async def nazi_vs_gopnics(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_vs_gopnics'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ ‚úîÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(RusHate_pr(), (F.text == "–ü–æ–Ω—è—Ç–Ω–æ ‚úîÔ∏è"), state=NaziState.rushate)
async def nazi_very_little(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_very_little'})
    text2 = await sql_safe_select('text', 'texts', {'name': 'nazi_less_than_5'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞), –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ - –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ üëå"))
    nmarkup.row(types.KeyboardButton(text="–£–∫—Ä–∞–∏–Ω—Ü—ã - —Ö–æ—Ä–æ—à–∏–µ –ª—é–¥–∏. –ê –≤–ª–∞—Å—Ç—å —É –Ω–∏—Ö –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã. üò°"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –±—ã–ª–æ –≤ 2021 –≥–æ–¥—É, –∞ —Å–µ–π—á–∞—Å –∏—Ö –ø–æ–ª—Å—Ç—Ä–∞–Ω—ã üò¨"))
    await message.answer(text)
    await message.answer(text2, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–Ω—è—Ç–Ω–æ ‚úîÔ∏è"), state=NaziState.rushate)
async def nazi_you_wrong(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_you_wrong'})
    answer_lower = ((await poll_get(f'Usrs: {message.from_user.id}: Nazi_answers: small_poll:'))[0]).lower
    text = text.replace('[[–≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (—Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã)]]',
                        ((await poll_get(f'Usrs: {message.from_user.id}: Nazi_answers: small_poll:'))[0]).lower())
    text2 = await sql_safe_select('text', 'texts', {'name': 'nazi_less_than_5'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞), –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ - –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ üëå"))
    nmarkup.row(types.KeyboardButton(text="–£–∫—Ä–∞–∏–Ω—Ü—ã - —Ö–æ—Ä–æ—à–∏–µ –ª—é–¥–∏. –ê –≤–ª–∞—Å—Ç—å —É –Ω–∏—Ö –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã. üò°"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –±—ã–ª–æ –≤ 2021 –≥–æ–¥—É, –∞ —Å–µ–π—á–∞—Å –∏—Ö –ø–æ–ª—Å—Ç—Ä–∞–Ω—ã üò¨"))
    await message.answer(text)
    await message.answer(text2, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–≠—Ç–æ –±—ã–ª–æ –≤ 2021 –≥–æ–¥—É, –∞ —Å–µ–π—á–∞—Å –∏—Ö –ø–æ–ª—Å—Ç—Ä–∞–Ω—ã üò¨"), state=NaziState.rushate)
async def nazi_vs_gopnics(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_half_country'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞), –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ - –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ üëå"))
    nmarkup.row(types.KeyboardButton(text="–ù–æ –º—ã –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –£–∫—Ä–∞–∏–Ω—É, –≤–µ–¥—å –≤–ª–∞—Å—Ç—å —É –Ω–∏—Ö –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã üò°"))
    nmarkup.row(types.KeyboardButton(text="–Ø —Ç—É—Ç –Ω–µ —Å–æ–≥–ª–∞—à—É—Å—å. üôÖ‚Äç‚ôÇÔ∏è –î–∞–≤–∞–π —Å–º–µ–Ω–∏–º —Ç–µ–º—É"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–∑–∞—Ö–≤–∞—Ç–∏–ª–∏')), state=NaziState.rushate)
async def nazi_thirdpart_end(message: Message, state: FSMContext):
    await nazi_one_neonazi(message, state)


@router.message(((F.text.contains('–ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ')) | (F.text.contains('–Ω–µ —Å–æ–≥–ª–∞—à—É—Å—å'))), state=NaziState.rushate)
async def nazi_manual_endpoint_1(message: Message, state: FSMContext):
    await denanazification(message, state)


@router.message(NaziFilter(answer="–í–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã"))
async def nazi_one_neonazi(message: Message, state: FSMContext):
    await state.set_state(NaziState.neopower)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:', nazizm[1])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await simple_media(message, 'nazi_addict', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥')), state=NaziState.neopower)
async def nazi_elections(message: Message, state: FSMContext):
    await state.set_state(NaziState.third_part)
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_elections'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


# –∫–æ—Ä–∏–¥–æ—Ä —Å –±–æ–ª–≤–∞–Ω–∫–∞–º–∏
"""
@router.message(NaziFilter(answer="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø—Ä–∏—Ç–µ—Å–Ω—è–µ—Ç—Å—è –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ"))
async def nazi_russian_lang(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø—Ä–∏—Ç–µ—Å–Ω—è–µ—Ç—Å—è –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_russian_lang'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–¥–æ–¥–µ–ª, –ø—Ä–æ—á—å –æ—Ç—Å—é–¥–∞, –ø—Ä–æ—á—å!"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(NaziFilter(answer="–£ –Ω–∏—Ö –ë–∞–Ω–¥–µ—Ä–∞ - –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ—Ä–æ–π –∏ —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ü–∏–∑–º–∞"))
async def nazi_bandera_start(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 "–£ –Ω–∏—Ö –ë–∞–Ω–¥–µ—Ä–∞ - –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ—Ä–æ–π –∏ —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ü–∏–∑–º–∞")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_bandera_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ë–∞–Ω–¥–µ—Ä–∞ –±—ã–ª –≤ –æ–±—â–µ–º-—Ç–æ –Ω–µ–ø–ª–æ—Ö–∏–º –ø–∞—Ä–Ω–µ–º, —è –≤—Å–µ –æ—Å–æ–∑–Ω–∞–ª"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(NaziFilter(answer="–í –£–∫—Ä–∞–∏–Ω–µ –µ—Å—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–∞–ª—å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–∑–æ–≤) –∏ –∏—Ö –Ω–∞–¥–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å"))
async def nazi_azov_start(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 "–í –£–∫—Ä–∞–∏–Ω–µ –µ—Å—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–∞–ª—å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–∑–æ–≤) –∏ –∏—Ö –Ω–∞–¥–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_azov_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(
        text="–ï—Å–ª–∏ —Ç—É—Ç –±—É–¥–µ—Ç –±–æ–ª—å—à–∞—è –≤–µ—Ç–∫–∞, —Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–º—Ä—É—Ç –æ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫\n–î–≤–∏–Ω—É—Å—å-–∫–∞ —è –¥–∞–ª—å—à–µ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(NaziFilter(answer="–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–∞—Ä—à–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–æ–≤ –∏ —Ñ–∞–∫–µ–ª—å–Ω—ã–µ —à–µ—Å—Ç–≤–∏—è - —ç—Ç–æ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ"))
async def nazi_parade(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 "–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–∞—Ä—à–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–æ–≤ –∏ —Ñ–∞–∫–µ–ª—å–Ω—ã–µ —à–µ—Å—Ç–≤–∏—è - —ç—Ç–æ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_parade'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù—É —Ä–∞–∑ —ç—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –ø–æ–π–¥—É-–∫–∞ —è –¥–∞–ª—å—à–µ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(NaziFilter(
    answer="–ù–∞ –£–∫—Ä–∞–∏–Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é / –†–∞–∑—Ä—É—à–∞—é—Ç —Å–æ–≤–µ—Ç—Å–∫–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ / –£–Ω–∏–∂–∞—é—Ç –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤"))
async def nazi_no_WW2(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                                 "–í –£–∫—Ä–∞–∏–Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é –í—Ç–æ—Ä–æ–π –ú–∏—Ä–æ–≤–æ–π /  –†–∞–∑—Ä—É—à–∞—é—Ç —Å–æ–≤–µ—Ç—Å–∫–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ / –£–Ω–∏–∂–∞—é—Ç –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_no_WW2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù—É —Ä–∞–∑ —ç—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –ø–æ–π–¥—É-–∫–∞ —è –¥–∞–ª—å—à–µ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))"""


@router.message(state=(NaziState.after_small_poll, NaziState.third_part))
async def nazi_game_start(message: Message, state: FSMContext):
    await state.set_state(NaziState.game)
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º! üöÄ"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–∞—á–Ω—ë–º! üöÄ") | (F.text == "–ù—É –¥–∞–≤–∞–π –µ—â–µ üòé") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ")),
                state=NaziState.game)
async def country_game_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['ngamecount']
    except:
        count = 0
    how_many_rounds = data_getter("SELECT COUNT (*) FROM public.ucraine_or_not_game")[0][0]
    print(f"–í —Ç–∞–±–ª–∏—Ü–µ {how_many_rounds} –∑–∞–ø–∏—Å–µ–π, –∞ –≤–æ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ–π—á–∞—Å {count}")
    if count < how_many_rounds:
        count += 1
        truth_data = \
            data_getter("SELECT t_id, text, belivers, nonbelivers, rebuttal, truth FROM public.ucraine_or_not_game "
                        "left outer join assets on asset_name = assets.name "
                        "left outer join texts ON text_name = texts.name "
                        f"where id = {count}")[0]
        print(truth_data)
        await state.update_data(ngamecount=count, belive=truth_data[2], not_belive=truth_data[3], rebutt=truth_data[4],
                                truth=truth_data[5])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.add(types.KeyboardButton(text="–≠—Ç–æ –£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶"))
        nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, —ç—Ç–æ –†–æ—Å—Å–∏—è üá∑üá∫"))
        if truth_data[0] != None:
            capt = ""
            if truth_data[1] != None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'–í–æ—Ç —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:\n\n{truth_data[1]}',
                                 reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ"))
        await message.answer(
            "–ë–æ—é—Å—å, —á—Ç–æ –ø–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã. –Ø –ø–æ–∏—â—É –µ—â–µ, –∞ –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–≠—Ç–æ –£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶") | (F.text == "–ù–µ—Ç, —ç—Ç–æ –†–æ—Å—Å–∏—è üá∑üá∫")), state=NaziState.game)
async def country_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    print(data)
    text, base_update_dict = "", dict()
    reality = data['truth']
    if message.text == "–≠—Ç–æ –£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶":
        if reality is True:
            text = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ!'
        if reality is False:
            text = '–í—ã –æ—à–∏–±–ª–∏—Å—å! –≠—Ç–æ –≤ –†–æ—Å—Å–∏–∏!'
        base_update_dict.update({'belivers': (data['belive'] + 1)})
    elif message.text == "–ù–µ—Ç, —ç—Ç–æ –†–æ—Å—Å–∏—è üá∑üá∫":
        if reality is True:
            text = '–í—ã –æ—à–∏–±–ª–∏—Å—å! –≠—Ç–æ –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ!'
        if reality is False:
            text = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –≤ –†–æ—Å—Å–∏–∏!'
        base_update_dict.update({'nonbelivers': (data['not_belive'] + 1)})
    await sql_safe_update("ucraine_or_not_game", base_update_dict, {'id': data['ngamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º üôÖ"))
    END = bool(data['ngamecount'] == data_getter('SELECT COUNT(id) FROM public.ucraine_or_not_game')[0][0])
    if END is True:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–°–ø–∞—Å–∏–±–æ ü§ù"))
    await message.answer(
        f'{text}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n'
        f'üá∑üá∫ –í –†–æ—Å—Å–∏–∏: {round(100 - t_percentage * 100)}% \nüá∫üá¶ –ù–∞ –£–∫—Ä–∞–∏–Ω–µ: {round(t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer('–ú—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù')


@router.message((F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º üôÖ"), state=NaziState.game)
async def putin_game2_are_you_sure(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù—É –¥–∞–≤–∞–π –µ—â–µ üòé"))
    nmarkup.row(types.KeyboardButton(text="–ú–Ω–µ —É–∂–µ —Ö–≤–∞—Ç–∏—Ç üëå"))
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –£ –º–µ–Ω—è –µ—â–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(
    ((F.text == "–ú–Ω–µ —É–∂–µ —Ö–≤–∞—Ç–∏—Ç üëå") | (F.text == "–°–ø–∞—Å–∏–±–æ ü§ù") | (F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÇÔ∏è")),
    state=NaziState.game)
async def putin_in_the_past(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(true_resons_hand.TruereasonsState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_finish'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
