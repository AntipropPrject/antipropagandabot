from aiogram import Router, types, F
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from data_base.DBuse import sql_safe_update, data_getter, sql_safe_insert, sql_delete, sql_games_row_selecter
from filters.isAdmin import IsAdmin
from keyboards.admin_keys import games_keyboard, admin_games_keyboard, app_admin_keyboard, \
    game_keys
from log import logg
from states.admin_states import admin
from utilts import game_answer
from utilts import simple_media

router = Router()
router.message.filter(state=admin)


@router.message(IsAdmin(level=['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']), (F.text == '–ò–≥—Ä—ã üé≠'), state=admin.menu)
async def admin_home_games(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(admin.game_menu)
    await logg.admin_logs(message.from_user.id, message.from_user.username, "–í–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä, –≤—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É.",
                         reply_markup=games_keyboard(message.from_user.id))


@router.message((F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç"), state=admin.addingMistakeOrLie_adding)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['surnameOfPerson']
    leng = await data_getter(
        f"select asset_name from mistakeorlie where asset_name like '%{tag}%' order by asset_name asc")
    nmrkup = ReplyKeyboardBuilder()
    for i in leng:
        nmrkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.addingMistakeOrLie_upd)


@router.message(state=admin.addingMistakeOrLie_upd)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    await state.update_data(tag=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞, —è —Ö–æ—á—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é(–∏ —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞)"))
    nmrkup.row(types.KeyboardButton(text="–Ø —Ö–æ—á—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"))
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    media_id = await data_getter(f"select t_id from assets where name='{message.text}'")
    caption = await data_getter((f"select rebuttal from mistakeorlie where asset_name='{message.text}'"))
    try:
        await message.answer_photo(media_id[0][0], caption=caption[0][0],
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_video(media_id[0][0], caption=caption[0][0],
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.addingMistakeOrLie_upd_text_or_media)


@router.message(state=admin.addingMistakeOrLie_upd_text_or_media)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞, —è —Ö–æ—á—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é(–∏ —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞)":
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–∏–ª —Å –ø–æ–¥–ø–∏—Å—å—é(—Ç–µ—Å–∫—Ç–æ–º)",
                             reply_markup=nmrkup.as_markup(resize_keyboard=True))
        await state.set_state(admin.addingMistakeOrLie_upd_text_and_media)
    elif message.text == "–Ø —Ö–æ—á—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=nmrkup.as_markup(resize_keyboard=True))
        await state.set_state(admin.addingMistakeOrLie_upd_text_only)
    else:
        print('do nothing')


@router.message(state=admin.addingMistakeOrLie_upd_text_only)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['tag']
    text = message.html_text
    await data_getter(f"update mistakeorlie set rebuttal='{text}' where asset_name='{tag}'; commit;")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer(f"–£–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç {tag}")
    await state.clear()


@router.message(state=admin.addingMistakeOrLie_upd_text_and_media)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['tag']
    text = message.html_text
    try:
        media_id = message.video.file_id
    except:
        media_id = message.photo[-1].file_id

    await data_getter(f"update assets set t_id='{media_id}' where name='{tag}'; commit;")
    await data_getter(f"update mistakeorlie set rebuttal='{text}' where asset_name='{tag}'; commit;")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–£–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç ")
    await state.clear()


@router.message((F.text == "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É ü•∏"))
async def admin_truthgame(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(admin.truthgame)
    await logg.admin_logs(message.from_user.id, message.from_user.username, "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –Ω–∞—á–∞–ª–æ")

    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–≥—Ä—ã –≤ –ü—Ä–∞–≤–¥—É.",
                         reply_markup=game_keys())


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.truthgame)
async def admin_truthgame_add(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—é–¥–∞ —Å—é–∂–µ—Ç.\n\n\n–ò–º –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç")
    await state.set_state(admin.truthgame_media_statement)


@router.message(state=admin.truthgame_media_statement)
async def admin_truthgame_add_stat(message: types.Message, state: FSMContext):
    await state.set_state(admin.truthgame_media_rebuttal)
    media_id = ''
    if message.photo is not None:
        media_id = message.photo[-1].file_id
    elif message.video is not None:
        media_id = message.video.file_id
    text = message.html_text
    await state.update_data({'truthgame_statement': text, 'truthgame_statement_asset': media_id})
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—é–¥–∞ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—é–∂–∞—Ç–µ.'
                         '\n\n\n–ò–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç')


@router.message(state=admin.truthgame_media_rebuttal)
async def admin_truthgame_add_rebb(message: types.Message, state: FSMContext):
    await state.set_state(admin.truthgame_media_truth)
    media_id = ''
    if message.photo is not None:
        media_id = message.photo[-1].file_id
    elif message.video is not None:
        media_id = message.video.file_id
    text = message.html_text
    await state.update_data({'truthgame_rebb': text, 'truthgame_rebb_asset': media_id})
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ü—Ä–∞–≤–¥–∞"))
    nmrkup.row(types.KeyboardButton(text="–õ–æ–∂—å"))
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º: –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—é–∂–µ—Ç –ø—Ä–∞–≤–¥–∞, –∏–ª–∏ –ª–æ–∂—å?',
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))


@router.message(F.text.in_({'–ü—Ä–∞–≤–¥–∞', "–õ–æ–∂—å"}), state=admin.truthgame_media_truth)
async def admin_truthgame_add_truth(message: types.Message, state: FSMContext):
    dick = dict()
    if message.text == '–ü—Ä–∞–≤–¥–∞':
        dick = {'truthgamebool': 'true'}
    elif message.text == '–õ–æ–∂—å':
        dick = {'truthgamebool': 'false'}
    await logg.admin_logs(message.from_user.id, message.from_user.username, "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –ª–æ–∂—å –∏–ª–∏ –ø—Ä–∞–≤–¥–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üëåüèº"))
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await state.update_data(dick)
    await message.answer(f"–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –≤—ã–±–æ—Ä —Ç–∞–∫–æ–≤",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üëåüèº"), state=admin.truthgame_media_truth)
async def mesdfsdfnu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    st_text = data['truthgame_statement']
    st_asset = data['truthgame_statement_asset']
    reb_text = data['truthgame_rebb']
    reb_asset = data['truthgame_rebb_asset']
    tag_count = (await data_getter("SELECT id FROM truthgame ORDER BY id DESC LIMIT 1"))[0][0]
    st_tag = 'truthgame_' + str(tag_count).zfill(2)
    reb_tag = 't_game_reb_' + str(tag_count).zfill(2)
    isTrue = data['truthgamebool']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {st_tag} , {reb_tag}")
    dick = {'id': tag_count + 1, 'truth': isTrue, 'belivers': 1, 'nonbelivers': 1}
    if st_asset:
        await sql_safe_insert('assets', {'t_id': st_asset, 'name': st_tag})
        dick.update({'asset_name': st_tag})
    if reb_asset:
        await sql_safe_insert('assets', {'t_id': reb_asset, 'name': reb_tag})
        dick.update({'reb_asset_name': reb_tag})
    if st_text:
        await sql_safe_insert('texts', {'text': st_text, 'name': st_tag})
        dick.update({'text_name': st_tag})
    if reb_text:
        await sql_safe_insert('texts', {'text': reb_text, 'name': reb_tag})
        dick.update({'rebuttal': reb_tag})
    await sql_safe_insert('truthgame', dick)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –ø—Ä–∞–≤–¥—É –ø–æ–¥ —Ç–µ–≥–∞–º–∏ {st_tag}/{reb_tag}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message((F.text == "–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.truthgame)
async def admin_truthgame_delete(message: types.Message, state: FSMContext):
    leng = (await data_getter("SELECT COUNT (*) FROM truthgame"))[0][0]
    nmrkup = ReplyKeyboardBuilder()
    for i in range(leng):
        nmrkup.row(types.KeyboardButton(text=i + 1))
    nmrkup.adjust(3)
    nmrkup.row(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.truthgame_deletion)


@router.message((F.text.in_({'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'})),
                state=admin.truthgame_deletion)
async def admin_truthgame_delete(message: types.Message, state: FSMContext):
    number = int(message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç"))
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = (await sql_games_row_selecter('truthgame', number))
    await state.update_data(data)
    await game_answer(message, data['plot_media'], data['plot_text'])
    await game_answer(message, data['rebb_media'], data['rebb_text'], nmrkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç"), state=admin.truthgame_deletion)
async def admin_truthgame_delete(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deletion_data = (await data_getter(f'DELETE FROM truthgame WHERE id = {data["id"]} RETURNING '
                                       f'asset_name, text_name, rebuttal, reb_asset_name; commit;'))[0]
    print(deletion_data)
    if deletion_data[0] is not None:
        await sql_delete('assets', {'name': deletion_data[0]})
    if deletion_data[3] is not None:
        await sql_delete('assets', {'name': deletion_data[3]})
    if deletion_data[1] is not None:
        await sql_delete('texts', {'name': deletion_data[1]})
    if deletion_data[2] is not None:
        await sql_delete('texts', {'name': deletion_data[2]})
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.answer('–°—é–∂–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=nmrkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç"), state=admin.truthgame)
async def admin_truthgame_update(message: types.Message, state: FSMContext):
    leng = (await data_getter("SELECT COUNT (*) FROM truthgame"))[0][0]
    nmrkup = ReplyKeyboardBuilder()
    for i in range(leng):
        nmrkup.row(types.KeyboardButton(text=i + 1))
    nmrkup.adjust(3)
    nmrkup.row(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.truthgame_update)


@router.message((F.text.in_({'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'})),
                state=admin.truthgame_update)
async def admin_truthgame_update_select(message: types.Message, state: FSMContext):
    number = int(message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = (await data_getter(f'SELECT * FROM (SELECT *, row_number() over (ORDER BY id) FROM truthgame) '
                              f'AS GG WHERE row_number = {number}'))[0]
    dick = dict()
    if data[2] is not None:
        dick.update({'st_tag': data[2]})
    elif data[3] is not None:
        dick.update({'st_tag': data[3]})
    if data[6] is not None:
        dick.update({'rb_tag': data[6]})
    elif data[7] is not None:
        dick.update({'rb_tag': data[7]})
    dick.update({'id': data[0]})
    await state.update_data(dick)
    data = (await sql_games_row_selecter('truthgame', number))
    await game_answer(message, data['plot_media'], data['plot_text'])
    await game_answer(message, data['rebb_media'], data['rebb_text'], nmrkup.as_markup(resize_keyboard=True))
    await message.answer(f'–ï—Å–ª–∏ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞ –ø–æ —Ç–µ–≥–∞–º, —Ç–æ —Ç–µ–≥–∏ —Ç–∞–∫–æ–≤—ã:\n'
                         f'–ü—Ä–∞–≤–¥–∞: {dick["st_tag"]}\n–õ–æ–∂—å: {dick["rb_tag"]}\n\n'
                         f'–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç ("–ü—Ä–∞–≤–¥–∞"):')
    await state.set_state(admin.truthgame_update_stt)


@router.message(state=admin.truthgame_update_stt)
async def admin_truthgame_add_stat(message: types.Message, state: FSMContext):
    await state.set_state(admin.truthgame_update_rbb)
    media_id = ''
    if message.photo is not None:
        media_id = message.photo[-1].file_id
    elif message.video is not None:
        media_id = message.video.file_id
    text = message.html_text
    await state.update_data({'truthgame_statement': text, 'truthgame_statement_asset': media_id})
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—é–¥–∞ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞.'
                         '\n\n\n–ò–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç')


@router.message(state=admin.truthgame_update_rbb)
async def admin_truthgame_add_rebb(message: types.Message, state: FSMContext):
    await state.set_state(admin.truthgame_update_truth)
    media_id = ''
    if message.photo is not None:
        media_id = message.photo[-1].file_id
    elif message.video is not None:
        media_id = message.video.file_id
    text = message.html_text
    await state.update_data({'truthgame_rebb': text, 'truthgame_rebb_asset': media_id})
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ü—Ä–∞–≤–¥–∞"))
    nmrkup.row(types.KeyboardButton(text="–õ–æ–∂—å"))
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º: –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—é–∂–µ—Ç –ø—Ä–∞–≤–¥–∞, –∏–ª–∏ –ª–æ–∂—å?',
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))


@router.message(F.text.in_({'–ü—Ä–∞–≤–¥–∞', "–õ–æ–∂—å"}), state=admin.truthgame_update_truth)
async def admin_truthgame_add_truth(message: types.Message, state: FSMContext):
    await state.set_state(admin.truthgame_update_approve)
    dick = dict()
    if message.text == '–ü—Ä–∞–≤–¥–∞':
        dick = {'truthgamebool': 'true'}
    elif message.text == '–õ–æ–∂—å':
        dick = {'truthgamebool': 'false'}
    await logg.admin_logs(message.from_user.id, message.from_user.username, "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –ª–æ–∂—å –∏–ª–∏ –ø—Ä–∞–≤–¥–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ü§ô"))
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await state.update_data(dick)
    await message.answer(f"–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –≤—ã–±–æ—Ä —Ç–∞–∫–æ–≤",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ü§ô"), state=admin.truthgame_update_approve)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    print(data)
    st_text = data['truthgame_statement']
    st_asset = data['truthgame_statement_asset']
    reb_text = data['truthgame_rebb']
    reb_asset = data['truthgame_rebb_asset']
    tag_count = (await data_getter("SELECT id FROM truthgame ORDER BY id DESC LIMIT 1"))[0][0]
    st_tag = data['st_tag']
    reb_tag = data['rb_tag']
    isTrue = data['truthgamebool']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    dick = {'truth': isTrue, 'belivers': 1, 'nonbelivers': 1}
    deletion_data = (await data_getter(f'DELETE FROM truthgame WHERE id = {data["id"]} RETURNING '
                                       f'asset_name, text_name, rebuttal, reb_asset_name; commit;'))[0]
    print(deletion_data)
    if deletion_data[0] is not None:
        await sql_delete('assets', {'name': deletion_data[0]})
    if deletion_data[3] is not None:
        await sql_delete('assets', {'name': deletion_data[3]})
    if deletion_data[1] is not None:
        await sql_delete('texts', {'name': deletion_data[1]})
    if deletion_data[2] is not None:
        await sql_delete('texts', {'name': deletion_data[2]})

    dick = {'id': data['id'], 'truth': isTrue, 'belivers': 1, 'nonbelivers': 1}
    if st_asset:
        await sql_safe_insert('assets', {'t_id': st_asset, 'name': st_tag})
        dick.update({'asset_name': st_tag})
    if reb_asset:
        await sql_safe_insert('assets', {'t_id': reb_asset, 'name': reb_tag})
        dick.update({'reb_asset_name': reb_tag})
    if st_text:
        await sql_safe_insert('texts', {'text': st_text, 'name': st_tag})
        dick.update({'text_name': st_tag})
    if reb_text:
        await sql_safe_insert('texts', {'text': reb_text, 'name': reb_tag})
        dick.update({'rebuttal': reb_tag})
    await sql_safe_insert('truthgame', dick)
    await message.answer(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ –ø–æ —Ç–µ–≥–∞–º: {st_tag}/{reb_tag}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


"""    if st_asset:
        if await sql_safe_insert('assets', {'t_id': st_asset, 'name': st_tag}) is False:
            await sql_safe_update('assets', {'t_id': st_asset}, {'name': st_tag})
        dick.update({'asset_name': st_tag})
    else:
        dick.update({'asset_name': None})
        await sql_delete('assets', {'name': st_tag})
    if reb_asset:
        if await sql_safe_insert('assets', {'t_id': st_asset, 'name': reb_tag}) is False:
            await sql_safe_update('assets', {'t_id': reb_asset}, {'name': reb_tag})
        dick.update({'reb_asset_name': reb_tag})
    else:
        dick.update({'reb_asset_name': None})
        await sql_delete('assets', {'name': reb_tag})
    if st_text:
        if await sql_safe_insert('texts', {'text': st_text, 'name': st_tag}) is False:
            await sql_safe_update('assets', {'t_id': reb_asset}, {'name': reb_tag})
        dick.update({'text_name': st_tag})
    else:
        dick.update({'text_name': None})
        await sql_delete('texts', {'name': st_tag})
    if reb_text:
        if await sql_safe_insert('texts', {'text': st_text, 'name': st_tag}) is False:
            await sql_safe_update('texts', {'text': reb_text}, {'name': reb_tag})
        dick.update({'rebuttal': reb_tag})
    else:
        dick.update({'rebuttal': None})
        await sql_delete('texts', {'name': reb_tag})
    print(dick)
    for di in dick:
        await sql_safe_update('truthgame', {di: dick[di]}, {'id': data['id']})"""


#######################–ü–£–¢–ò–ù
@router.message((F.text == "–ü—É—Ç–∏–Ω (–õ–æ–∂—å) üöÆ"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞. –¢—É—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—é–∂–µ—Ç –±–µ–∑ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏—è! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                         reply_markup=game_keys())
    await state.set_state(admin.putin_game_lobby)


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.putin_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game)


@router.message(state=admin.putin_game)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text = message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%putin_lie_game_%'")
    count = len(postgressdata) + 1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ü—É—Ç–∏–Ω - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , putin_lie_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'putin_lie_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'putin_lie_game_{count}'); commit;")

        await data_getter(
            f"insert into putin_lies(asset_name,text_name,belivers,nonbelivers) values ('putin_lie_game_{count}','putin_lie_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–ü—É—Ç–∏–Ω - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º putin_lie_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message((F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.putin_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                         reply_markup=admin_games_keyboard())
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from putin_lies order by asset_name asc")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())
    await state.set_state(admin.putin_game_del)


@router.message(state=admin.putin_game_del)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_delete=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞"))
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_del_apply)


@router.message(state=admin.putin_game_del_apply)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_id = data['media_to_delete']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞":
        await data_getter(f"delete from putin_lies where asset_name = '{media_id}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –ø–æ–¥ —Ç–µ–≥–æ–º <b>{media_id}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    elif message.text == "–ù–µ—Ç":
        await message.answer("–í–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.putin_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from putin_lies")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                         reply_markup=nmarkup.as_markup())
    await state.set_state(admin.putin_game_upd)


@router.message(state=admin.putin_game_upd)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_update=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç ",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_upd_apply)


@router.message(state=admin.putin_game_upd_apply)
async def admin_home(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = await state.get_data()
    tag = data['media_to_update']
    try:
        asset = message.photo[-1].file_id
    except:
        asset = message.video.file_id
    if message.text == "–ù–µ—Ç":
        await message.answer("–ù—É —Ç–æ–≥–¥–∞ —Å–º–µ–ª–æ –∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())

    text = message.html_text

    if tag:
        await data_getter(f"update assets set t_id = '{asset}' where name = '{tag}; commit;'")
        await data_getter(f"update texts set text = '{text}' where name = '{tag}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ç–µ–≥–æ–º <b>{tag}</b> –∏–∑–º–µ–Ω–µ–Ω–æ ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


#### TODO –£–¥–∞–ª–µ–Ω–∏–µ


@router.message(F.text == "–ü—É—Ç–∏–Ω (–û–±–µ—â–∞–Ω–∏—è) üçú")
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –æ–±–µ—â–∞–Ω–∏—è")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=game_keys())
    await state.set_state(admin.putin_game_old_lies)


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.putin_game_old_lies)
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_old_lies_add)


@router.message(state=admin.putin_game_old_lies_add)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text = message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%putin_oldlie_game%'")
    count = len(postgressdata) + 1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ü—É—Ç–∏–Ω-—Å—Ç–∞—Ä—ã–π - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , putin_oldlie_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'putin_oldlie_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'putin_oldlie_game_{count}'); commit;")

        await data_getter(
            f"insert into putin_old_lies(asset_name,text_name,belivers,nonbelivers) values ('putin_oldlie_game_{count}','putin_lie_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–°—Ç–∞—Ä—ã–π –ü—É—Ç–∏–Ω - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º putin_oldlie_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message((F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.putin_game_old_lies)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                         reply_markup=admin_games_keyboard())
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from putin_old_lies order by asset_name asc")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())
    await state.set_state(admin.putin_game_old_lies_del)


@router.message(state=admin.putin_game_old_lies_del)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_delete=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞"))
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_old_lies_del_apply)


@router.message(state=admin.putin_game_del_apply)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_id = data['media_to_delete']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞":
        await data_getter(f"delete from putin_old_lies where asset_name = '{media_id}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –ø–æ–¥ —Ç–µ–≥–æ–º <b>{media_id}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    elif message.text == "–ù–µ—Ç":
        await message.answer("–í–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.putin_game_old_lies)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from putin_old_lies")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                         reply_markup=nmarkup.as_markup())
    await state.set_state(admin.putin_game_old_lies_upd)


@router.message(state=admin.putin_game_old_lies_upd)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_update=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç ",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_old_lies_upd_aplly)


@router.message(state=admin.putin_game_old_lies_upd_aplly)
async def admin_home(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = await state.get_data()
    tag = data['media_to_update']
    try:
        asset = message.photo[-1].file_id
    except:
        asset = message.video.file_id
    if message.text == "–ù–µ—Ç":
        await message.answer("–ù—É —Ç–æ–≥–¥–∞ —Å–º–µ–ª–æ –∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())

    text = message.html_text

    if tag:
        await data_getter(f"update assets set t_id = '{asset}' where name = '{tag}; commit;'")
        await data_getter(f"update texts set text = '{text}' where name = '{tag}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ç–µ–≥–æ–º <b>{tag}</b> –∏–∑–º–µ–Ω–µ–Ω–æ ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message(F.text == "–ò–≥—Ä–∞ –ê–±—Å—É—Ä–¥–∞ üóØ")
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ù–æ—Ä–º–∞–ª - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞. –¢—É—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—é–∂–µ—Ç –±–µ–∑ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏—è! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                         reply_markup=game_keys())
    await state.set_state(admin.normal_game_lobby)


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.normal_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ù–æ—Ä–º–∞–ª - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.normal_game_add)


@router.message(state=admin.normal_game_add)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text = message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%normal_game%'")
    count = len(postgressdata) + 1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ò–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , normal_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'normal_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'normal_game_{count}'); commit;")

        await data_getter(
            f"insert into normal_game(asset_name,text_name,belivers,nonbelivers) values ('normal_game_{count}','normal_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–ò–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º normal_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message((F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.normal_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                         reply_markup=admin_games_keyboard())
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from normal_game order by asset_name asc")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())
    await state.set_state(admin.normal_game_del)


@router.message(state=admin.normal_game_del)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_delete=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞"))
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.normal_game_del_apply)


@router.message(state=admin.normal_game_del_apply)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_id = data['media_to_delete']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞":
        await data_getter(f"delete from normal_game where asset_name = '{media_id}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –ø–æ–¥ —Ç–µ–≥–æ–º <b>{media_id}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    elif message.text == "–ù–µ—Ç":
        await message.answer("–í–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.normal_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from normal_game")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                         reply_markup=nmarkup.as_markup())
    await state.set_state(admin.normal_game_upd)


@router.message(state=admin.normal_game_upd)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_update=message.text)
    nmrkup = ReplyKeyboardBuilder()

    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç ",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.normal_game_upd_apply)


@router.message(state=admin.normal_game_upd_apply)
async def admin_home(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = await state.get_data()
    tag = data['media_to_update']
    try:
        asset = message.photo[-1].file_id
    except:
        asset = message.video.file_id
    if message.text == "–ù–µ—Ç":
        await message.answer("–ù—É —Ç–æ–≥–¥–∞ —Å–º–µ–ª–æ –∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())

    text = message.html_text

    if tag:
        await data_getter(f"update assets set t_id = '{asset}' where name = '{tag}; commit;'")
        await data_getter(f"update texts set text = '{text}' where name = '{tag}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ç–µ–≥–æ–º <b>{tag}</b> –∏–∑–º–µ–Ω–µ–Ω–æ ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message(F.text == "–ò–≥—Ä–∞ –ù–∞—Ü–∏–∑–º–∞ üí§")
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ù–∞—Ü–∏–∑–º - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞. –¢—É—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—é–∂–µ—Ç –±–µ–∑ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏—è! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                         reply_markup=game_keys())
    await state.set_state(admin.nazi_game_lobby)


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.nazi_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ù–∞—Ü–∏–∑–º - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.nazi_game_lobby_add)


@router.message(state=admin.nazi_game_lobby_add)
async def menu(message: types.Message, state: FSMContext):
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await state.clear()
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer(
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.update_data(ucranebool=message.text)
    await state.set_state(admin.ucraine_or_not_media)


@router.message(state=admin.ucraine_or_not_media)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")
    data = await state.get_data()
    truth = data['ucranebool']
    text = message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%country_game%'")
    count = len(postgressdata) + 1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–£–∫—Ä–∞–∏–Ω–∞ - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , country_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'country_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'country_game_{count}'); commit;")

        await data_getter(
            f"insert into ucraine_or_not_game(asset_name,text_name,belivers,nonbelivers,truth) values ('normal_game_{count}','normal_game_{count}', 1,1,{truth}); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç? - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º country_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message((F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.nazi_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                         reply_markup=admin_games_keyboard())
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from ucraine_or_not_game order by asset_name asc")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())
    await state.set_state(admin.nazi_game_del)


@router.message(state=admin.nazi_game_del)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_delete=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞"))
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0], caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.nazi_game_del_apply)


@router.message(state=admin.nazi_game_del_apply)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_id = data['media_to_delete']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞":
        await data_getter(f"delete from ucraine_or_not_game where asset_name = '{media_id}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –ø–æ–¥ —Ç–µ–≥–æ–º <b>{media_id}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    elif message.text == "–ù–µ—Ç":
        await message.answer("–í–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.nazi_game_lobby)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    postgresdata = await data_getter(f"select asset_name from ucraine_or_not_game")
    for i in postgresdata:
        nmarkup.row(types.KeyboardButton(text=i[0]))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞(–æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                         reply_markup=nmarkup.as_markup())
    await state.set_state(admin.nazi_game_upd)


@router.message(state=admin.nazi_game_upd)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_update=message.text)
    nmrkup = ReplyKeyboardBuilder()

    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç ",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–µ—Ç",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.nazi_game_upd_apply)


@router.message(state=admin.nazi_game_upd_apply)
async def admin_home(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = await state.get_data()
    tag = data['media_to_update']
    try:
        asset = message.photo[-1].file_id
    except:
        asset = message.video.file_id
    if message.text == "–ù–µ—Ç":
        await message.answer("–ù—É —Ç–æ–≥–¥–∞ —Å–º–µ–ª–æ –∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())

    text = message.html_text

    if tag:
        await data_getter(f"update assets set t_id = '{asset}' where name = '{tag}; commit;'")
        await data_getter(f"update texts set text = '{text}' where name = '{tag}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ç–µ–≥–æ–º <b>{tag}</b> –∏–∑–º–µ–Ω–µ–Ω–æ ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text == "–õ–æ–∂—å –ø–æ —Ç–≤ üì∫"), state=admin.game_menu)
async def admin_gam_tv(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–õ–æ–∂—å –ø–æ —Ç–≤")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="tv_first"))
    nmrkup.row(types.KeyboardButton(text="tv_HTB"))
    nmrkup.row(types.KeyboardButton(text="tv_star"))
    nmrkup.row(types.KeyboardButton(text="tv_24"))
    nmrkup.adjust(2, 2)
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie)


@router.message(state=admin.tv_lie)
async def menu(message: types.Message, state: FSMContext):
    await state.update_data(tv_channel=message.text)
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=game_keys())
    await state.set_state(admin.tv_lie_lobby)


@router.message((F.text == "–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.tv_lie_lobby)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['tv_channel']
    postgresdata = await data_getter(
        f"select name from assets where name like '%{tag}%' order by name asc")
    nmrkup = ReplyKeyboardBuilder()
    for i in postgresdata:
        nmrkup.row(types.KeyboardButton(text=f'{i[0]}'))
    await message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ —Å—é–∂–µ—Ç, –æ–Ω–∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É. \n!!!!! –í–ù–ò–ú–ê–ù–ò–ï - –í —ç—Ç–æ–π –∏–≥—Ä–µ —Å—é–∂–µ—Ç—ã –∏–¥—É—Ç –≤ –ø–∞—Ä–µ —Å –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ–º. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç lie –∞ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç reb ",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_del)


@router.message(state=admin.tv_lie_del)
async def admin_home(message: types.Message, state: FSMContext):
    await state.update_data(media_to_delete=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–î–∞"))
    nmrkup.row(types.KeyboardButton(text="–ù–µ—Ç"))
    media_id = await data_getter(f"select t_id from assets where name = '{message.text}'")
    try:
        await message.answer_video(video=media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ—Ç —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    except:
        await message.answer_photo(photo=media_id[0][0],
                                   caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ—Ç —Å—é–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                                   reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_del_apply)


@router.message((F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç"), state=admin.tv_lie_lobby)
async def menu(message: types.Message, state: FSMContext):
    mnrkup = ReplyKeyboardBuilder()
    mnrkup.row(types.KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å(—Ç–µ–∫—Å—Ç)"))
    mnrkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ"))
    await message.answer('—á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏?', reply_markup=mnrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_upd_text_or_media)


@router.message((F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å(—Ç–µ–∫—Å—Ç)"), state=admin.tv_lie_upd_text_or_media)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['tv_channel']
    postgresdata = await data_getter(
        f"select name from assets where name like '%{tag}%' order by name asc")
    nmrkup = ReplyKeyboardBuilder()
    for i in postgresdata:
        nmrkup.row(types.KeyboardButton(text=f'{i[0]}'))
    await message.answer(
        "–°—é–∂–µ—Ç—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –ø–∞—Ä–µ —Å –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ–º. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∂–µ—Ä–∂–∏—Ç –≤ —Ç–µ–≥–µ lie, –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç reb. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤—ã–±—Ä–∞—Ç—å —Å—é–∂–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç  ",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_upd_text)


@router.message((F.text == "–ü–µ—Ä–µ–∑–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ"), state=admin.tv_lie_upd_text_or_media)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag = data['tv_channel']
    postgresdata = await data_getter(
        f"select name from assets where name like '%{tag}%' order by name asc")
    nmrkup = ReplyKeyboardBuilder()
    for i in postgresdata:
        nmrkup.row(types.KeyboardButton(text=f'{i[0]}'))
    await message.answer(
        "–°—é–∂–µ—Ç—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –ø–∞—Ä–µ —Å –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ–º. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∂–µ—Ä–∂–∏—Ç –≤ —Ç–µ–≥–µ lie, –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —Å–æ–∂–µ—Ä–∂–∏—Ç reb. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤—ã–±—Ä–∞—Ç—å —Å—é–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ª–∏—Ç—å  ",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_upd)


@router.message(state=admin.tv_lie_upd)
async def admin_home(message: types.Message, state: FSMContext):
    from handlers.admin_handlers.new_admin_hand import edit_media
    await edit_media(message, state)


@router.message(state=admin.tv_lie_upd_text)
async def admin_home(message: types.Message, state: FSMContext):
    from handlers.admin_handlers.new_admin_hand import text_edit_text_tag
    await text_edit_text_tag(message, state)


@router.message(state=admin.tv_lie_del_apply)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_id = data['media_to_delete']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text == "–î–∞":
        await data_getter(f"delete from assets where name = '{media_id}'; commit;")
        await data_getter(f"delete from text where name = '{media_id}'; commit;")
        await message.answer(f"–ú–µ–¥–∏–∞ –ø–æ–¥ —Ç–µ–≥–æ–º <b>{media_id}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã ", parse_mode='html',
                             reply_markup=nmrkup.as_markup())
    elif message.text == "–ù–µ—Ç":
        await message.answer("–í–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=nmrkup.as_markup())
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
    await state.clear()


@router.message((F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç"), state=admin.tv_lie_lobby)
async def menu(message: types.Message, state: FSMContext):
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer(
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_st)


@router.message(state=admin.tv_lie_st)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    text = message.html_text
    data = await state.get_data()
    tv_channel = data['tv_channel']
    await state.update_data(tv_lie_statement=text)
    await state.update_data(tv_lie_statement_asset=media_id)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%{data['tv_channel']}_lie%'")
    count = len(postgressdata) + 1
    print(postgressdata)
    tagdata = list()
    for everytag in postgressdata:
        tagdata.append(everytag[0])
    print(tagdata)
    tag = f'{tv_channel}_{count}'
    while tag in tagdata:
        count += 1
        tag = f'{tv_channel}'
        print(tag)
    print(tag)
    await state.update_data(tv_tag=tag)
    await state.update_data(tv_tag_count=count)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await message.answer("–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_reb)


@router.message(state=admin.tv_lie_reb)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    st_text = data['tv_lie_statement']
    st_asset = data['tv_lie_statement_asset']
    reb_text = message.html_text
    reb_asset = media_id
    tag_count = data['tv_tag_count']
    tv_channel = data['tv_channel']

    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–õ–æ–∂—å –Ω–∞ —Ç–≤ - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {reb_asset} , {tv_channel}")
    # await sql_safe_update('assets', {"t_id": media_id}, {'name': f"statement_{surname}_{count}"})
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{st_asset}', '{tv_channel}_lie_{tag_count}'); commit;")
        await data_getter(
            f"insert into assets(t_id,name) values('{reb_asset}', '{tv_channel}_reb_{tag_count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{st_text}', '{tv_channel}_lie_{tag_count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{reb_text}', '{tv_channel}_reb_{tag_count}'); commit;")

    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        await message.answer(str(ex))
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –õ–æ–∂—å –ù–∞ –¢–í –ø–æ–¥ —Ç–µ–≥–∞–º–∏ {tv_channel}_lie_{tag_count}/{tv_channel}_reb_{tag_count}",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message(F.text.contains('–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –∏–≥—Ä—ã'))
async def menu(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä, –≤—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É.",
                         reply_markup=games_keyboard(message.from_user.id))
    await state.set_state(admin.game_deleting)


"""***************************************MASS MEDIA************************************************"""


@router.message(F.text == "–õ–æ–∂—å –¥—Ä—É–≥–∏—Ö –°–ú–ò üßÆ", state=admin.game_menu)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_games_keyboard())
    await state.set_state(admin.mass_media_menu)


@router.message((F.text.contains('–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='RIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='RUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='TCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='TACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='MINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())


@router.callback_query(lambda call: "media" in call.data and "exposure" in call.data)
async def add_media(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if 'pop' not in query.data and 'edit' not in query.data:
        await state.update_data(tag_media=query.data[3:])
        await query.message.delete()
        await query.message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        await state.set_state(admin.add_news)
    elif 'pop' in query.data:
        await state.update_data(tag_media=query.data[3:])
        old_exposure = query.data.split()
        last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure[-1]}%'"))
        print(last_tag_numner)
        if last_tag_numner != 1:
            await query.message.delete()
            keyboard = range(1, last_tag_numner + 1)
            nmarkup = ReplyKeyboardBuilder()
            for button in keyboard:
                nmarkup.row(types.KeyboardButton(text=button))
                nmarkup.adjust(3)
            await state.set_state(admin.mass_media_del)
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞', reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await query.answer('–°—é–∂–µ—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
    elif 'edit' in query.data:
        await state.update_data(tag_media=query.data[4:])
        old_exposure = query.data.split()
        last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure[-1]}%'"))
        if last_tag_numner != 1:
            await query.message.delete()
            keyboard = range(1, last_tag_numner + 1)
            nmarkup = ReplyKeyboardBuilder()
            for button in keyboard:
                nmarkup.row(types.KeyboardButton(text=button))
                nmarkup.adjust(3)
            await state.set_state(admin.mass_media_edit)
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞', reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await query.answer('–°—é–∂–µ—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')


@router.message(state=admin.add_news)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.html_text
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass=media)
        await state.update_data(caption_mass=caption)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
        await state.set_state(admin.mass_media_add_exposure)
    except Exception as er:
        print(er)
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


@router.message(state=admin.mass_media_add_exposure)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.html_text
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass_exposure=media)
        await state.update_data(caption_mass_exposure=caption)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=app_admin_keyboard())
        await state.set_state(admin.mass_media_Done)
    except Exception as er:
        print(er)
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")


@router.message((F.text.contains('–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')),
                state=(admin.mass_media_Done, admin.mass_media_pop_Done, admin.mass_media_edit_add))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(admin.mass_media_menu)
    await message.answer('–û—Ç–º–µ–Ω–∞..', reply_markup=admin_games_keyboard())


@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tags = data['tag_media'].split()
    old_media_tag = tags[0]
    old_exposure_tag = tags[1]
    new_media = data['media_mass']
    new_caption = data['caption_mass']
    new_caption_exposure = data['media_mass_exposure']
    new_media_exposure = data['caption_mass_exposure']
    last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure_tag}%'"))
    try:
        await sql_safe_insert('assets', {'t_id': new_media, 'name': f"{old_media_tag}{last_tag_numner + 1}"})
        await sql_safe_insert('assets',
                              {'t_id': new_media_exposure, 'name': f"{old_exposure_tag}{last_tag_numner + 1}"})
        await sql_safe_insert('texts', {'text': new_caption, 'name': f"{old_media_tag}{last_tag_numner + 1}"})
        await sql_safe_insert('texts',
                              {'text': new_caption_exposure, 'name': f"{old_exposure_tag}{last_tag_numner + 1}"})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É", reply_markup=admin_games_keyboard())
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')


@router.message((F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_games_keyboard())
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='popRIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='popRUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='popTCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='popTACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='popMINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())


@router.message(state=admin.mass_media_del)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_input = message.text
    data = data['tag_media'].split()
    await message.answer('–°—é–∂–µ—Ç –ª–∂–∏:')
    await simple_media(message, f'{data[0]}{user_input}')
    await message.answer('–°—é–∂–µ—Ç –ø—Ä–∞–≤–¥—ã:')
    await simple_media(message, f'{data[1]}{user_input}')
    await state.update_data(pop_media=f'{data[0]}{user_input}')
    await state.update_data(pop_exposure=f'{data[1]}{user_input}')
    await state.set_state(admin.mass_media_pop_Done)
    await message.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç?', reply_markup=app_admin_keyboard())


@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_pop_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pop_media = data['pop_media']
    pop_exposure = data['pop_exposure']
    try:
        await sql_delete('assets', {'name': pop_media})
        await sql_delete('assets', {'name': pop_exposure})
        await sql_delete('texts', {'name': pop_media})
        await sql_delete('texts', {'name': pop_exposure})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã", reply_markup=admin_games_keyboard())
    except:
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")


@router.message((F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='editRIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='editRUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='editTCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='editTACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='editMINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())


@router.message(state=admin.mass_media_edit)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_input = message.text
    data = data['tag_media'].split()
    await message.answer('–°—é–∂–µ—Ç –ª–∂–∏:')
    await simple_media(message, f'{data[0]}{user_input}')
    await message.answer('–°—é–∂–µ—Ç –ø—Ä–∞–≤–¥—ã:')
    await simple_media(message, f'{data[1]}{user_input}')
    await state.update_data(edit_media=f'{data[0]}{user_input}')
    await state.update_data(edit_exposure=f'{data[1]}{user_input}')
    await state.set_state(admin.mass_media_edit_add)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
    await message.answer('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é –ª–æ–∂—å c –æ–ø–∏—Å–∞–Ω–∏–µ–º',
                         reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(state=admin.mass_media_edit_add)
async def admin_home(message: types.Message, state: FSMContext):
    try:
        caption = message.html_text
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass=media)
        await state.update_data(caption_mass=caption)
        await state.set_state(admin.mass_media_edit_add_exposure)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏")

    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')


@router.message(state=admin.mass_media_edit_add_exposure)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.html_text
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass_exposure=media)
        await state.update_data(caption_mass_exposure=caption)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=app_admin_keyboard())
        await state.set_state(admin.mass_media_edit_Done)
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')


@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_edit_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag_media = data['edit_media']
    tag_exposure = data['edit_exposure']
    new_media_id = data['media_mass']
    new_caption = data['caption_mass']
    new_media_exposure_id = data['media_mass_exposure']
    new_caption_exposure = data['caption_mass_exposure']

    try:
        await sql_safe_update('assets', {'t_id': new_media_id}, {'name': tag_media})
        await sql_safe_update('assets', {'t_id': new_media_exposure_id}, {'name': tag_exposure})
        await sql_safe_update('texts', {'text': new_caption}, {'name': tag_media})
        await sql_safe_update('texts', {'text': new_caption_exposure}, {'name': tag_exposure})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ", reply_markup=admin_games_keyboard())
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')
# @router.message(IsAdmin(), state=admin.game_deleting)
# async def menu(message: types.Message, state: FSMContext):
#     await message
