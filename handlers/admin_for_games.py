from aiogram import Router, types, F
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from data_base.DBuse import sql_safe_update, data_getter, sql_safe_insert, sql_delete
from filters.isAdmin import IsAdmin
from keyboards.admin_keys import main_admin_keyboard, games_keyboard, admin_games_keyboard, app_admin_keyboard
from log import logg
from states.admin_states import admin
from utilts import simple_media

router = Router()
router.message.filter(state=admin)


@router.message(IsAdmin(), (F.text == '–ò–≥—Ä—ã üé≠'), state=admin.menu)
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(admin.menu)
    await logg.admin_logs(message.from_user.id, message.from_user.username, "–í–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä, –≤—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É.",
                         reply_markup=games_keyboard(message.from_user.id))


@router.message(IsAdmin(), (F.text == "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã üí¢"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –≤—ã–±–æ—Ä –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç–∞ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫(–¢–û–õ–¨–ö–û –§–ê–ú–ò–õ–ò–Æ)",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.addingMistakeOrLie)


@router.message(IsAdmin(), state=admin.addingMistakeOrLie)
async def menu(message: types.Message, state: FSMContext):
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await state.clear()
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.update_data(surnameOfPerson=message.text)
    await state.set_state(admin.addingMistakeOrLie_media)


@router.message(IsAdmin(), state=admin.addingMistakeOrLie_media)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")
    text = message.html_text
    data = await state.get_data()
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    surname = data['surnameOfPerson']
    postgressdata = await data_getter(f"select name from assets where name like '%{surname}%'")
    count = len(postgressdata)
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , statement_{surname}_{count}")
    # await sql_safe_update('assets', {"t_id": media_id}, {'name': f"statement_{surname}_{count}"})
    try:
        result = await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'statement_{surname}_{count + 1}'); commit;")
        print(result)
        await data_getter(
            f"insert into mistakeorlie(asset_name,belivers,nonbelivers,rebuttal) values ('statement_{surname}_{count + 1}', 1,1,'{text}'); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , statement_{surname}_{count + 1}+{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º statement_{surname}_{count + 1}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message(IsAdmin(), (F.text == "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É ü•∏"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –≤—ã–±–æ—Ä true/false")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ True –ò–ª–∏ False ",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.truthgame)


@router.message(IsAdmin(), state=admin.truthgame)
async def menu(message: types.Message, state: FSMContext):
    if message.text.lower() == 'true' or message.text.lower() == 'false':
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              "–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        await state.clear()
        nmrkup = ReplyKeyboardBuilder()
        nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.answer(
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
        await state.update_data(truthgamebool=message.text)
        await state.set_state(admin.truthgame_media_statement)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏–±–æ True –ª–∏–±–æ False")

@router.message(IsAdmin(), state=admin.truthgame_media_statement)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    text = message.html_text
    data = await state.get_data()
    await state.update_data(truthgamestatement=text)
    await state.update_data(truthgamestatementasset=media_id)


    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    bool = data['truthgamebool']
    postgressdata = await data_getter(f"select name from assets where name like '%truthgame%'")
    count = len(postgressdata)+1
    print(postgressdata)
    tagdata = list()
    for everytag in postgressdata:
        tagdata.append(everytag[0])
    print(tagdata)
    tag = f'truthgame_{count}'
    while tag in tagdata:
        count+=1
        tag = f'truthgame_{count}'
        print(tag)
    print(tag)
    await state.update_data(truthgame_tag=tag)
    await state.update_data(tagcount=count)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await message.answer("–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.truthgame_media_rebuttal)


@router.message(IsAdmin(), state=admin.truthgame_media_rebuttal)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    st_text = data['truthgamestatement']
    st_asset = data['truthgamestatementasset']
    reb_text = message.html_text
    reb_asset = media_id
    tag_count=data['tagcount']
    tag=data['truthgame_tag']
    isTrue=data['truthgamebool']
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ò–≥—Ä–∞ –≤ –ø—Ä–∞–≤–¥—É - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {reb_asset} , {tag}")
    # await sql_safe_update('assets', {"t_id": media_id}, {'name': f"statement_{surname}_{count}"})
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{st_asset}', '{tag}'); commit;")
        await data_getter(
            f"insert into assets(t_id,name) values('{reb_asset}', 'tgame_reb_{tag_count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{st_text}', '{tag}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{reb_text}', 'tgame_reb_{tag_count}'); commit;")
        await data_getter(
            f"insert into truthgame(truth,asset_name,text_name,belivers,nonbelivers,rebuttal,reb_asset_name) values ({isTrue},'{tag}','{tag}', 1,1,'tgame_reb_{tag_count}','tgame_reb_{tag_count}'); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" )
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –ø—Ä–∞–≤–¥—É –ø–æ–¥ —Ç–µ–≥–∞–º–∏ {tag}/tgame_reb_{tag_count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()
#######################–ü–£–¢–ò–ù
@router.message(IsAdmin(), (F.text == "–ü—É—Ç–∏–Ω (–õ–æ–∂—å) üöÆ"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game)

@router.message(IsAdmin(), state=admin.putin_game)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text=message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%putin_lie_game_%'")
    count = len(postgressdata)+1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , lying_dictator_00{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'lying_dictator_00{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'putin_lie_game_{count}'); commit;")

        await data_getter(
            f"insert into putin_lies(asset_name,text_name,belivers,nonbelivers) values ('lying_dictator_00{count}','putin_lie_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º lying_dictator_00{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message(IsAdmin(), (F.text == "–ü—É—Ç–∏–Ω (–û–±–µ—â–∞–Ω–∏—è) üçú"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ü—É—Ç–∏–Ω - –æ–±–µ—â–∞–Ω–∏—è")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.putin_game_old_lies)

@router.message(IsAdmin(), state=admin.putin_game)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text=message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%putin_oldlie_game%'")
    count = len(postgressdata)+1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ü—É—Ç–∏–Ω-—Å—Ç–∞—Ä—ã–π - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , putin_oldlie_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'putin_oldlie_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'putin_oldlie_game_{count}'); commit;")

        await data_getter(
            f"insert into putin_old_lies(asset_name,text_name,belivers,nonbelivers) values ('putin_oldlie_game_{count}','putin_lie_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–°—Ç–∞—Ä—ã–π –ü—É—Ç–∏–Ω - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º putin_oldlie_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()

@router.message(IsAdmin(), (F.text == "–ò–≥—Ä–∞ –ê–±—Å—É—Ä–¥–∞ üóØ"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–ò–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.normal_game)

@router.message(IsAdmin(), state=admin.normal_game)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")

    text=message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%normal_game%'")
    count = len(postgressdata)+1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–ò–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , normal_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'normal_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'normal_game_{count}'); commit;")

        await data_getter(
            f"insert into normal_game(asset_name,text_name,belivers,nonbelivers) values ('normal_game_{count}','normal_game_{count}', 1,1); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–ò–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º normal_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()

@router.message(IsAdmin(), (F.text == "–ò–≥—Ä–∞ –ù–∞—Ü–∏–∑–º–∞ üí§"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç?")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ True –∏–ª–∏ False",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.ucraine_or_not)

@router.message(IsAdmin(), state=admin.ucraine_or_not)
async def menu(message: types.Message, state: FSMContext):
    if message.text.lower() == 'true' or message.text.lower() == 'false':
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              "–£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        await state.clear()
        nmrkup = ReplyKeyboardBuilder()
        nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.answer(
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
        await state.update_data(ucranebool=message.text)
        await state.set_state(admin.ucraine_or_not_media)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏–±–æ True –ª–∏–±–æ False")

@router.message(IsAdmin(), state=admin.ucraine_or_not_media)
async def menu(message: types.Message, state: FSMContext):
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ–≤–∏–∂—É –º–µ–¥–∏–∞")
    data=state.get_data()
    truth = data['ucranebool']
    text=message.html_text
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%country_game%'")
    count = len(postgressdata)+1
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–£–∫—Ä–∞–∏–Ω–∞ - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {media_id} , country_game_{count}")
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{media_id}', 'country_game_{count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{text}', 'country_game_{count}'); commit;")

        await data_getter(
            f"insert into ucraine_or_not_game(asset_name,text_name,belivers,nonbelivers,truth) values ('normal_game_{count}','normal_game_{count}', 1,1,{truth}); commit; ")
    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç? - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö +{ex}")
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥ —Ç–µ–≥–æ–º country_game_{count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()


@router.message(IsAdmin(), (F.text == "–õ–æ–∂—å –ø–æ —Ç–≤ üì∫"))
async def admin_home(message: types.Message, state: FSMContext):
    await state.clear()
    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          "–õ–æ–∂—å –ø–æ —Ç–≤")
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="tv_first"))
    nmrkup.row(types.KeyboardButton(text="tv_HTB"))
    nmrkup.row(types.KeyboardButton(text="tv_star"))
    nmrkup.row(types.KeyboardButton(text="tv_24"))

    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie)


@router.message(IsAdmin(), state=admin.tv_lie)
async def menu(message: types.Message, state: FSMContext):
    await state.update_data(tv_channel=message.text)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer(
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
        reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_st)

@router.message(IsAdmin(), state=admin.tv_lie_st)
async def menu(message: types.Message, state: FSMContext):

    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    text = message.html_text
    data = await state.get_data()
    tv_channel = data['tv_channel']
    await state.update_data(tv_lie_statement=text)
    await state.update_data(tv_lie_statement_asset=media_id)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    postgressdata = await data_getter(f"select name from assets where name like '%{data['tv_channel']}%'")
    count = len(postgressdata) + 1
    print(postgressdata)
    tagdata = list()
    for everytag in postgressdata:
        tagdata.append(everytag[0])
    print(tagdata)
    tag = f'{tv_channel}_{count}'
    while tag in tagdata:
        count += 1
        tag = f'{tv_channel}'
        print(tag)
    print(tag)
    await state.update_data(tv_tag=tag)
    await state.update_data(tv_tag_count=count)
    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await message.answer("–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.set_state(admin.tv_lie_reb)


@router.message(IsAdmin(), state=admin.tv_lie_reb)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        media_id = message.video.file_id
    except:
        try:
            media_id = message.photo[0].file_id
        except:
            await message.answer("–ù–µ –≤–∏–∂—É –º–µ–¥–∏–∞")
    st_text = data['tv_lie_statement']
    st_asset = data['tv_lie_statement_asset']
    reb_text = message.html_text
    reb_asset = media_id
    tag_count=data['tv_tag_count']
    tv_channel=data['tv_channel']

    nmrkup = ReplyKeyboardBuilder()
    nmrkup.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))

    await logg.admin_logs(message.from_user.id, message.from_user.username,
                          f"–õ–æ–∂—å –Ω–∞ —Ç–≤ - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n {reb_asset} , {tv_channel}")
    # await sql_safe_update('assets', {"t_id": media_id}, {'name': f"statement_{surname}_{count}"})
    try:
        await data_getter(
            f"insert into assets(t_id,name) values('{st_asset}', '{tv_channel}_lie_{tag_count}'); commit;")
        await data_getter(
            f"insert into assets(t_id,name) values('{reb_asset}', '{tv_channel}_reb_{tag_count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{st_text}', '{tv_channel}_lie_{tag_count}'); commit;")
        await data_getter(
            f"insert into texts(text,name) values('{reb_text}', '{tv_channel}_reb_{tag_count}'); commit;")

    except Exception as ex:
        await logg.admin_logs(message.from_user.id, message.from_user.username,
                              f"–û—à–∏–±–∫–∞ –∏–ª–∏ –ª–æ–∂—å(–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—ã) - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" )
        await message.answer(str(ex))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –õ–æ–∂—å –ù–∞ –¢–í –ø–æ–¥ —Ç–µ–≥–∞–º–∏ {tv_channel}_lie_{tag_count}/{tv_channel}_reb_{tag_count}",
                         reply_markup=nmrkup.as_markup(resize_keyboard=True))
    await state.clear()

@router.message(IsAdmin(), (F.text.contains('–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –∏–≥—Ä—ã')))
async def menu(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä, –≤—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É.",
                         reply_markup=games_keyboard(message.from_user.id))
    await state.set_state(admin.game_deleting)

"""***************************************MASS MEDIA************************************************"""
@router.message(IsAdmin(), (F.text == "–õ–æ–∂—å –¥—Ä—É–≥–∏—Ö –°–ú–ò üßÆ"))
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_games_keyboard())
    await state.set_state(admin.mass_media_menu)


@router.message(IsAdmin(), (F.text.contains('–î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='RIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='RUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='TCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='TACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='MINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())

@router.callback_query(lambda call: "media" in call.data and "exposure" in call.data)
async def add_media(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if 'pop' not in query.data and 'edit' not in query.data:
        await state.update_data(tag_media=query.data[3:])
        await query.message.delete()
        await query.message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        await state.set_state(admin.add_news)
    elif 'pop' in query.data:
        await state.update_data(tag_media=query.data[3:])
        old_exposure = query.data.split()
        last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure[-1]}%'"))
        if last_tag_numner != 1:
            await query.message.delete()
            keyboard = range(1, last_tag_numner)
            nmarkup = ReplyKeyboardBuilder()
            for button in keyboard:
                nmarkup.row(types.KeyboardButton(text=button))
                nmarkup.adjust(3)
            await state.set_state(admin.mass_media_del)
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞', reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await query.answer('–°—é–∂–µ—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
    elif 'edit' in query.data:
        await state.update_data(tag_media=query.data[4:])
        old_exposure = query.data.split()
        last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure[-1]}%'"))
        if last_tag_numner != 1:
            await query.message.delete()
            keyboard = range(1, last_tag_numner)
            nmarkup = ReplyKeyboardBuilder()
            for button in keyboard:
                nmarkup.row(types.KeyboardButton(text=button))
                nmarkup.adjust(3)
            await state.set_state(admin.mass_media_edit)
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—é–∂–µ—Ç–∞', reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await query.answer('–°—é–∂–µ—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')





@router.message(state=admin.add_news)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.caption
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass=media)
        await state.update_data(caption_mass=caption)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
        await state.set_state(admin.mass_media_add_exposure)
    except Exception as er:
        print(er)
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


@router.message(state=admin.mass_media_add_exposure)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.caption
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass_exposure=media)
        await state.update_data(caption_mass_exposure=caption)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=app_admin_keyboard())
        await state.set_state(admin.mass_media_Done)
    except Exception as er:
        print(er)
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")


@router.message((F.text.contains('–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')), state=admin.mass_media_Done)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–º–µ–Ω–∞..', reply_markup=admin_games_keyboard())


@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tags = data['tag_media'].split()
    old_media_tag = tags[0]
    old_exposure_tag = tags[1]
    new_media = data['media_mass']
    new_caption = data['caption_mass']
    new_caption_exposure = data['media_mass_exposure']
    new_media_exposure = data['caption_mass_exposure']
    last_tag_numner = len(await data_getter(f"select name from assets where name like '%{old_exposure_tag}%'"))
    try:
        await sql_safe_insert('assets', {'t_id': new_media, 'name': f"{old_media_tag}{last_tag_numner+1}"})
        await sql_safe_insert('assets', {'t_id': new_media_exposure, 'name': f"{old_exposure_tag}{last_tag_numner+1}"})
        await sql_safe_insert('texts', {'text': new_caption, 'name': f"{old_media_tag}{last_tag_numner+1}"})
        await sql_safe_insert('texts', {'text': new_caption_exposure, 'name': f"{old_exposure_tag}{last_tag_numner+1}"})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É", reply_markup=admin_games_keyboard())
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')


@router.message(IsAdmin(), (F.text.contains('–£–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_games_keyboard())
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='popRIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='popRUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='popTCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='popTACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='popMINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())


@router.message(state=admin.mass_media_del)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_input = message.text
    data = data['tag_media'].split()
    await message.answer('–°—é–∂–µ—Ç –ª–∂–∏:')
    await simple_media(message, f'{data[0]}{user_input}')
    await message.answer('–°—é–∂–µ—Ç –ø—Ä–∞–≤–¥—ã:')
    await simple_media(message, f'{data[1]}{user_input}')
    await state.update_data(pop_media=f'{data[0]}{user_input}')
    await state.update_data(pop_exposure=f'{data[1]}{user_input}')
    await state.set_state(admin.mass_media_pop_Done)
    await message.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç?', reply_markup=app_admin_keyboard())

@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_pop_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pop_media = data['pop_media']
    pop_exposure = data['pop_exposure']
    try:
        await sql_delete('assets', {'name': pop_media})
        await sql_delete('assets', {'name': pop_exposure})
        await sql_delete('texts', {'name': pop_media})
        await sql_delete('texts', {'name': pop_exposure})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã", reply_markup=admin_games_keyboard())
    except:
        await message.answer("–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")


@router.message(IsAdmin(), (F.text.contains('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç')), state=admin.mass_media_menu)
async def admin_home(message: types.Message, state: FSMContext):
    nmarkup = InlineKeyboardBuilder()
    nmarkup.button(text='–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', callback_data='editRIANEWS_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='Russia Today', callback_data='editRUSSIATODAY_media_ RUSSIATODAY_exposure_')
    nmarkup.button(text='–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏', callback_data='editTCHANEL_WAR_media_ TCHANEL_WAR_exposure_')
    nmarkup.button(text='–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞..', callback_data='editTACC_media_ TACC_exposure_')
    nmarkup.button(text='–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§', callback_data='editMINISTRY_media_ MINISTRY_exposure_')
    nmarkup.adjust(1, 1, 1, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—é–∂–µ—Ç", reply_markup=nmarkup.as_markup())



@router.message(state=admin.mass_media_edit)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_input = message.text
    data = data['tag_media'].split()
    await message.answer('–°—é–∂–µ—Ç –ª–∂–∏:')
    await simple_media(message, f'{data[0]}{user_input}')
    await message.answer('–°—é–∂–µ—Ç –ø—Ä–∞–≤–¥—ã:')
    await simple_media(message, f'{data[1]}{user_input}')
    await state.update_data(edit_media=f'{data[0]}{user_input}')
    await state.update_data(edit_exposure=f'{data[1]}{user_input}')
    await state.set_state(admin.mass_media_edit_add)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"))
    await message.answer('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Å—é–∂–µ—Ç, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é –ª–æ–∂—å c –æ–ø–∏—Å–∞–Ω–∏–µ–º', reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message(state=admin.mass_media_edit_add)
async def admin_home(message: types.Message, state: FSMContext):
    try:
        caption = message.caption
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass=media)
        await state.update_data(caption_mass=caption)
        await state.set_state(admin.mass_media_edit_add_exposure)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏")

    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')

@router.message(state=admin.mass_media_edit_add_exposure)
async def admin_home(message: types.Message, state: FSMContext):
    caption = message.caption
    media = str()
    try:
        if message.content_type == 'photo':
            media = message.photo[0].file_id
            await message.answer_photo(media, caption=caption)
        elif message.content_type == 'video':
            media = message.video.file_id
            await message.answer_photo(media, caption=caption)
        await state.update_data(media_mass_exposure=media)
        await state.update_data(caption_mass_exposure=caption)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=app_admin_keyboard())
        await state.set_state(admin.mass_media_edit_Done)
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')

@router.message((F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')), state=admin.mass_media_edit_Done)
async def admin_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tag_media = data['edit_media']
    tag_exposure = data['edit_exposure']
    new_media_id = data['media_mass']
    new_caption = data['caption_mass']
    new_media_exposure_id = data['media_mass_exposure']
    new_caption_exposure = data['caption_mass_exposure']

    try:
        await sql_safe_update('assets', {'t_id': new_media_id}, {'name': tag_media})
        await sql_safe_update('assets', {'t_id': new_media_exposure_id}, {'name': tag_exposure})
        await sql_safe_update('texts', {'text': new_caption}, {'name': tag_media})
        await sql_safe_update('texts', {'text': new_caption_exposure}, {'name': tag_exposure})
        await state.set_state(admin.mass_media_menu)
        await message.answer("–°—é–∂–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ", reply_markup=admin_games_keyboard())
    except:
        await message.answer('–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏')
# @router.message(IsAdmin(), state=admin.game_deleting)
# async def menu(message: types.Message, state: FSMContext):
#     await message