import re

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.types import InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import sql_safe_select, mongo_count_docs
from utils.elk_logger import Logger
from utilts import CoolPercReplacer

from bot_statistics.stat import mongo_update_stat, mongo_update_stat_new
from data_base.DBuse import data_getter, sql_safe_select, mongo_game_answer, mongo_count_docs
from utilts import simple_media, simple_media_bot, CoolPercReplacer
from filters.MapFilters import PutinFilter
from handlers.story.stopwar_hand import StopWarState
from utilts import simple_media
import re

flags = {"throttling_key": "True"}
router = Router()


class Shop(StatesGroup):
    main = State()
    after_first_poll = State()
    shop_transfer = State()
    shop_bucket = State()
    shop_why_so_many = State()
    shop_callback = State()


price_dict = {'1000 x üöÄ –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞': 1150000,
              '100 x üè´ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞': 560000000,
              '1000 x ‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ–±—É—Å': 31400000,
              '10 x üõ© –ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π —Å–∞–º–æ–ª—ë—Ç (SuperJet)': 2400000000,
              '100 –∫–º x üõ£ –ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å (–æ—Ç 4 –ø–æ–ª–æ—Å)': 5230000000,
              '100 x üå≥ –ë–æ–ª—å—à–æ–π –ø–∞—Ä–∫': 500000000,
              '10 x üíä –î–µ—Ç—Å–∫–∏–π –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä': 1500000000,
              '10 x üè• –ö–æ—Ä–ø—É—Å —è–¥–µ—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã': 2600000000,
              '1 x üî• –°–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ ‚Äî 2': 1037000000000,
              '100 x üß∏ –°–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —Ä–µ–±—ë–Ω–∫—É': 121000000
              }

inline = InlineKeyboardBuilder()
inline.button(text='1000 x üöÄ',
              callback_data='1000 x üöÄ –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',)
inline.button(text='100 x üè´',
              callback_data='100 x üè´ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞')
inline.button(text='1000 x ‚ö°',
              callback_data='1000 x ‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ–±—É—Å')
inline.button(text='10 x üõ©',
              callback_data='10 x üõ© –ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π —Å–∞–º–æ–ª—ë—Ç (SuperJet)')
inline.button(text='100 –∫–º x üõ£',
              callback_data='100 –∫–º x üõ£ –ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å (–æ—Ç 4 –ø–æ–ª–æ—Å)')
inline.button(text='100 x üå≥',
              callback_data='100 x üå≥ –ë–æ–ª—å—à–æ–π –ø–∞—Ä–∫')
inline.button(text='10 x üíä',
              callback_data='10 x üíä –î–µ—Ç—Å–∫–∏–π –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä')
inline.button(text='10 x üè•',
              callback_data='10 x üè• –ö–æ—Ä–ø—É—Å —è–¥–µ—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã')
inline.button(text='1 x üî•',
              callback_data='1 x üî• –°–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ ‚Äî 2')
inline.button(text='100 x üß∏',
              callback_data='100 x üß∏ –°–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —Ä–µ–±—ë–Ω–∫—É')
inline.button(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
              callback_data='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
inline.button(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
              callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')

inline.adjust(3,3,4,2)


@router.message(commands=["shop"], flags=flags)
@router.message((F.text.contains("shop")), flags=flags)
async def shop_welcome(message: types.Message, state: FSMContext):
    print("in shop")
    await state.set_state(Shop.main)
    text = await sql_safe_select("text", "texts", {"name": "shop_welcome"})

    nmarkup = ReplyKeyboardBuilder()
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await message.answer_poll("–°–∫–æ–ª—å–∫–æ?", explanation_parse_mode="HTML",
                              allows_multiple_answers=True,
                              options=["–û–∫–æ–ª–æ 1 000 000 000 (1 –º–∏–ª–ª–∏–∞—Ä–¥–∞) —Ä—É–±–ª–µ–π",
                                       "–û–∫–æ–ª–æ 100 000 000 000 (100 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤) —Ä—É–±–ª–µ–π",
                                       "–û–∫–æ–ª–æ 10 000 000 000 000 (10 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤) —Ä—É–±–ª–µ–π",
                                       "–û–∫–æ–ª–æ 1 000 000 000 000 000 (1 –∫–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω–∞) —Ä—É–±–ª–µ–π"], is_anonymous=False,
                              reply_markup=nmarkup.as_markup(resize_keyboard=True))
    Logger.log("TEST TEST TEST")


@router.poll_answer(state=Shop.main, flags=flags)
async def shop_after_first_poll(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    # await mongo_update_stat_new(tg_id=poll_answer.user.id, column='shop_after_first_poll',
    #                             value=poll_answer.option_ids[0])
    print(poll_answer.option_ids[0])
    # right_answers = await mongo_count_docs('database', 'statistics_new', {'shop_after_first_poll': 2})
    # all_answers = await mongo_count_docs('database', 'statistics_new', {'shop_after_first_poll': {'$exists': True}})
    await state.set_state(Shop.after_first_poll)
    await state.update_data(shop_after_first_poll=poll_answer.option_ids[0])
    # await mongo_update_stat_new(tg_id=poll_answer.user.id, column='shop_after_first_poll', value=poll_answer.option_ids[0])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω üíµ"))
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã?ü§î"))
    text = await sql_safe_select("text", "texts", {"name": "shop_after_first_poll"})
    # result= (right_answers*100)/all_answers
    # txt = CoolPercReplacer(text, all_answers)
    # txt.replace('AA', right_answers)
    await bot.send_message(poll_answer.user.id, text,
                           reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(Shop.after_first_poll, F.text.contains("–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"), flags=flags)
async def shop_transfer(message: types.Message, state: FSMContext):
    # await mongo_update_stat_new(tg_id=message.from_user.id, column='shop_transfer', value="+")
    await state.set_state(Shop.shop_transfer)
    text = await sql_safe_select("text", "texts", {"name": "shop_transfer"})
    day = 203
    sum = day * 55000000000
    await state.update_data(balance=sum)
    await state.update_data(balance_all=sum)
    text = text.replace("NN", f"{day}")
    text = text.replace("MM", f"{sum}")
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º üõí"))
    nmarkup.row(types.KeyboardButton(text="–û—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã?ü§î"))
    await state.update_data(seen_child_message="0")
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(Shop.shop_transfer, F.text.contains("–û—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã?"), flags=flags)
@router.message(Shop.after_first_poll, F.text.contains("–û—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã?"), flags=flags)
async def shop_why_so_many(message: types.Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='shop_why_so_many', value="+")
    await state.set_state(Shop.shop_why_so_many)
    text = await sql_safe_select("text", "texts", {"name": "shop_why_so_many"})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º üõí"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(Shop.shop_transfer, F.text.contains("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º"), flags=flags)
@router.message(Shop.shop_why_so_many, F.text.contains("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º"), flags=flags)
async def shop_bucket(message: types.Message, state: FSMContext):
    # await mongo_update_stat_new(tg_id=message.from_user.id, column='shop_bucket', value="+")
    await state.set_state(Shop.shop_bucket)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨á"))

    await message.answer("–û—Ç–ª–∏—á–Ω–æ!", reply_markup=nmarkup.as_markup(resize_keyboard=True))
    text = await sql_safe_select("text", "texts", {"name": "shop_bucket"})

    data_dict = await state.get_data()
    for key in data_dict:
        text = text.replace(f"[{key}]", f"{data_dict[key]}")
    text = re.sub(r'\[[^\]]+\]', '0', text)
    text = text.replace("MM", f"{data_dict['balance']}")

    bot_message = await message.answer(text, reply_markup=inline.as_markup(resize_keyboard=True),
                                       disable_web_page_preview=True)  # TODO –°–î–ï–õ–ê–¢–¨ –ê–õ–¨–ë–û–ú

    # nmarkup_quit = ReplyKeyboardBuilder()
    # nmarkup_quit.row(types.KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨á"))
    # balance_message = await message.answer(text=f"           –ë–ê–õ–ê–ù–°: {data_dict['balance']}", reply_markup=nmarkup_quit.as_markup(resize_keyboard=True))
    print(bot_message.message_id)
    print(bot_message.from_user.id)
    await state.update_data(message_id_shop=bot_message.message_id)
    await state.update_data(chat_id_shop=message.from_user.id)
    # await state.update_data(balance_message=balance_message.message_id)
    shop_text = await sql_safe_select("text", "texts", {"name": "shop_bucket"})
    await state.update_data(text_shop=shop_text)


@router.callback_query(Shop.shop_bucket)
@router.callback_query(Shop.shop_callback)
async def shop_callback(query: types.CallbackQuery, bot: Bot, state: FSMContext):
    global count, text, balance
    await query.answer(" ")
    await state.set_state(Shop.shop_callback)

    text = ((await state.get_data())["text_shop"])
    message_id_shop = (await state.get_data())['message_id_shop']
    chat_id = (await state.get_data())['chat_id_shop']
    data = query.data

    if data[0] == "1":

        word_list = query.data.split()
        num_list = []
        for word in word_list:
            if word.isnumeric():
                num_list.append(int(word))
        try:
            count = (await state.get_data())[f"{data}"]
        except Exception:
            count = 0
            await state.update_data({f"{data}": f"{int(count)}"})

        try:
            data_dict = await state.get_data()
            await state.update_data(balance=int(data_dict['balance']) - (price_dict[f'{query.data}'] * num_list[0]))
        except:
            print("–æ –∏–ª–∏ –æ")
        balance = (await state.get_data())['balance']
        print(balance)
        data_dict = await state.get_data()
        if int(balance) > 0:

            try:
                print(f"{int(count)}" + "+" + f"{num_list[0]}")
                await state.update_data({f"{data}": f"{int(count) + num_list[0]}"})
            except Exception as e:
                print(e)
            data_dict = await state.get_data()
            for key in data_dict:
                text = text.replace(f"[{key}]", f"{data_dict[key]}")
            text = re.sub(r'\[[^\]]+\]', '0', text)
            text = text.replace("MM", f"{balance}")
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id_shop,  # TODO –°–î–ï–õ–ê–¢–¨ –ê–õ–¨–ë–û–ú
                                        reply_markup=inline.as_markup())


        else:
            balance = 0
            await state.update_data(balance=balance)
            for key in data_dict:
                text = text.replace(f"[{key}]", f"{data_dict[key]}")
            text = re.sub(r'\[[^\]]+\]', '0', text)
            text = text.replace("MM", f"{balance}")
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id_shop,  # TODO –°–î–ï–õ–ê–¢–¨ –ê–õ–¨–ë–û–ú
                                        reply_markup=inline.as_markup())

        print(int(data_dict["100 x üß∏ –°–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —Ä–µ–±—ë–Ω–∫—É"]))
        seen_cild_message = (await state.get_data())["seen_child_message"]
        print(seen_cild_message)
        if int(data_dict["100 x üß∏ –°–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —Ä–µ–±—ë–Ω–∫—É"]) > 7000:
            print(type(seen_cild_message))
            if seen_cild_message == "0":
                print(seen_cild_message)
                nmarkup = ReplyKeyboardBuilder()
                nmarkup.row(types.KeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ!"))
                child_text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–ø–∞—Å–ª–∏ –≤—Å–µ—Ö —Ç—è–∂–µ–ª–æ–±–æ–ª—å–Ω—ã—Ö –¥–µ—Ç–µ–π –≤ –†–æ—Å—Å–∏–∏. –ë–æ–ª—å—à–∏ –Ω–∏ –æ–¥–Ω–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –ª–µ—á–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ–Ω–¥—ã, –≥—Ä—É–ø–ø—ã –í–ö –∏ —á–∞—Ç—ã –≤ Whatsapp."
                child_message = await bot.send_message(text=child_text, chat_id=chat_id,
                                                       reply_markup=nmarkup.as_markup(resize_keyboard=True))
                await state.update_data(child_message=child_message.message_id)
                await state.update_data(seen_child_message="1")

    if query.data == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        print(query.data)
        data_dict = await state.get_data()

        for key in data_dict:
            if key[0] == '1':
                await state.update_data({f"{key}": "0"})
        await state.update_data(balance=data_dict["balance_all"])
        data_dict = await state.get_data()
        balance = (await state.get_data())['balance']
        for key in data_dict:
            text = text.replace(f"[{key}]", f"{data_dict[key]}")
        text = re.sub(r'\[[^\]]+\]', '0', text)
        text = text.replace("MM", f"{balance}")
        await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id_shop,  # TODO –°–î–ï–õ–ê–¢–¨ –ê–õ–¨–ë–û–ú
                                    reply_markup=inline.as_markup())
    if query.data == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        print(query.data)
        balance = (await state.get_data())['balance']
        balance_all=(await state.get_data())['balance_all']
        low_amount = int(balance_all) * 0.2
        print(low_amount)
        if balance < low_amount:
            nmarkup = ReplyKeyboardBuilder()
            nmarkup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ üëå"))
            await bot.send_message(
                text="<b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.</b> –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä—ã, –Ω–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–æ–π–Ω—É. ü§∑‚Äç‚ôÇÔ∏è",
                chat_id=chat_id,
                reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")
        if balance > low_amount:
            nmarkup = ReplyKeyboardBuilder()
            nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω üõí"))
            nmarkup.row(types.KeyboardButton(text="–î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
            await bot.send_message(
                text="–£–≤–µ—Ä–µ–Ω—ã? –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –µ—â—ë –Ω–µ –≤—Å–µ –¥–µ–Ω—å–≥–∏!",
                chat_id=chat_id,
                reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")



    data_dict = await state.get_data()
    await mongo_update_stat_new(tg_id=chat_id, column='shop_callback', value=data_dict['balance'])


@router.message(Shop.shop_callback, F.text.contains("–û—Ç–ª–∏—á–Ω–æ"), flags=flags)
async def shop_children_ok(message: types.Message, bot: Bot, state: FSMContext):
    message_id = (await state.get_data())['child_message']
    chat_id = (await state.get_data())['chat_id_shop']
    await bot.delete_message(chat_id, message_id)

@router.message(Shop.shop_callback, F.text.contains("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω üõí"), flags=flags)
@router.message(Shop.shop_bucket, (F.text.contains("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω üõí")|F.text.contains("–î–∞, –≤—ã–π—Ç–∏ ‚¨á")), flags=flags)
async def shop_go_back(message: types.Message, bot: Bot, state: FSMContext):
    chat_id = (await state.get_data())['chat_id_shop']
    await bot.delete_message(chat_id,message.message_id-1)


@router.message(Shop.shop_callback, F.text.contains("–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨á"), flags=flags)
@router.message(Shop.shop_bucket, F.text.contains("–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨á"), flags=flags)
async def shop_out(message: types.Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω üõí"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –≤—ã–π—Ç–∏ ‚¨á"))
    await message.answer("–£–≤–µ—Ä–µ–Ω—ã? –í—ã –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑!", reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.contains('–î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')), state=Shop.shop_callback)
async def shop_bucket(message: types.Message, bot: Bot, state: FSMContext):
    chat_id = (await state.get_data())['chat_id_shop']
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ üëå"))
    await bot.send_message(
        text="<b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.</b> –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä—ã, –Ω–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–æ–π–Ω—É. ü§∑‚Äç‚ôÇÔ∏è",
        chat_id=chat_id,
        reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")