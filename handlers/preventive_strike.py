import csv

from aiogram import Router, F
from aiogram import types, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

import bata
from data_base.DBuse import data_getter, poll_write, sql_safe_select, redis_pop, poll_get, sql_safe_update
from handlers.admin_hand import admin_home
from keyboards.main_keys import filler_kb
from keyboards.admin_keys import main_admin_keyboard
from states.antiprop_states import propaganda_victim
from states.donbass_states import donbass_state
from resources.all_polls import donbass_first_poll, donbass_second_poll
from filters.All_filters import option_filter, PutinFilter, second_donbass_filter
from handlers.stopwar_hand import StopWarState
from handlers import true_resons_hand


class PreventStrikeState(StatesGroup):
    main = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()


router = Router()
router.message.filter(state=PreventStrikeState)



@router.message((F.text == '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º'))
async def prevent_strike_any_brutality(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_any_brutality'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º?'))
    nmarkup.row(types.KeyboardButton(text='–ù—É –ø–æ–ø—Ä–æ–±—É–π'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º?', '–ù—É –ø–æ–ø—Ä–æ–±—É–π'})))
async def prevent_strike_some_days(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_some_days'})
    await state.set_state(PreventStrikeState.q1)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–∞–∫–∏–µ?'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'–ö–∞–∫–∏–µ?'})), state=PreventStrikeState.q1)
async def prevent_strike_q1(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_q1'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ'))
    nmarkup.row(types.KeyboardButton(text='–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'))
    await state.set_state(PreventStrikeState.q2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ', '–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'})), state=PreventStrikeState.q2)
async def prevent_strike_q2(message: Message, state: FSMContext):
    await state.set_state(PreventStrikeState.q3)
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_q2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ'))
    nmarkup.row(types.KeyboardButton(text='–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ', '–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'})), state=PreventStrikeState.q3)
async def prevent_strike_q3(message: Message, state: FSMContext):
    await state.set_state(PreventStrikeState.q4)
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_q3'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ'))
    nmarkup.row(types.KeyboardButton(text='–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ', '–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'})), state=PreventStrikeState.q4)
async def prevent_strike_q4(message: Message, state: FSMContext):
    await state.set_state(PreventStrikeState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_q4'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ'))
    nmarkup.row(types.KeyboardButton(text='–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message((F.text.in_({'–î–∞, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ', '–ù–∏—á–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'})), state=PreventStrikeState.main)
async def prevent_strike_now_you(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_now_you'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞, –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–π —É–¥–∞—Ä -- –ª–∏—à—å –ø–æ–≤–æ–¥'))
    nmarkup.row(types.KeyboardButton(text='–Ø –∏ —Ç–∞–∫ –Ω–µ –≤–µ—Ä–∏–ª(–∞), —á—Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç –Ω–∞–ø–∞–¥–µ–Ω–∏–µ'))
    nmarkup.row(types.KeyboardButton(text='–ù–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.in_({'–î–∞, –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–π —É–¥–∞—Ä -- –ª–∏—à—å –ø–æ–≤–æ–¥', '–Ø –∏ —Ç–∞–∫ –Ω–µ –≤–µ—Ä–∏–ª(–∞), —á—Ç–æ –£–∫—Ä–∞–∏–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç –Ω–∞–ø–∞–¥–µ–Ω–∏–µ'}))
async def prevent_strike_hilter_allright(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_hilter_allright'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä'))
    nmarkup.row(types.KeyboardButton(text='–î–∞, —Ö–æ—á—É'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == '–ù–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π')
async def prevent_strike_hilter_did_it(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_hilter_did_it'})
    await state.set_state(true_resons_hand.truereasons_state.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä'))
    nmarkup.row(types.KeyboardButton(text='–î–∞, —Ö–æ—á—É'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ø—Ä–æ–¥–æ–ª–∂–∏–º'))
async def prevent_strike_end_point(message: Message, state: FSMContext):
    text = '–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å. –£ –Ω–∞—Å –µ—â–µ –µ—Å—Ç—å —á—Ç–æ –æ–±—Å—É–¥–∏—Ç—å.'
    await state.set_state(true_resons_hand.truereasons_state.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ò —á—Ç–æ –¥–∞–ª—å—à–µ?'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == '–î–∞, —Ö–æ—á—É')
async def prevent_strike_will_show(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'prevent_strike_will_show'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞)'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.in_({'–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞)', 'üòÅ', 'üôÇ', 'üòï', '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º'}))
async def prevent_strike_memes(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['lgamecount']
    except:
        count = 0
    try:
        count += 1
        media = await sql_safe_select('t_id', 'assets', {'name': f'prevent_strike_meme_{count}'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text='üòÅ'))
        nmarkup.row(types.KeyboardButton(text='üôÇ'))
        nmarkup.row(types.KeyboardButton(text='üòï'))
        nmarkup.row(types.KeyboardButton(text='–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º'))
        try:
            await message.answer_photo(media, reply_markup=nmarkup.as_markup(resize_keyboard=True))
        except:
            await message.answer_video(media, reply_markup=nmarkup.as_markup(resize_keyboard=True))
        await state.update_data(lgamecount=count)
    except:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text='–î–∞, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º'))
        await message.answer('–í –º–æ–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ–º—ã –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))

