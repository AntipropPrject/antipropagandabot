import asyncio

from aiogram import Router, F, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, PollAnswer, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import sql_safe_select, mongo_count_docs
from resources.all_polls import mob_city, mob_front
from states.mob_states import MobState
from states.stopwar_states import StopWarState
from utils.fakes import fake_message
from utilts import CoolPercReplacer, simple_media

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=MobState)
router.poll_answer.filter(state=MobState)


async def mob_lifesaver(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_lifesaver'})
    await state.set_state(MobState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ù–∞—á–Ω—ë–º! ü™ñ"))
    nmarkup.row(KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ", state=MobState.main, flags=flags)
async def mob_how_to_avoid(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_lifesaver'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å—ë–º –í–æ–≤–æ—á–∫—É! ü™ñ"))
    nmarkup.row(KeyboardButton(text="–í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({'–ù–∞—á–Ω—ë–º! ü™ñ', '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å—ë–º –í–æ–≤–æ—á–∫—É! ü™ñ'}), state=MobState.main, flags=flags)
async def mob_save_vv_start(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(MobState.city_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'mob_lifesaver'})
    await message.answer(text, disable_web_page_preview=True)
    await bot.send_poll(message.from_user.id, '–ì–¥–µ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ?', mob_city, is_anonymous=False,
                        type='quiz', correct_option_id=0)


@router.poll_answer(MobState.city_poll)
async def mob_size_matters(poll_answer: PollAnswer, bot: Bot, state: FSMContext):
    await state.set_state(MobState.nazi_poll)
    answer = mob_city[poll_answer.option_ids[0]]
    await mongo_update_stat_new(poll_answer.user.id, 'mob_city_poll', value=answer)

    c_all = await mongo_count_docs('database', 'statistics_new', {'mob_city_poll': {'$exists': True}})
    c_city = await mongo_count_docs('database', 'statistics_new', {'mob_city_poll': mob_city[0]})
    c_village = await mongo_count_docs('database', 'statistics_new', {'mob_city_poll': mob_city[1]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'mob_size_matters'}), c_all)
    txt.replace('AA', c_city)
    txt.replace('BB', c_village)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await bot.send_message(poll_answer.user.id, txt(),
                           reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)














































@router.message(F.text == "–ü–æ–Ω—è—Ç–Ω–æ üëå", state=MobState.voenkomat_poll, flags=flags)
async def mob_he_is_gone(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_he_is_gone'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–î–∞, –∫–æ–Ω–µ—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üëå"))
    nmarkup.row(KeyboardButton(text="–ù–µ—Ç, —Ö–≤–∞—Ç–∏—Ç, —è —É–∑–Ω–∞–ª(–∞) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üôÖ‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ù–µ—Ç, —Ö–≤–∞—Ç–∏—Ç, —è —É–∑–Ω–∞–ª(–∞) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üôÖ‚Äç‚ôÇÔ∏è", state=MobState.voenkomat_poll, flags=flags)
async def mob_I_can_help(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_I_can_help'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º! üëå"))
    nmarkup.row(KeyboardButton(text="–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ", "–ò –∫–∞–∫–∏–µ —à–∞–Ω—Å—ã? ü§î"}),
                state=(MobState.voenkomat_poll, MobState.front), flags=flags)
async def mob_no_chances(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_no_chances'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å! üò±"))
    nmarkup.add(KeyboardButton(
        text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ" if await state.get_state() == "MobState:voenkomat_poll" else "–ü–æ–Ω—è—Ç–Ω–æ üëå"))
    nmarkup.row(KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏, –∞ –∫–∞–∫ —Ç—ã —ç—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª? ü§î"))
    await simple_media(message, 'mob_no_chances', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == "–ü–æ–¥–æ–∂–¥–∏, –∞ –∫–∞–∫ —Ç—ã —ç—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª? ü§î", state=(MobState.voenkomat_poll, MobState.front),
                flags=flags)
async def mob_calculations(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_calculations'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å! üò±"))
    if await state.get_state() == "MobState:skipping":
        nmarkup.row(KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ"))
    elif await state.get_state() == "MobState:front":
        nmarkup.row(KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.contains('üëå'), state=MobState.voenkomat_poll, flags=flags)
async def mob_jail_card_is_good(message: Message, state: FSMContext):
    await state.set_state(MobState.front)
    text = await sql_safe_select('text', 'texts', {'name': 'mob_jail_card_is_good'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–î–∞–≤–∞–π –æ—Ü–µ–Ω–∏–º üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–î–∞–≤–∞–π –æ—Ü–µ–Ω–∏–º üìä", state=MobState.front, flags=flags)
async def mob_forever_broken(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_forever_broken'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ò –∫–∞–∫–∏–µ —à–∞–Ω—Å—ã? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–ü–æ–Ω—è—Ç–Ω–æ üëå", "–ö–∞–∫–æ–π —É–∂–∞—Å! üò±"}), state=MobState.front, flags=flags)
async def mob_still_human(message: Message, state: FSMContext):
    await state.set_state(MobState.jail)
    text = await sql_safe_select('text', 'texts', {'name': 'mob_still_human'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=MobState.jail, flags=flags)
async def mob_too_late_to_run(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_too_late_to_run'})
    await message.answer(text, disable_web_page_preview=True)
    await message.answer_poll("–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å?", mob_front, is_anonymous=False, reply_markup=ReplyKeyboardRemove())


@router.poll_answer(MobState.jail)
async def mob_no_talking_to_ghouls(poll_answer: PollAnswer, bot: Bot, state: FSMContext):
    await state.set_state(MobState.save_yourself)
    answer = mob_front[poll_answer.option_ids[0]]
    await mongo_update_stat_new(poll_answer.user.id, 'mob_front_poll', value=answer)

    f_all = await mongo_count_docs('database', 'statistics_new', {'mob_front_poll': {'$exists': True}})
    f_run = await mongo_count_docs('database', 'statistics_new', {'mob_front_poll': mob_front[0]})
    f_law = await mongo_count_docs('database', 'statistics_new', {'mob_front_poll': mob_front[1]})
    f_why = await mongo_count_docs('database', 'statistics_new', {'mob_front_poll': mob_front[2]})

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'mob_no_talking_to_ghouls'}), f_all)
    txt.replace('AA', f_run)
    txt.replace('BB', f_law)
    txt.replace('CC', f_why)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await bot.send_message(poll_answer.user.id, txt(),
                           reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå", state=MobState.save_yourself, flags=flags)
async def mob_hard_way(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_hard_way'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–õ—É—á—à–µ –≤ —Ç—é—Ä—å–º—É üóù"))
    nmarkup.row(KeyboardButton(text="–õ—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–∞—Ç—å—Å—è –≤ –ø–ª–µ–Ω üè≥Ô∏è"))
    nmarkup.row(KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–õ—É—á—à–µ –≤ —Ç—é—Ä—å–º—É üóù", "–õ—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–∞—Ç—å—Å—è –≤ –ø–ª–µ–Ω üè≥Ô∏è", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"}),
                state=MobState.save_yourself, flags=flags)
async def mob_hard_way_results(message: Message):
    await mongo_update_stat_new(message.from_user.id, 'mob_save_methods', value=message.text)

    s_all = await mongo_count_docs('database', 'statistics_new', {'mob_save_methods': {'$exists': True}})
    s_fork = await mongo_count_docs('database', 'statistics_new', {'mob_save_methods': "–õ—É—á—à–µ –≤ —Ç—é—Ä—å–º—É üóù"})
    s_chance = await mongo_count_docs('database', 'statistics_new',
                                   {'mob_save_methods': "–õ—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–∞—Ç—å—Å—è –≤ –ø–ª–µ–Ω üè≥Ô∏è"})
    s_idk = await mongo_count_docs('database', 'statistics_new',
                                   {'mob_save_methods': "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'mob_hard_way_results'}), s_all)
    txt.replace('AA', s_fork)
    txt.replace('BB', s_chance)
    txt.replace('CC', s_idk)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    nmarkup.row(KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ù–µ —Å—Ç–æ–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ", state=MobState.save_yourself, flags=flags)
async def mob_want_to_live_buffer(message: Message):
    await message.answer("–•–æ—Ä–æ—à–æ üëå")
    await mob_want_to_live(message)


@router.message(F.text == "–î–∞–≤–∞–π üëå", state=MobState.save_yourself, flags=flags)
async def mob_want_to_live(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_want_to_live'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üëå", state=MobState.save_yourself, flags=flags)
async def mob_want_to_live(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'mob_want_to_live'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ üëç"))
    nmarkup.add(KeyboardButton(text="–ü–æ–ª–µ–∑–Ω–æ, –Ω–æ —Å–∫—É—á–Ω–æ–≤–∞—Ç–æ ü§è"))
    nmarkup.row(KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–∏–ª(–∞) –æ—Ç–≤–µ—Ç—ã ü§î"))
    nmarkup.row(KeyboardButton(text="–°–∫—É—á–Ω–æ–≤–∞—Ç–æ, –¥–∞ –µ—â—ë –∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–ª–∏—Å—å üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ üëç", "–ü–æ–ª–µ–∑–Ω–æ, –Ω–æ —Å–∫—É—á–Ω–æ–≤–∞—Ç–æ ü§è",
                            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–∏–ª(–∞) –æ—Ç–≤–µ—Ç—ã ü§î",
                            "–°–∫—É—á–Ω–æ–≤–∞—Ç–æ, –¥–∞ –µ—â—ë –∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–ª–∏—Å—å üëé"}),
                state=MobState.save_yourself, flags=flags)
async def mob_feedback(message: Message, bot: Bot, state: FSMContext):
    await mongo_update_stat_new(message.from_user.id, 'mob_feedback', message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üôÇ")
    await mob_to_the_stopwar(message, bot, state)


@router.message(F.text.in_({"–ö–∞–∫–æ–π —É–∂–∞—Å! üò±", "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ"}), state=MobState.voenkomat_poll, flags=flags)
async def mob_to_the_stopwar(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(StopWarState.stopwar_how_and_when)
    await asyncio.sleep(1)
    await router.parent_router.feed_update(bot, fake_message(message.from_user, "–ü–ï–†–ï–•–û–î"))
