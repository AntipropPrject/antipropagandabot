from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from data_base.DBuse import sql_safe_select, mongo_count_docs
from filters.MapFilters import OperationWar
from states.true_goals_states import TrueGoalsState

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=TrueGoalsState)


@router.message((F.text.contains('–Ω—Ç–µ—Ä–µ—Å–Ω–æ')) | (F.text.contains('—Å–∫—É—á–Ω–æ')), flags=flags)
async def goals_war_point_now(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_war_point_now'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(OperationWar(answer='(–°–í–û)'), (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"),
                state=TrueGoalsState.before_shop, flags=flags)
async def goals_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop_operation)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.before_shop_operation, flags=flags)
async def goals_not_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_not_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ ü§ù"))
    nmarkup.add(types.KeyboardButton(text="*–ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ö–º—ã–∫–Ω—É—Ç—å* ü§®"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ü–æ–Ω—è—Ç–Ω–æ üëå')) | (F.text.contains('–î–∞, –≤—ã–π—Ç–∏ ‚¨áÔ∏è')), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_big_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.contains("–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î")), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_clear'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message((F.text.contains("–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä")), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    var_aims = dict()
    var_aims['‚ôªÔ∏è –°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ / –°–¥–µ–ª–∞—Ç—å –µ—ë –ª–æ—è–ª—å–Ω–æ–π –†–æ—Å—Å–∏–∏'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    var_aims['üíÇ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    var_aims['üìà –ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "—Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞"}})
    var_aims['üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ"}})
    var_aims['üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ"}})
    var_aims['ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"}})
    var_aims['üí£ –î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"}})
    var_aims['üó∫ –í–µ—Ä–Ω—É—Ç—å –†–æ—Å—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏ / –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥"}})
    var_aims['ü§Ø –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ / —è–¥–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ'] = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"}})
    for i in var_aims:
        print(i)

    a = dict(sorted(var_aims.items(), key=lambda x: x[1]))
    print(a)
