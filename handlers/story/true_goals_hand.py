from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from data_base.DBuse import poll_get, poll_write, del_key
from data_base.DBuse import sql_safe_select, mongo_count_docs
from filters.MapFilters import FakeGoals
from filters.MapFilters import OperationWar
from resources.all_polls import welc_message_one, true_and_idk_goals
from states.true_goals_states import TrueGoalsState

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=TrueGoalsState)
router.poll_answer.filter(state=TrueGoalsState)


@router.message((F.text.contains('–Ω—Ç–µ—Ä–µ—Å–Ω–æ')) | (F.text.contains('—Å–∫—É—á–Ω–æ')), state=TrueGoalsState.main, flags=flags)
async def goals_war_point_now(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_war_point_now'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(OperationWar(answer='(–°–í–û)'), (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"),
                state=TrueGoalsState.before_shop, flags=flags)
async def goals_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop_operation)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.before_shop_operation, flags=flags)
async def goals_not_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_not_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ ü§ù"))
    nmarkup.add(types.KeyboardButton(text="*–ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ö–º—ã–∫–Ω—É—Ç—å* ü§®"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ü–æ–Ω—è—Ç–Ω–æ üëå')) | (F.text.contains('–î–∞, –≤—ã–π—Ç–∏ ‚¨áÔ∏è')), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.more_goals)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_big_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î")), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_clear'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä")), state=TrueGoalsState.more_goals, flags=flags)
async def goals_sort_reveal(message: Message, state: FSMContext):
    var_aims = dict()
    pwr_ukr = await mongo_count_docs('database', 'statistics_new',
                                     {'war_aims_ex': {'$regex': "–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    nato = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    putins_reting = await mongo_count_docs('database', 'statistics_new',
                                           {'war_aims_ex': {'$regex': "—Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞"}})
    russians_donbass = await mongo_count_docs('database', 'statistics_new',
                                              {'war_aims_ex': {'$regex': "–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ"}})
    prevent_the_invasion = await mongo_count_docs('database', 'statistics_new',
                                                  {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ"}})
    denazification = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"}})
    demilitarization = await mongo_count_docs('database', 'statistics_new',
                                              {'war_aims_ex': {'$regex': "–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"}})
    unite_russian = await mongo_count_docs('database', 'statistics_new',
                                           {'war_aims_ex': {'$regex': "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥"}})
    secret_dev = await mongo_count_docs('database', 'statistics_new',
                                        {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"}})
    all_count = pwr_ukr + nato + putins_reting + russians_donbass + prevent_the_invasion + denazification + \
                demilitarization + unite_russian + secret_dev
    var_aims['‚úÖ ‚ôªÔ∏è –°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ / –°–¥–µ–ª–∞—Ç—å –µ—ë –ª–æ—è–ª—å–Ω–æ–π –†–æ—Å—Å–∏–∏'] = round(pwr_ukr / all_count * 100)
    var_aims['‚ùå üíÇ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ'] = round(nato / all_count * 100)
    var_aims['‚ùì üìà –ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞'] = round(putins_reting / all_count * 100)
    var_aims['‚ùå üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ'] = round(russians_donbass / all_count * 100)
    var_aims['‚ùå üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†'] = round(
        prevent_the_invasion / all_count * 100)
    var_aims['‚ùå ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤'] = round(denazification / all_count * 100)
    var_aims['‚ùå üí£ –î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏'] = round(demilitarization / all_count * 100)
    var_aims['‚ùì üó∫ –í–µ—Ä–Ω—É—Ç—å –†–æ—Å—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏ / –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥'] = round(
        unite_russian / all_count * 100)
    var_aims['‚ùå ü§Ø –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ / —è–¥–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ'] = round(
        secret_dev / all_count * 100)

    sorted_dict = dict(sorted(var_aims.items(), key=lambda x: x[1]))
    result_text = await sql_safe_select('text', 'texts', {'name': 'goals_sort_reveal'})
    result_text = result_text + '\n '
    for text, value in sorted_dict.items():
        result_text = result_text + (str(value) + '% ' + str(text[1:])) + '\n'  # str(text[:1]) + '  ‚Äî ' +
    await state.update_data(sorted_dict=sorted_dict)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ"))
    nmarkup.adjust(2)
    await state.set_state(TrueGoalsState.more_goals_2)
    await message.answer(result_text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î')) | (F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ')), state=TrueGoalsState.more_goals_2,
                flags=flags)
async def goals_no_truth_for_us(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_truth_for_us'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —Å–ª—ã—à–∞–ª(–∞) üëå"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª(–∞) ü§∑‚Äç‚ôÄÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∏ —Å–∞–º(–∞) —Ç–∞–∫ —Å—á–∏—Ç–∞—é üëç"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–î–∞, —Å–ª—ã—à–∞–ª(–∞) üëå") | F.text.contains("–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª(–∞) ü§∑‚Äç‚ôÄÔ∏è") |
                 F.text.contains("–î–∞, –∏ —Å–∞–º(–∞) —Ç–∞–∫ —Å—á–∏—Ç–∞—é üëç")),
                state=TrueGoalsState.more_goals_2, flags=flags)
async def goals_no_truth_for_us(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_cards_opened'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π! üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains("–î–∞–≤–∞–π! üëå"), state=TrueGoalsState.more_goals_2, flags=flags)
async def goals_no_truth_for_us(message: Message, state: FSMContext):
    data = await state.get_data()
    sorted_dict = data['sorted_dict']
    result_text = await sql_safe_select('text', 'texts', {'name': 'goals_sort_reveal'})
    result_text = result_text + '\n '
    for text, value in sorted_dict.items():
        result_text = result_text + (str(text[:1]) + '  ‚Äî ' + str(value) + '% ' + str(text[1:])) + '\n'
    await state.update_data(sorted_dict=sorted_dict)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É üëç"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É üëé"))
    nmarkup.row(types.KeyboardButton(text="–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.adjust(2, 2)
    await state.set_state(TrueGoalsState.more_goals)
    await message.answer(result_text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(FakeGoals(no_fakes_do_not_know=False),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_you_cool(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_you_cool'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(no_fakes_do_not_know=True),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_why_its_a_fraud(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_why_its_a_fraud'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§∑‚Äç‚ôÇÔ∏è', state=TrueGoalsState.more_goals, flags=flags)
async def goals_are_you_sure_conflict(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_are_you_sure_conflict'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(more_than_one=True),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_little_bet(message: Message, fake_goals_data: dict):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_little_bet'})
    if fake_goals_data['fake_goals_number'] > 1:
        text.replace('[agreed]', '—Ç–∞–∫–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏')
        text.replace('[claim]', '—ç—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã')
        text.replace('[is]', '—è–≤–ª—è—é—Ç—Å—è')
    else:
        text.replace('[agreed]', '—Ç–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–æ–π')
        text.replace('[claim]', '—ç—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞')
        text.replace('[is]', '—è–≤–ª—è–µ—Ç—Å—è')
    listtext = "\n".join(fake_goals_data['fake_goals'])
    text.replace('[REASONS_LIST]', listtext)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–∞—á–Ω—ë–º ü§ù"))
    if fake_goals_data['fake_goals_number'] != 6:
        nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –µ—â—ë —Ü–µ–ª–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(not_all_fakes=True), F.text == '–î–∞, –Ω–∞—á–Ω—ë–º ü§ù', state=TrueGoalsState.more_goals, flags=flags)
async def goals_lets_add_goals(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_lets_add_goals'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ–º üëâ', state=TrueGoalsState.more_goals, flags=flags)
async def goals_wait_a_minute(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_wait_a_minute'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º üëå"))
    nmarkup.row(types.KeyboardButton(text="–¢–æ—á–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º üëå', state=TrueGoalsState.more_goals, flags=flags)
async def goals_good_decision(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_good_decision'})
    await message.answer(text, disable_web_page_preview=True)
    await goals_lets_add_goals(message)


@router.message(F.text.contains('üéØ'), state=TrueGoalsState.more_goals, flags=flags)
async def goals_add_goals_poll(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.more_goals_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_add_goals_poll'})
    answers = list((set(welc_message_one) ^ set(true_and_idk_goals)) ^
                   set(await poll_get(f"Usrs: {message.from_user.id}: Start_answers: Invasion:")))
    for answer in answers:
        print(answer)
        await poll_write(f'Usrs: {message.from_user.id}: TrueGoals: FakeInvasion:', answer)
    await message.answer_poll(text, answers, allows_multiple_answers=True, is_anonymous=False)


@router.poll_answer(state=TrueGoalsState.more_goals_poll, flags=flags)
async def goals_answer(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    await state.set_state(TrueGoalsState.main)
    lst_answers = poll_answer.option_ids
    user_new_fake_list = await poll_get(f"Usrs: {poll_answer.user.id}: TrueGoals: FakeInvasion:")
    await del_key(f"Usrs: {poll_answer.user.id}: TrueGoals: FakeInvasion:")
    for index in lst_answers:
        print(index, user_new_fake_list[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:', user_new_fake_list[index])
    a = "\n".join((await poll_get(f"Usrs: {poll_answer.user.id}: Start_answers: Invasion:")))
    await bot.send_message(poll_answer.user.id, f'–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –∫–æ–Ω–µ—Ü. –ù—ã–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –≤–æ–π–Ω—ã:{a}')
