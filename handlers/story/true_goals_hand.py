import asyncio

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bata import all_data
from bot_statistics.stat import mongo_update_stat_new, mongo_update_stat
from data_base.DBuse import poll_get, poll_write, del_key, data_getter, mongo_game_answer, redis_delete_from_list
from data_base.DBuse import sql_safe_select, mongo_count_docs
from filters.MapFilters import FakeGoals, WarGoals
from filters.MapFilters import OperationWar
from handlers.story.donbass_hand import donbass_big_tragedy
from handlers.story.nato_hand import nato_start
from handlers.story.nazi_hand import NaziState, nazi_first_poll
from handlers.story.power_change_hand import goals_fact_1
from handlers.story.preventive_strike import prevent_strike_any_brutality
from keyboards.map_keys import polls_continue_kb
from resources.all_polls import welc_message_one
from resources.variables import mobilisation_date
from states.stopwar_states import StopWarState
from states.true_goals_states import TrueGoalsState, WarGoalsState
from utils.fakes import fake_message
from utilts import simple_media, CoolPercReplacer, get_time_from_war_started

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=(TrueGoalsState, WarGoalsState))
router.poll_answer.filter(state=TrueGoalsState)


@router.message((F.text.in_({"–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —Å–ª–µ–≥–∫–∞ –∑–∞—Ç—è–Ω—É—Ç–æ ü§è",
                             "–ì–¥–µ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –≥–¥–µ-—Ç–æ —Å–∫—É—á–Ω–æ üôÇ", "–î–æ–≤–æ–ª—å–Ω–æ —Å–∫—É—á–Ω–æ ü•±"})),
                state=TrueGoalsState.main, flags=flags)
async def goals_war_point_now(message: Message, state: FSMContext):
    await mongo_update_stat_new(message.from_user.id, "antip_final_reaction", value=message.text)
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_war_point_now'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(OperationWar(answer='(–°–í–û)'), (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"),
                state=TrueGoalsState.before_shop, flags=flags)
async def goals_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop_operation)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.before_shop_operation, flags=flags)
async def goals_not_operation(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.before_shop)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_not_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ ü§ù"))
    nmarkup.add(types.KeyboardButton(text="*–ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ö–º—ã–∫–Ω—É—Ç—å* ü§®"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ü–æ–Ω—è—Ç–Ω–æ...')) | (F.text.contains('–î–∞, –≤—ã–π—Ç–∏ ‚¨á')), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.more_goals)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_big_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–ò –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ? ü§î")), flags=flags)
async def goals_big_war(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_clear'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä"))
    await state.set_state(TrueGoalsState.more_goals_sort)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä")), state=TrueGoalsState.more_goals_sort, flags=flags)
async def goals_sort_reveal(message: Message, state: FSMContext):
    var_aims = dict()
    pwr_ukr = await mongo_count_docs('database', 'statistics_new',
                                     {'war_aims_ex': {'$regex': "–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    nato = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"}})
    putins_reting = await mongo_count_docs('database', 'statistics_new',
                                           {'war_aims_ex': {'$regex': "—Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞"}})
    russians_donbass = await mongo_count_docs('database', 'statistics_new',
                                              {'war_aims_ex': {'$regex': "–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ"}})
    prevent_the_invasion = await mongo_count_docs('database', 'statistics_new',
                                                  {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ"}})
    denazification = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$regex': "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"}})
    demilitarization = await mongo_count_docs('database', 'statistics_new',
                                              {'war_aims_ex': {'$regex': "–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"}})
    unite_russian = await mongo_count_docs('database', 'statistics_new',
                                           {'war_aims_ex': {'$regex': "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥"}})
    secret_dev = await mongo_count_docs('database', 'statistics_new',
                                        {'war_aims_ex': {'$regex': "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"}})

    all_count = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    var_aims['‚úÖ ' + welc_message_one[4]] = round(pwr_ukr / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[5]] = round(nato / all_count * 100)
    var_aims['‚ùì ' + welc_message_one[6]] = round(putins_reting / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[0]] = round(russians_donbass / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[1]] = round(prevent_the_invasion / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[2]] = round(denazification / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[3]] = round(demilitarization / all_count * 100)
    var_aims['‚ùì ' + welc_message_one[7]] = round(unite_russian / all_count * 100)
    var_aims['‚ùå ' + welc_message_one[8]] = round(secret_dev / all_count * 100)

    sorted_dict = dict(sorted(var_aims.items(), key=lambda x: x[1], reverse=True))

    result_text = await sql_safe_select('text', 'texts', {'name': 'goals_sort_hided'})
    result_text = result_text + '\n\n'
    for text, value in sorted_dict.items():
        result_text = result_text + (str(value) + '% ' + str(text[1:])) + '\n'  # str(text[:1]) + '  ‚Äî ' +
    await state.update_data(sorted_dict=sorted_dict)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ"))
    nmarkup.adjust(2)
    await state.set_state(TrueGoalsState.more_goals_no_truth)
    await message.answer(result_text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î')) | (F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ')),
                state=TrueGoalsState.more_goals_no_truth,
                flags=flags)
async def goals_no_truth_for_us(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_truth_for_us'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —Å–ª—ã—à–∞–ª(–∞) üëå"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª(–∞) ü§∑‚Äç‚ôÄÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∏ —Å–∞–º(–∞) —Ç–∞–∫ —Å—á–∏—Ç–∞—é üëç"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains("–î–∞, —Å–ª—ã—à–∞–ª(–∞) üëå") | F.text.contains("–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª(–∞) ü§∑‚Äç‚ôÄÔ∏è") |
                 F.text.contains("–î–∞, –∏ —Å–∞–º(–∞) —Ç–∞–∫ —Å—á–∏—Ç–∞—é üëç")),
                state=TrueGoalsState.more_goals_no_truth, flags=flags)
async def goals_no_truth_for_us(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_cards_opened'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π! üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains("–î–∞–≤–∞–π! üëå"), state=TrueGoalsState.more_goals_no_truth, flags=flags)
async def goals_no_truth_for_us(message: Message, state: FSMContext):
    data = await state.get_data()
    sorted_dict = data['sorted_dict']
    result_text = await sql_safe_select('text', 'texts', {'name': 'goals_sort_reveal'})
    result_text = result_text + '\n'
    for text, value in sorted_dict.items():
        result_text = result_text + (str(text[:1]) + '  ‚Äî ' + str(value) + '% ' + str(text[1:])) + '\n'
    await state.update_data(sorted_dict=sorted_dict)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É üëç"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É üëé"))
    nmarkup.row(types.KeyboardButton(text="–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.adjust(2, 2)
    await state.set_state(TrueGoalsState.more_goals)
    await message.answer(result_text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(FakeGoals(no_fakes_do_not_know=False),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_you_cool(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_you_cool'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(no_fakes_do_not_know=True),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_why_its_a_fraud(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_why_its_a_fraud'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§∑‚Äç‚ôÇÔ∏è', state=TrueGoalsState.more_goals, flags=flags)
async def goals_are_you_sure_conflict(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_are_you_sure_conflict'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(more_than_one=True),
                (F.text.contains('–æ—Ö–æ–∂–µ')) | (F.text == '–û–±—ä—è—Å–Ω–∏-–∫–∞ ü§î') | (F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_little_bet(message: Message, fake_goals_data: dict):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_little_bet'})
    if fake_goals_data['fake_goals_number'] > 1:
        text = text.replace('[agreed]', '—Ç–∞–∫–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏')
        text = text.replace('[claim]', '—ç—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã')
        text = text.replace('[is]', '—è–≤–ª—è—é—Ç—Å—è')
    else:
        text = text.replace('[agreed]', '—Ç–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–æ–π')
        text = text.replace('[claim]', '—ç—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞')
        text = text.replace('[is]', '—è–≤–ª—è–µ—Ç—Å—è')
    listtext = "\n".join(fake_goals_data['fake_goals'])
    text = text.replace('[REASONS_LIST]', listtext)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–∞—á–Ω—ë–º ü§ù"))
    if fake_goals_data['fake_goals_number'] != 6:
        nmarkup.row(types.KeyboardButton(text="–î–∞, –Ω–æ –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –µ—â—ë —Ü–µ–ª–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FakeGoals(not_all_fakes=True), F.text == '–î–∞, –Ω–∞—á–Ω—ë–º ü§ù', state=TrueGoalsState.more_goals, flags=flags)
async def goals_lets_add_goals(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.more_goals_next)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_lets_add_goals'})
    not_checked_fakes = await poll_get(f'Usrs: {message.from_user.id}: TrueGoals: NotChosenFakeGoals:')
    listtext = "\n".join(not_checked_fakes)
    text = text.replace('[REASONS_LIST]', listtext)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º üéØ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ–º üëâ', state=TrueGoalsState.more_goals, flags=flags)
async def goals_wait_a_minute(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_wait_a_minute'})
    listtext = "\n".join(await poll_get(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:'))
    text = text.replace('[REASONS_LIST]', listtext)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º üëå"))
    nmarkup.row(types.KeyboardButton(text="–¢–æ—á–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º üëå', state=TrueGoalsState.more_goals, flags=flags)
async def goals_good_decision(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_good_decision'})
    await message.answer(text, disable_web_page_preview=True)
    await goals_lets_add_goals(message, state)


@router.message(F.text.contains('üéØ'), state=(TrueGoalsState.more_goals, TrueGoalsState.more_goals_next), flags=flags)
async def goals_add_goals_poll(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.more_goals_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_add_goals_poll'})
    answers = await poll_get(f'Usrs: {message.from_user.id}: TrueGoals: NotChosenFakeGoals:')
    answers.append('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞). –ù–µ —Ö–æ—á—É –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ.')
    await message.answer_poll(text, answers, allows_multiple_answers=True, is_anonymous=False,
                              reply_markup=polls_continue_kb())


@router.poll_answer(state=TrueGoalsState.more_goals_poll, flags=flags)
@router.message(F.text == '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ', state=TrueGoalsState.more_goals_next, flags=flags)
@router.message(F.text == '–î–∞, –Ω–∞—á–Ω—ë–º ü§ù', state=TrueGoalsState.more_goals, flags=flags)
async def goals_answer(update: types.PollAnswer | Message, bot: Bot, state: FSMContext):
    await state.set_state(WarGoalsState.main)
    if isinstance(update, types.PollAnswer):
        user = update.user
        lst_answers = update.option_ids
        user_new_fake_list = await poll_get(f"Usrs: {user.id}: TrueGoals: NotChosenFakeGoals:")
        user_new_fake_list.append('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞). –ù–µ —Ö–æ—á—É –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ.')
        for index in lst_answers:
            if user_new_fake_list[index] != '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞). –ù–µ —Ö–æ—á—É –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ.':
                await poll_write(f'Usrs: {user.id}: TrueGoals: UserFakeGoals:', user_new_fake_list[index])
    else:
        user = update.from_user
    await del_key(f"Usrs: {user.id}: TrueGoals: NotChosenFakeGoals:")
    await bot.send_message(user.id, await sql_safe_select('text', 'texts', {'name': 'goals_answer'}))
    await asyncio.sleep(all_data().THROTTLE_TIME)
    await router.parent_router.feed_update(bot, fake_message(user, "–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø"))


@router.message(WarGoals(goal=welc_message_one[0]), ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text == "–ö–Ω–æ–ø–∫–∞")),
                state=WarGoalsState, flags=flags)
async def goals_donbas_start(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.donbas_enter)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[0])
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    donbass = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[0]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_donbas_start'}), g_all)
    txt.replace('XX', donbass)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º üë™'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    nmarkup.adjust(2)
    await simple_media(message, 'goals_donbas_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"), state=WarGoalsState.donbas_enter, flags=flags)
async def goals_pls_use_goal(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_pls_use_goal'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º üë™'))
    nmarkup.row(types.KeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains("üë™")), state=WarGoalsState.donbas_enter, flags=flags)
async def goals_donbas_enterence(message: Message, state: FSMContext):
    # await mongo_update_stat_new(tg_id=message.from_user.id, column='prevent_strike_start', value='–î–∞')
    await donbass_big_tragedy(message, state)


@router.message(WarGoals(goal=welc_message_one[1]), ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text == "–ö–Ω–æ–ø–∫–∞") |
                                                     (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå")), state=WarGoalsState, flags=flags)
async def goals_preventive_start(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.preventive_enter)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[1])
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    prevent = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[1]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_preventive_start'}), g_all)
    txt.replace('XX', prevent)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º üõ°'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    nmarkup.adjust(2)
    await simple_media(message, 'goals_preventive_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"), state=WarGoalsState.preventive_enter, flags=flags)
async def goals_pls_use_goal_prev(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_pls_use_goal'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º üõ°'))
    nmarkup.row(types.KeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains("üõ°")), state=WarGoalsState.preventive_enter, flags=flags)
async def goals_preventive_enterence(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='prevent_strike_start', value='–î–∞')
    await prevent_strike_any_brutality(message, state)


@router.message(WarGoals(goal=welc_message_one[2]), ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text == "–ö–Ω–æ–ø–∫–∞")) |
                (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"), state=WarGoalsState, flags=flags)
async def goals_nazi_start(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[2])
    await state.set_state(WarGoalsState.nazi_enter)
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    nazi = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[2]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_nazi_start'}), g_all)
    txt.replace('XX', nazi)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º üôã‚Äç‚ôÇÔ∏è'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await simple_media(message, 'goals_nazi_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"), state=WarGoalsState.nazi_enter, flags=flags)
async def goals_pls_use_goal_nazi(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_pls_use_goal'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º üôã‚Äç‚ôÇÔ∏è'))
    nmarkup.row(types.KeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains("üôã‚Äç‚ôÇÔ∏è")), state=WarGoalsState.nazi_enter, flags=flags)
async def goals_nazi_enterence(message: Message, state: FSMContext):
    await state.set_state(NaziState.first_poll)
    await nazi_first_poll(message)


@router.message(WarGoals(goal=welc_message_one[3]),
                ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text.in_({"–ö–Ω–æ–ø–∫–∞"})) | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå")),
                state=WarGoalsState, flags=flags)
async def goals_demilitari_start(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.demilitari)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[3])
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    demil = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[3]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_demilitari_start'}), g_all)
    txt.replace('XX', demil)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û üõ°'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üí•'))
    nmarkup.row(types.KeyboardButton(text='–ò–º –Ω–∞–≤–µ—Ä—Ö—É –≤–∏–¥–Ω–µ–µ ü§î'))
    nmarkup.add(types.KeyboardButton(text='–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è'))
    nmarkup.row(types.KeyboardButton(text='–î—É–º–∞—é –æ–Ω —Ö–æ—Ç–µ–ª, –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–æ–±–æ—Ä–æ—Ç ü§∑‚Äç‚ôÇÔ∏è'))
    await simple_media(message, 'goals_demilitari_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message(((F.text.contains("ü§∑‚Äç")) | F.text.contains("–≤–∏–¥–Ω–µ–µ ü§î")),
                state=WarGoalsState.demilitari, flags=flags)
async def goals_noone_remember(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_noone_remember'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û üõ°"),
                state=WarGoalsState.demilitari, flags=flags)
async def goals_demilitari_NATO(message: Message):
    await poll_write(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[5])
    text = await sql_safe_select('text', 'texts', {'name': 'goals_demilitari_NATO'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üí•"),
                state=WarGoalsState.demilitari, flags=flags)
async def goals_demilitari_nukes(message: Message):
    await poll_write(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[8])
    text = await sql_safe_select('text', 'texts', {'name': 'goals_demilitari_nukes'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WarGoals(goal=welc_message_one[5]),
                ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text.in_({"–ö–Ω–æ–ø–∫–∞", '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'}))),
                state=WarGoalsState, flags=flags)
async def goals_NATO_start(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.nato)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[5])
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    nato = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[5]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_NATO_start'}), g_all)
    txt.replace('XX', nato)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º üíÇ'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await simple_media(message, 'goals_NATO_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"), state=WarGoalsState.nato, flags=flags)
async def goals_pls_use_goal_nazi(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_pls_use_goal'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º üíÇ'))
    nmarkup.row(types.KeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains("üíÇ")), state=WarGoalsState.nato, flags=flags)
async def goals_nazi_enterence(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–Ω–æ–ø–∫–∞'))
    await nato_start(message, state)


@router.message(WarGoals(goal=welc_message_one[8]),
                ((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text.in_({"–ö–Ω–æ–ø–∫–∞", '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'}))),
                state=WarGoalsState, flags=flags)
async def goals_bio_start(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.bio)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: TrueGoals: UserFakeGoals:', welc_message_one[8])
    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    bio = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[8]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'goals_bio_start'}), g_all)
    txt.replace('XX', bio)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º ü§Ø'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await simple_media(message, 'goals_bio_start', nmarkup.as_markup(resize_keyboard=True), txt())


@router.message((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"), state=WarGoalsState.bio, flags=flags)
async def goals_pls_use_goal_nazi(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_pls_use_goal'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º ü§Ø'))
    nmarkup.row(types.KeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains("ü§Ø")), state=WarGoalsState.bio, flags=flags)
async def goals_nazi_enterence(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_will_add_bio_sorry'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–Ω–æ–ø–∫–∞'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text.contains("–£–≤–µ—Ä–µ–Ω(–∞), –ø—Ä–æ–ø")) | (F.text.in_({"–ö–Ω–æ–ø–∫–∞", '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'}))),
                state=WarGoalsState, flags=flags)
@router.message((F.text.contains("–ø—Ä–æ–¥–æ–ª–∂–∏–º")) | (F.text.contains("–ø—Ä–æ–ø—É—Å—Ç–∏–º")),
                state=TrueGoalsState.more_goals, flags=flags)
async def goals_normal_game_start(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.normal_game)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_normal_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω—ë–º! üöÄ'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è'))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–∞—á–Ω—ë–º! üöÄ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ")), state=TrueGoalsState.normal_game,
                flags=flags)
async def goals_normal_game_question(message: Message, state: FSMContext):
    if '–ù–∞—á–Ω—ë–º! üöÄ' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats',
                                    value='–ù–∞—á–∞–ª–∏ –∏ –ù–ï –∑–∞–∫–æ–Ω—á–∏–ª–∏')
    try:
        count = (await state.get_data())['ngamecount']
    except Exception:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.normal_game"))[0][0]
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter("SELECT * FROM (SELECT t_id, text, belivers, nonbelivers, rebuttal, "
                                        " ROW_NUMBER () OVER (ORDER BY id)"
                                        "FROM normal_game "
                                        "left outer join assets on asset_name = assets.name "
                                        "left outer join texts ON text_name = texts.name)"
                                        f"AS sub WHERE row_number = {count}"))[0]
        await state.update_data(ngamecount=count, belive=truth_data[2], not_belive=truth_data[3])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è"))
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå"))
        nmarkup.adjust(2)
        if truth_data[0] is not None:
            capt = ""
            if truth_data[1] is not None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'{truth_data[1]}', reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats', value='–ù–∞—á–∞–ª–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏')
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù"))
        await message.answer(
            "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è") | (F.text == "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå")), state=TrueGoalsState.normal_game,
                flags=flags)
async def goals_normal_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    END = bool(data['ngamecount'] == (await data_getter('SELECT COUNT(id) FROM public.normal_game'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º üôÖ"))
    else:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù"))
    answer_group = str()
    if message.text == "–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è":
        answer_group = 'belivers'
    elif message.text == "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå":
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'normal_game', data['ngamecount'],
                            answer_group, {'id': data['ngamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    await message.answer(
        f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\nü§¶‚Äç‚ôÇÔ∏è –≠—Ç–æ –∞–±—Å—É—Ä–¥: {round(t_percentage * 100)}%'
        f'\nüëå –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ: {round(100 - t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer("–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù",
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text.contains("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ,")) | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù") | (F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è')),
                state=TrueGoalsState.normal_game, flags=flags)
async def goals_I_love_absurd(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_I_love_absurd'})
    if '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É' in message.text:
        await message.answer('–•–æ—Ä–æ—à–æ')
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats', value='–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏')
    await state.set_state(TrueGoalsState.absurd)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç–∏ ü™Ñ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç–∏ ü™Ñ", state=TrueGoalsState.absurd, flags=flags)
async def goals_read_this_thing(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_read_this_thing'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ó–∞–±–∞–≤–Ω–æ üôÇ"))
    nmarkup.add(types.KeyboardButton(text="–ì—Ä—É—Å—Ç–Ω–æ üòî"))
    nmarkup.row(types.KeyboardButton(text="–û–¥–Ω–æ–±–æ–∫–æ üëé"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–ó–∞–±–∞–≤–Ω–æ üôÇ", "–ì—Ä—É—Å—Ç–Ω–æ üòî", "–û–¥–Ω–æ–±–æ–∫–æ üëé", "–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"}),
                state=TrueGoalsState.absurd, flags=flags)
async def goals_no_conspirasy(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='goals_absurd_summary',
                                value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_conspirasy'})

    a_all = await mongo_count_docs('database', 'statistics_new', {'goals_absurd_summary': {'$exists': True}})
    a_funny = await mongo_count_docs('database', 'statistics_new', {'goals_absurd_summary': "–ó–∞–±–∞–≤–Ω–æ üôÇ"})
    a_sad = await mongo_count_docs('database', 'statistics_new', {'goals_absurd_summary': "–ì—Ä—É—Å—Ç–Ω–æ üòî"})
    a_bok = await mongo_count_docs('database', 'statistics_new', {'goals_absurd_summary': "–û–¥–Ω–æ–±–æ–∫–æ üëé"})
    a_plain = await mongo_count_docs('database', 'statistics_new', {'goals_absurd_summary': "–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})

    txt = CoolPercReplacer(text, a_all)
    txt.replace("AA", a_funny)
    txt.replace("BB", a_sad)
    txt.replace("CC", a_bok)
    txt.replace("DD", a_plain)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º üëå"))
    nmarkup.add(types.KeyboardButton(text="–¢–∞–∫ –≤–æ–π–Ω—É –∏–ª–∏ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é? ü§î"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º üëå", "–¢–∞–∫ –≤–æ–π–Ω—É –∏–ª–∏ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é? ü§î"}),
                state=TrueGoalsState.absurd, flags=flags)
async def goals_such_plan_so(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_such_plan_so'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.absurd, flags=flags)
async def goals_change_of_power(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.power_change)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_change_of_power'})

    g_all = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': {'$exists': True}})
    change_power = await mongo_count_docs('database', 'statistics_new', {'war_aims_ex': welc_message_one[4]})
    try:
        XX = change_power / g_all * 100
        text = text.replace('XX', round(XX))
    except Exception:
        text = text.replace('XX', 'N/A')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∑–≥–ª—è–Ω–µ–º –Ω–∞ —Ñ–∞–∫—Ç—ã üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–Ω–∞ —Ñ–∞–∫—Ç—ã üëÄ')), state=TrueGoalsState.power_change, flags=flags)
async def goals_will_add_sorry(message: Message, state: FSMContext):
    await goals_fact_1(message, state)


@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º üëâ", state=TrueGoalsState.power_change, flags=flags)
async def goals_sure_power_change(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_sure_power_change'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í—Å—ë-—Ç–∞–∫–∏ –≤–∑–≥–ª—è–Ω–µ–º –Ω–∞ —Ñ–∞–∫—Ç—ã üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–∫—Ç–æ–≤ ‚úã", state=TrueGoalsState, flags=flags)
@router.message(F.text == "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå", state=TrueGoalsState.goals_fact_7, flags=flags)
@router.message(F.text == "–î–∞, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëâ", state=TrueGoalsState.power_change, flags=flags)
async def goals_why_power_change(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.power_change)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_why_power_change'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ", state=TrueGoalsState.power_change, flags=flags)
async def goals_paper_theses(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_paper_theses'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î"))
    nmarkup.add(types.KeyboardButton(text="–°—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, –±–ª–∏–∂–µ –∫ –¥–µ–ª—É üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î", state=TrueGoalsState.power_change, flags=flags)
async def goals_russian_world_nazi(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media(message, 'goals_russian_world_nazi', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫", "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})) | (F.text == "–≠—Ç–æ –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ") |
                (F.text == "–°—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, –±–ª–∏–∂–µ –∫ –¥–µ–ª—É üëâ"), state=TrueGoalsState.power_change, flags=flags)
async def goals_why_he_is_continued(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.putin)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_why_he_is_continued'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏! –ê –ø–æ—á–µ–º—É –ü—É—Ç–∏–Ω —Ä–µ—à–∏–ª –Ω–∞–ø–∞—Å—Ç—å –∏–º–µ–Ω–Ω–æ –≤ —Ñ–µ–≤—Ä–∞–ª–µ 2022? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü–æ–¥–æ–∂–¥–∏! –ê –ø–æ—á–µ–º—É –ü—É—Ç–∏–Ω —Ä–µ—à–∏–ª –Ω–∞–ø–∞—Å—Ç—å –∏–º–µ–Ω–Ω–æ –≤ —Ñ–µ–≤—Ä–∞–ª–µ 2022? ü§î",
                state=TrueGoalsState.putin, flags=flags)
async def goals_best_moment(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_best_moment'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–î–∞–≤–∞–π üëå") | (F.text == '–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå')), state=TrueGoalsState.putin, flags=flags)
async def goals_would_you_putin(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_would_you_putin'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.add(types.KeyboardButton(text="–°—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.putin, flags=flags)
async def goals_dirt_waves(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.putin_next)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.add(types.KeyboardButton(text="–°—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await simple_media(message, 'goals_dirt_waves', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=TrueGoalsState.putin_next, flags=flags)
async def goals_putin_plan_continued(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await simple_media(message, 'goals_putin_plan_continued', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–°—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ'),
                state=(TrueGoalsState.putin_next, TrueGoalsState.putin), flags=flags)
@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", state=TrueGoalsState.putin_next, flags=flags)
async def goals_putin_face(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.putin_next)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º..."))
    await simple_media(message, 'goals_putin_face', nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º...", state=TrueGoalsState.putin_next, flags=flags)
async def goals_mobilisation(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_mobilisation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å ü§î"))
    await simple_media(message, 'goals_mobilisation', nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å ü§î", state=TrueGoalsState.putin_next, flags=flags)
async def goals_how_many_mobs(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_how_many_mobs'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û–∫–æ–ª–æ 300 —Ç—ã—Å—è—á, –∫–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ üëå"))
    nmarkup.row(types.KeyboardButton(text="–ú–µ–Ω—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üîª"))
    nmarkup.add(types.KeyboardButton(text="–ë–æ–ª—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üî∫"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–û–∫–æ–ª–æ 300 —Ç—ã—Å—è—á, –∫–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ üëå", "–ú–µ–Ω—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üîª",
                             "–ë–æ–ª—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üî∫", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})),
                state=TrueGoalsState.putin_next, flags=flags)
async def goals_how_many_mobs_result(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.putin_next_next)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='goals_many_mobs', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_how_many_mobs_result'})

    m_all = await mongo_count_docs('database', 'statistics_new', {'goals_many_mobs': {'$exists': True}})
    m_300 = await mongo_count_docs('database', 'statistics_new',
                                   {'goals_many_mobs': "–û–∫–æ–ª–æ 300 —Ç—ã—Å—è—á, –∫–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ üëå"})
    m_less = await mongo_count_docs('database', 'statistics_new',
                                    {'goals_many_mobs': "–ú–µ–Ω—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üîª"})
    m_more = await mongo_count_docs('database', 'statistics_new', {'goals_many_mobs': "–ë–æ–ª—å—à–µ 300 —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ üî∫"})
    m_idk = await mongo_count_docs('database', 'statistics_new', {'goals_many_mobs': "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})

    txt = CoolPercReplacer(text, m_all)
    txt.replace("AA", m_300)
    txt.replace("BB", m_less)
    txt.replace("CC", m_more)
    txt.replace("DD", m_idk)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üìä"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üìä", state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_more_than_300(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await simple_media(message, 'goals_more_than_300', nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text == "–î–∞–≤–∞–π üëå", state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_agreed_to_die(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_agreed_to_die'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—É ‚öîÔ∏è"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—ã ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–î–∞, –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—É ‚öîÔ∏è", "–ù–µ—Ç, –Ω–µ –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—ã ü§∑‚Äç‚ôÇÔ∏è",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î"})), state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_agreed_to_die_result(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='goals_mobilisation_terror', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_agreed_to_die_result'})

    terr_all = await mongo_count_docs('database', 'statistics_new', {'goals_mobilisation_terror': {'$exists': True}})
    terr_yes = await mongo_count_docs('database', 'statistics_new',
                                      {'goals_mobilisation_terror': "–î–∞, –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—É ‚öîÔ∏è"})
    terr_no = await mongo_count_docs('database', 'statistics_new',
                                     {'goals_mobilisation_terror': "–ù–µ—Ç, –Ω–µ –æ—â—É—â–∞—é —É–≥—Ä–æ–∑—ã ü§∑‚Äç‚ôÇÔ∏è"})
    terr_idk = await mongo_count_docs('database', 'statistics_new',
                                      {'goals_mobilisation_terror': "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î"})

    txt = CoolPercReplacer(text, terr_all)
    txt.replace("AA", terr_yes)
    txt.replace("BB", terr_no)
    txt.replace("CC", terr_idk)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ —Ç–æ—á–Ω–æ üëå"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–≠—Ç–æ —Ç–æ—á–Ω–æ üëå", "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})), state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_politics_is_here(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_politics_is_here'})

    who_love_all = await mongo_count_docs('database', 'statistics_new', {'prop_ex': {"$exists": True}})
    who_love_putin_now = await mongo_count_docs('database', 'statistics_new', {'prop_ex': "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω"})
    txt = CoolPercReplacer(text, who_love_all)
    txt.replace("XX", who_love_putin_now)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? ü§î"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? ü§î", state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_putin_in_the_past(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_putin_in_the_past'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò –ø—Ä–∞–≤–¥–∞, –Ω–µ –º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–¥–∞, –ü—É—Ç–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–µ—â–∞–Ω–∏—è ‚òùÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–¥–∞, –ü—É—Ç–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–µ—â–∞–Ω–∏—è ‚òùÔ∏è",
                state=TrueGoalsState.putin_next_next, flags=flags)
async def goals_gifted_cat(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_gifted_cat'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå") | (F.text == "–ò –ø—Ä–∞–≤–¥–∞, –Ω–µ –º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å ü§∑‚Äç‚ôÇÔ∏è")),
                state=TrueGoalsState.putin_next_next, flags=flags)
async def putin_gaming(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.putin_gaming)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='started_putin_old_lies', value='–î–∞')
    text = await sql_safe_select('text', 'texts', {'name': 'goals_putin_old_lies_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤(–∞) üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–Ø –≥–æ—Ç–æ–≤(–∞) üëå") | (F.text == "–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üëâ")),
                state=TrueGoalsState.putin_gaming, flags=flags)
async def putin_game2_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['pgamecount']
    except Exception:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.putin_old_lies"))[0][0]
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter("SELECT * FROM (SELECT t_id, text, belivers, nonbelivers, rebuttal, "
                                        "row_number() over (order by id) FROM public.putin_old_lies "
                                        "left outer join assets on asset_name = assets.name "
                                        f"left outer join texts ON text_name = texts.name) as subb "
                                        f"where row_number = {count}"))[0]
        await state.update_data(pgamecount=count, belive=truth_data[2], not_belive=truth_data[3])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.add(types.KeyboardButton(text="–í–∏–Ω–æ–≤–∞—Ç üëé"))
        nmarkup.add(types.KeyboardButton(text="–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç"))
        if truth_data[0] is not None:
            capt = ""
            if truth_data[1] is not None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'–í–æ—Ç —á—Ç–æ –æ–±–µ—â–∞–ª –ü—É—Ç–∏–Ω:\n\n{truth_data[1]}',
                                 reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ"))
        await message.answer(
            "–ë–æ—é—Å—å, —á—Ç–æ –ø–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã. –Ø –ø–æ–∏—â—É –µ—â–µ, –∞ –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç") | (F.text == "–í–∏–Ω–æ–≤–∞—Ç üëé")), state=TrueGoalsState.putin_gaming,
                flags=flags)
async def putin_game2_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_group = str()
    END = bool(data['pgamecount'] == (await data_getter('SELECT COUNT(id) FROM public.putin_old_lies'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"))
    else:
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π ü§ù"))
    if message.text == "–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç":
        answer_group = 'belivers'
    elif message.text == "–í–∏–Ω–æ–≤–∞—Ç üëé":
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'putin_old_lies', data['pgamecount'],
                            answer_group, {'id': data['pgamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    await message.answer(
        f'–ê –≤–æ—Ç —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n'
        f'üëé <b>–í–∏–Ω–æ–≤–∞—Ç</b>: {round((100 - t_percentage * 100))}% \nüëç <b>–ù–µ –≤–∏–Ω–æ–≤–∞—Ç</b>: {round(t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏.')


@router.message((F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"), state=TrueGoalsState.putin_gaming, flags=flags)
async def putin_game2_are_you_sure(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –£ –º–µ–Ω—è –µ—â–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è") | (F.text == "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ") |
                 (F.text == "–î–∞–≤–∞–π ü§ù")), state=TrueGoalsState.putin_gaming, flags=flags)
async def goals_putin_why_still_belive(message: Message, state: FSMContext):
    await state.clear()
    await mongo_update_stat(message.from_user.id, 'putin')
    await state.set_state(TrueGoalsState.final)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_putin_why_still_belive'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ üëå"))
    nmarkup.row(types.KeyboardButton(text="–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–†–∞—Å—Å–∫–∞–∂–∏ üëå"), state=TrueGoalsState.final, flags=flags)
async def goals_bad_tzar_bad(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_bad_tzar_bad'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π ü™ñ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–î–∞–≤–∞–π ü™ñ") | (F.text == "–ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º üëâ")), state=TrueGoalsState.final,
                flags=flags)
async def goals_putin_not_a_sport(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_putin_not_a_sport'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? ü§î"), state=TrueGoalsState.final, flags=flags)
async def goals_no_winners_in_war(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'goals_no_winners_in_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.row(types.KeyboardButton(text="–ê —á—Ç–æ, –ü—É—Ç–∏–Ω —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–ª? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –≤–µ—Ä—é / –î–æ–∫–∞–∂–∏ ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–µ –≤–µ—Ä—é / –î–æ–∫–∞–∂–∏ ü§î"), state=TrueGoalsState.final, flags=flags)
async def goals_wars_of_past(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await simple_media(message, 'goals_wars_of_past', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥", "–ê —á—Ç–æ, –ü—É—Ç–∏–Ω —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–ª? ü§î", "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"})),
                state=TrueGoalsState.final, flags=flags)
async def goals_russia_already_lost(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='goals_final_result', value=message.text)
    await state.set_state(StopWarState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'goals_russia_already_lost'})
    day = await get_time_from_war_started()
    text = text.replace("AA", f"{day}")
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏ üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
