from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bot_statistics.stat import mongo_update_stat, mongo_update_stat_new
from data_base.DBuse import poll_write, sql_safe_select, mongo_add, mongo_select, redis_just_one_write, mongo_count_stats
from handlers.story.anti_prop_hand import antip_wolves
from resources.all_polls import web_prop, welc_message_one, people_prop
from resources.variables import release_date
from states import welcome_states
from states.antiprop_states import propaganda_victim
from utilts import CoolPercReplacer

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=welcome_states.start_dialog)


@router.message(text_contains='–ì–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëå', flags=flags)
async def message_2(message: types.Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='first_button', value='–ù–∞—á–Ω–µ–º')
    # –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞"))
    markup.row(types.KeyboardButton(text="–°–µ–π—á–∞—Å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ "
                                         "–≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ. –í–¥—Ä—É–≥ –≤—ã –∏–∑ –§–°–ë? ü§ê"))
    text = await sql_safe_select("text", "texts", {"name": "start_what_about_you"})

    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    # if –Ω–∞ —Ç—ã
    await state.set_state(welcome_states.start_dialog.dialogue_4)


@router.message(welcome_states.start_dialog.dialogue_4,
                ((F.text == '1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)') | (F.text == "2Ô∏è‚É£ –í–æ–π–Ω–∞")),
                flags=flags)
async def start_lets_start(message: types.Message, state: FSMContext):  # –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Is_it_war:', message.text)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='war_or_not', value=message.text)

    all_count = await mongo_count_stats('statistics_new', {'war_or_not': {'$exists': True}})
    war = await mongo_count_stats('statistics_new', {'war_or_not': '2Ô∏è‚É£ –í–æ–π–Ω–∞'})
    not_war = await mongo_count_stats('statistics_new',
                                      {'war_or_not': '1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)'})
    FSB_not_war = await mongo_count_stats('statistics_new',
                                          {'FSB': "–î–∞", 'war_or_not': '1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)'})
    FSB_war = await mongo_count_stats('statistics_new', {'FSB': "–î–∞", 'war_or_not': '2Ô∏è‚É£ –í–æ–π–Ω–∞'})

    text = await sql_safe_select("text", "texts", {"name": "start_lets_start"})
    if '(–°–í–û)' in message.text:
        text = text.replace('[WAR_TERMIN]', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏')
    else:
        text = text.replace('[WAR_TERMIN]', '–≤–æ–π–Ω–µ')

    txt = CoolPercReplacer(text, all_count)
    txt.replace('XX', not_war)
    txt.replace('YY', war)
    txt.replace('AA', FSB_not_war, temp_base=not_war)
    txt.replace('BB', FSB_war, temp_base=war)
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    markup.row(types.KeyboardButton(text="–°—Ç–æ–ø! –ü—Ä–∞–≤–∏–ª—å–Ω–æ ¬´–≤ –£–∫—Ä–∞–∏–Ω–µ¬ª! ‚òùÔ∏è"))
    await state.update_data(answer_1=message.text)
    await message.answer(txt(), reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message(welcome_states.start_dialog.dialogue_5, (F.text == "–°—Ç–æ–ø! –ü—Ä–∞–≤–∏–ª—å–Ω–æ ¬´–≤ –£–∫—Ä–∞–∏–Ω–µ¬ª! ‚òùÔ∏è"), flags=flags)
async def start_lets_start_stop(message: types.Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='on_ucraine_or_not', value='–î–∞')
    text = await sql_safe_select("text", "texts", {"name": "start_is_it_correct"})
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    markup.add(types.KeyboardButton(text="–ê –¥–æ–ª–≥–æ –±—É–¥–µ—à—å –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å? ‚è±"))
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_4, text_contains=('–≤—ã—Ä–∞–∂–∞—Ç—å', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def message_4(message: types.Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='FSB', value='–î–∞')
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)"))
    markup.row(types.KeyboardButton(text="2Ô∏è‚É£ –í–æ–π–Ω–∞"))
    text = await sql_safe_select("text", "texts", {"name": "start_afraid"})
    # if –Ω–∞ —Ç—ã
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–¥–æ–ª–≥–æ', '–¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
async def message_5(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üëå"))
    text = await sql_safe_select("text", "texts", {"name": "start_only_five"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_5)


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'), state=(welcome_states.start_dialog.dialogue_10,
                                                 welcome_states.start_dialog.dialogue_9,
                                                 welcome_states.start_dialog.dialogue_7), flags=flags)
async def poll_filler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–û–õ–û–°–û–í–ê–¢–¨¬ª –∏–ª–∏ ¬´VOTE¬ª',
                         reply_markup=ReplyKeyboardRemove(), disable_web_page_preview=True)


@router.message(welcome_states.start_dialog.dialogue_5, text_contains=('–•–æ—Ä–æ—à–æ', '—Å–≤–æ–∏', '–≤–æ–ø—Ä–æ—Å—ã'),
                content_types=types.ContentType.TEXT, text_ignore_case=True, flags=flags)
@router.message(welcome_states.start_dialog.dialogue_5, text_contains='–ó–∞–¥–∞–≤–∞–π', content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)  # –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏
async def start_do_you_love_politics(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞  üôÇ"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç  üôÖ‚Äç‚ôÇ"))
    markup.row(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è üá∑üá∫üá∫üá¶"))
    markup.row(types.KeyboardButton(text="–ù–∞—á–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ 21 —Å–µ–Ω—Ç—è–±—Ä—è) ü™ñ"))
    text = await sql_safe_select("text", "texts", {"name": "start_do_you_love_politics"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_6)


@router.message(F.text.contains('–ø–æ—Å–ª–µ 21 —Å–µ–Ω—Ç—è–±—Ä—è'), welcome_states.start_dialog.dialogue_6, flags=flags)
async def start_mobilisation_polit(message: types.Message, state: FSMContext):
    text = await sql_safe_select("text", "texts", {"name": "start_mobilisation_polit"})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await state.set_state(welcome_states.start_dialog.dialogue_6)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–°–∫–æ—Ä–µ–µ –¥–∞') | F.text.contains('–ø—Ä–æ–¥–æ–ª–∂–∏–º')),
                welcome_states.start_dialog.dialogue_6, flags=flags)
async def message_6to7(message: types.Message, state: FSMContext):
    if '–ø—Ä–æ–¥–æ–ª–∂–∏–º' not in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='interest_politics', value=message.text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úç"))
    text = await sql_safe_select("text", "texts", {"name": "start_russia_goal"})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: interest_in_politics:',
                     message.text[:-3].strip())
    await state.set_state(welcome_states.start_dialog.dialogue_extrafix)


@router.message(F.text.contains('–ø–æ—Å–ª–µ 24 —Ñ–µ–≤—Ä–∞–ª—è'), welcome_states.start_dialog.dialogue_6, flags=flags)
async def start_after_feb(message: types.Message, state: FSMContext):
    await state.set_state(welcome_states.start_dialog.dialogue_6)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='interest_politics', value=message.text)
    text = await sql_safe_select("text", "texts", {"name": "start_after_feb"})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–°–∫–æ—Ä–µ–µ –Ω–µ—Ç  üôÖ‚Äç')), welcome_states.start_dialog.dialogue_6, flags=flags)
async def message_dfwd(message: types.Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    text = await sql_safe_select("text", "texts", {"name": "not_in_vain"})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await state.set_state(welcome_states.start_dialog.dialogue_6)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='interest_politics', value=message.text)


@router.message((F.text.contains('–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º')) | (F.text.contains('–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã')),
                state=welcome_states.start_dialog.dialogue_extrafix, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 1 –≤–æ–ø—Ä–æ—Å
async def message_7(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    text = await sql_safe_select("text", "texts", {"name": "start_goals_poll"})
    await message.answer_poll(
        question=text,
        options=welc_message_one, is_anonymous=False, allows_multiple_answers=True,
        reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_7)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_7, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 2 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(welc_message_one[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: Invasion:', welc_message_one[index])
    await state.update_data(ans_lst_2=lst_str)
    await state.update_data(answer_2=lst_answers)

    if '–Ø –Ω–µ –∑–Ω–∞—é' == lst_str[0]:  # idnt know
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen', value='–¢–æ–ª—å–∫–æ "–Ø –Ω–µ –∑–Ω–∞—é"')
    elif {0, 1, 2, 3, 5, 8}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {4, 6}.isdisjoint(set(lst_answers)) is False:  # green
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_gen',
                                    value='–ï—Å—Ç—å –∑–µ–ª—ë–Ω—ã–µ –∏ –Ω–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö')

    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='war_aims_ex', value=lst_str)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ"),
               types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî"))
    markup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"), types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    markup.row(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ"))
    text = await sql_safe_select("text", "texts", {"name": "start_belive_TV"})
    await state.set_state(welcome_states.start_dialog.dialogue_8)
    await bot.send_message(chat_id=poll_answer.user.id, text=text, reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(state=welcome_states.start_dialog.dialogue_8, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 3 –≤–æ–ø—Ä–æ—Å
async def message_8(message: types.Message, state: FSMContext):
    m_text = message.text
    if m_text == "–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ" or m_text == "–°–∫–æ—Ä–µ–µ –¥–∞ üëç" or \
            m_text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé" or m_text == "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî" or \
            m_text == "–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ":
        await mongo_update_stat_new(tg_id=message.from_user.id, column='tv_love_gen', value=m_text)
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: tv:', m_text)
        await state.update_data(answer_3=m_text)
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"))
        text = await sql_safe_select("text", "texts", {"name": "start_internet_belive"})
        await message.answer(text=text, reply_markup=markup.as_markup(resize_keyboard=True),
                             disable_web_page_preview=True)
        await state.set_state(welcome_states.start_dialog.button_next)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                             disable_web_page_preview=True)


@router.message((F.text.contains("–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è")), state=welcome_states.start_dialog.button_next, flags=flags)
async def button(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    text = await sql_safe_select("text", "texts", {"name": "start_internet_poll"})
    await message.answer_poll(text, web_prop, is_anonymous=False, allows_multiple_answers=True,
                              reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(welcome_states.start_dialog.dialogue_9)


@router.poll_answer(state=welcome_states.start_dialog.dialogue_9, flags=flags)  # –°–æ—Ö—Ä–∞–Ω—è—é 4 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_tho(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(web_prop[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: ethernet:', web_prop[index])

    if '–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...' in lst_str[0]:  # idnt know
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen', value='–¢–æ–ª—å–∫–æ "–Ø –Ω–µ –∑–Ω–∞—é"')
    elif {2, 3, 4, 5, 7}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {6}.isdisjoint(set(lst_answers)) is False:  # green
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_gen',
                                    value='–ï—Å—Ç—å –∑–µ–ª—ë–Ω—ã–µ –∏ –Ω–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö')

    await state.update_data(answer_4=poll_answer.option_ids)
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='web_prop_ex', value=lst_str)
    await state.update_data(ans_lst_4=lst_str)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    text = await sql_safe_select("text", "texts", {"name": "start_people_belive"})
    await state.set_state(welcome_states.start_dialog.dialogue_10)
    await bot.send_message(poll_answer.user.id, text)
    text2 = await sql_safe_select("text", "texts", {"name": "start_propagando_poll"})
    await bot.send_poll(poll_answer.user.id, text2,
                        people_prop, is_anonymous=False,
                        allows_multiple_answers=True,
                        reply_markup=markup.as_markup(resize_keyboard=True))


@router.poll_answer(state=welcome_states.start_dialog.dialogue_10)  # –°–æ—Ö—Ä–∞–Ω—è—é 5 –≤–æ–ø—Ä–æ—Å
async def poll_answer_handler_three(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    data = await state.get_data()
    lst_answers = poll_answer.option_ids
    lst_str = []
    for index in lst_answers:
        lst_str.append(people_prop[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust:', people_prop[index])
        if people_prop[index] != "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω" and people_prop[index] != "–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...":
            await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons:',
                             people_prop[index])
            await poll_write(f'Usrs: {poll_answer.user.id}: Start_answers: who_to_trust_persons_newpoll:',
                             people_prop[index])
        elif people_prop[index] == "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω":
            await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: LovePutin', 'True')

    if {1, 2, 3, 4, 5}.isdisjoint(set(lst_answers)) is False:  # red
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π')
    elif {0}.isdisjoint(set(lst_answers)) is False:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–ö—Ä–∞—Å–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ü—É—Ç–∏–Ω')
    else:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_gen', value='–ù–µ—Ç –Ω–∏ –∫—Ä–∞—Å–Ω—ã—Ö, –Ω–∏ –ü—É—Ç–∏–Ω–∞')

    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='prop_ex', value=lst_str)
    text = await sql_safe_select("text", "texts", {"name": "start_thank_you"})
    await bot.send_message(poll_answer.user.id, text)
    if await mongo_select(poll_answer.user.id):  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
    else:
        await mongo_add(poll_answer.user.id,
                        [data['answer_1'], data['ans_lst_2'], data['answer_3'], data['ans_lst_4'], lst_str])
    answer_3, answer_4, answer_5 = set(data["answer_3"]), set(data["answer_4"]), set(poll_answer.option_ids)
    if (data["answer_3"] != "–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî"
        and data["answer_3"] != "–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ") \
            or ({0, 2, 3, 4, 5, 7}.isdisjoint(answer_4) is False
                or {1, 2, 3, 4, 5}.isdisjoint(answer_5) is False
                or '–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ' in answer_3) \
            or '–°–∫–æ—Ä–µ–µ –¥–∞ üëç' in answer_3 \
            or '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé' in answer_3:

        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')
        await mongo_update_stat(poll_answer.user.id, column='faith', value='victim', options='$set')

        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã')

    elif {1, 6}.isdisjoint(answer_4) is False:

        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', '–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        await mongo_update_stat(poll_answer.user.id, column='faith', value='kinginfo', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–ö–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

    elif {1, 6}.isdisjoint(answer_4) is True:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: INFOState:', "–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π")
        await mongo_update_stat(poll_answer.user.id, column='faith', value='foma', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='faith', value='–§–æ–º–∞ –Ω–µ–≤–µ—Ä—É—é—â–∏–π')

    if 0 in answer_4:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: Yandex', 1)
    if 6 in answer_4:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: BBC', 1)
    if 1 not in answer_4:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Start_answers: NotWiki', 1)

    await state.clear()
    await state.set_state(propaganda_victim.start)

    if {0, 1, 2, 3, 5, 7, 8}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='warsupp', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
    elif {4, 6}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='oppos', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
    elif {9}.isdisjoint(set(data["answer_2"])) is False:
        await redis_just_one_write(f'Usrs: {poll_answer.user.id}: Politics:', '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
        await mongo_update_stat(poll_answer.user.id, column='political_view', value='apolitical', options='$set')
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='polit_status', value='–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
    await antip_wolves(poll_answer.user, bot, state)
