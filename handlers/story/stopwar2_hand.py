import asyncio
import re
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm import state
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot_statistics.stat import mongo_update_stat, mongo_update_stat_new
from data_base.DBuse import sql_safe_select, redis_just_one_write, redis_just_one_read, \
    mongo_select_info, mongo_update_end, del_key, poll_write, redis_delete_from_list, poll_get, mongo_count_docs
from filters.MapFilters import FinalPolFiler
from handlers.story.main_menu_hand import mainmenu_really_menu
from log import logg
from states.main_menu_states import MainMenuStates
from states.stopwar_states import StopWarState
from utilts import simple_media, percentage_replace, ref_master, ref_spy_sender, MasterCommander, CoolPercReplacer

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=StopWarState)


@router.message(commands=['stopwar2'], flags=flags)
@router.message((F.text == "–ù—É, –¥–æ–ø—É—Å—Ç–∏–º, –ø—Ä–æ—Å–∫–∞–∫–∏–≤–∞–ª–∞ –º—ã—Å–ª—å, –∏ —á—Ç–æ? ü§î"), state=StopWarState, flags=flags)
async def stopwar_front_death(message: Message, state: FSMContext):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Start_answers: NewPolitStat:',
                               '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è')  # TODO —É–±–∞—Ä–∞—Ç—å
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_front_death'})
    await state.set_state(StopWarState.front_death)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({' –ù–∏ –∑–∞ —á—Ç–æ! üôÖ‚Äç‚ôÇÔ∏è'})), state=StopWarState, flags=flags)
async def stopwar_how_to_avoid(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_to_avoid'})
    mini_text = "–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å!"
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º! ü™ñ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ"))
    await state.set_state(StopWarState.stopwar_how_to_avoid)
    await message.answer(mini_text, disable_web_page_preview=True)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ'})), state=StopWarState, flags=flags)
async def stopwar_how_to_avoid(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_to_avoid'})
    await state.set_state(StopWarState.stopwar_how_to_avoid)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º! ü™ñ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ'})), state=StopWarState.stopwar_how_to_avoid,
                flags=flags)
async def stopwar_lifesaver(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_lifesaver'})
    await state.set_state(StopWarState.stopwar_lifesaver)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å—ë–º –í–æ–≤–æ—á–∫—É! ü™ñ"))
    nmarkup.row(types.KeyboardButton(text="–í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ù–∞—á–Ω—ë–º! ü™ñ', '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å—ë–º –í–æ–≤–æ—á–∫—É! ü™ñ'})), state=StopWarState.stopwar_lifesaver,
                flags=flags)
@router.message((F.text.in_({'–ù–∞—á–Ω—ë–º! ü™ñ', '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å—ë–º –í–æ–≤–æ—á–∫—É! ü™ñ'})), state=StopWarState.stopwar_how_to_avoid,
                flags=flags)
async def stopwar_save_vv_start(message: Message, state: FSMContext):
    await state.set_state(StopWarState.stopwar_save_vv_start)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º"))
    await message.answer("–ó–¥–µ—Å—å –±–ª–æ–∫ –ø—Ä–æ –≤–æ–≤—á–∫—É, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≥–æ—Ç–æ–≤",
                         reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º', '–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ'})),
                state=StopWarState.stopwar_save_vv_start, flags=flags)
@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º', '–ù–µ —Å—Ç–æ–∏—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëâ'})), state=StopWarState.stopwar_lifesaver,
                flags=flags)
async def stopwar_how_and_when(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_and_when'})
    await state.set_state(StopWarState.stopwar_how_and_when)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å "))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ù–µ—Ç, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å'})), state=StopWarState.stopwar_how_and_when, flags=flags)
async def stopwar_nostradamus(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_nostradamus'})
    await state.set_state(StopWarState.stopwar_nostradamus)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–¢–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)





@router.message((F.text.in_({'–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç', '–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ üôÇ'})), state=StopWarState.stopwar_how_and_when,
                flags=flags)
@router.message((F.text.in_({'–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç', '–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ üôÇ'})), state=StopWarState.stopwar_nostradamus,
                flags=flags)
async def stopwar_ukraine_will_not_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ukraine_will_not_stop'})
    await state.set_state(StopWarState.stopwar_ukraine_will_not_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å?"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ö–∞–∫–æ–π –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å?'})), state=StopWarState.stopwar_ukraine_will_not_stop, flags=flags)
async def stopwar_ukraine_at_the_borders(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ukraine_at_the_borders'})
    await state.set_state(StopWarState.stopwar_ukraine_at_the_borders)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, –±—É–¥–µ—Ç ‚öîÔ∏è"))
    nmarkup.add(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ –±—É–¥–µ—Ç "))
    nmarkup.add(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.adjust(2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(state=StopWarState.stopwar_ukraine_at_the_borders, flags=flags)
async def stopwar_borders_result(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_borders_result'})
    await state.set_state(StopWarState.stopwar_borders_result)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å?"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å?'})), state=StopWarState.stopwar_borders_result, flags=flags)
async def stopwar_will_it_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_will_it_stop'})
    await state.set_state(StopWarState.stopwar_will_it_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–î–∞, —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç –≤–æ–π–Ω—É üïä"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ–≤—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–π–Ω—É üó°"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–î–∞, —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç –≤–æ–π–Ω—É üïä'})), state=StopWarState.stopwar_will_it_stop, flags=flags)
async def stopwar_ofc(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ofc'})
    await state.set_state(StopWarState.stopwar_ofc)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ–≤—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–π–Ω—É üó°','–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄ'})), state=StopWarState.stopwar_will_it_stop, flags=flags)
async def stopwar_war_eternal(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_war_eternal'})
    await state.set_state(StopWarState.stopwar_war_eternal)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'})), state=StopWarState.stopwar_war_eternal, flags=flags)
@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'})), state=StopWarState.stopwar_ofc, flags=flags)
async def stopwar_clever_bot(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_clever_bot'})
    await state.set_state(StopWarState.stopwar_clever_bot)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ì–æ–≤–æ—Ä–∏! üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–ì–æ–≤–æ—Ä–∏! üëå'})), state=StopWarState.stopwar_clever_bot, flags=flags)
async def stopwar_putin_will_not_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_putin_will_not_stop'})
    await state.set_state(StopWarState.stopwar_putin_will_not_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.add(types.KeyboardButton(text="–ó–≤—É—á–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–ó–≤—É—á–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ ü§î'})), state=StopWarState.stopwar_putin_will_not_stop, flags=flags)
async def stopwar_putin_already_lost(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_putin_already_lost'})
    await state.set_state(StopWarState.stopwar_putin_already_lost)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–¢–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ",
                state=StopWarState.stopwar_nostradamus, flags=flags)
@router.message(F.text == "–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ",
                state=StopWarState.stopwar_putin_will_not_stop, flags=flags)
@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥",
                state=StopWarState.stopwar_putin_already_lost, flags=flags)
async def stopwar_doubting_ending(message: Message, state: FSMContext):
    user_status = await redis_just_one_read(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:')
    nmarkup = ReplyKeyboardBuilder()
    text = "–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏—Ñ"
    await state.set_state(StopWarState.stopwar_ending)
    if user_status == "–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è":
        nmarkup.row(types.KeyboardButton(text="–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_warbringer_ending'})
    if user_status == "–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_doubting_ending'})
    if user_status == "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_peacemaker_ending'})
    if message.text == "–¢–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ":
        await message.answer("–•–æ—Ä–æ—à–æ üëå")
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫'})), state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_putin_already_lost(message: Message, state: FSMContext):
    user_status = await redis_just_one_read(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:')
    nmarkup = ReplyKeyboardBuilder()
    text = "–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏—Ñ"
    if user_status == "–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è":
        nmarkup.row(types.KeyboardButton(text="–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    if user_status == "–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    if user_status == "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá'})), state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_time_is_marching(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_time_is_marching'})
    text2 = await sql_safe_select('text', 'texts', {'name': 'stopwar_send_me'})
    await state.set_state(StopWarState.stopwar_time_is_marching)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await message.answer(text2, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–î–∞–≤–∞–π üëå'})), state=StopWarState.stopwar_ending, flags=flags)
@router.message((F.text.in_({'–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå'})), state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_big_responsibility(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_big_responsibility'})
    await state.set_state(StopWarState.stopwar_big_responsibility)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å ‚ùì‚ùì‚ùì"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message((F.text.in_({'–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå'})), state=StopWarState.stopwar_big_responsibility, flags=flags)
async def stopwar_save_them(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_save_them'})
    await state.set_state(StopWarState.stopwar_save_them)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="üëç"))
    nmarkup.add(types.KeyboardButton(text="üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)

@router.message(state=StopWarState.stopwar_save_them, flags=flags)
async def stopwar_viva_la_resistance(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_viva_la_resistance'})
    await state.set_state(StopWarState.stopwar_viva_la_resistance)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="üëç"))
    nmarkup.add(types.KeyboardButton(text="üëé"))
    media_id = await sql_safe_select('t_id', 'assets', {'name': "stopwar_viva_la_resistance"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))