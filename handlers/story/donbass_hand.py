from aiogram import Router, F
from aiogram import types, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot_statistics.stat import mongo_update_stat, mongo_update_stat_new
from data_base.DBuse import poll_write, sql_safe_select, poll_get, redis_delete_from_list, mongo_count_docs
from filters.MapFilters import DonbassOptionsFilter
from handlers.story.true_resons_hand import TruereasonsState
from keyboards.main_keys import filler_kb
from resources.all_polls import donbass_first_poll, welc_message_one
from states.donbass_states import donbass_state
from states.true_goals_states import WarGoalsState
from utilts import simple_media, CoolPercReplacer

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=donbass_state)
router.poll_answer.filter(state=donbass_state)


async def donbass_big_tragedy(message: Message, state: FSMContext):
    await state.set_state(donbass_state.start)
    text = await sql_safe_select('text', 'texts', {'name': 'donbass_big_tragedy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü–æ–º–Ω—é ‚úîÔ∏è'))
    nmarkup.add(types.KeyboardButton(text='–ù–µ –ø–æ–º–Ω—é ü§îÔ∏è'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({'–ü–æ–º–Ω—é ‚úîÔ∏è', '–ù–µ –ø–æ–º–Ω—é ü§îÔ∏è'}), state=donbass_state.start, flags=flags)
async def donbass_chart_1(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'))
    nmarkup.row(types.KeyboardButton(text='–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ¬ª? üë®‚Äçüë©‚Äçüëß‚Äçüë¶'))
    nmarkup.adjust(2, 1)
    await simple_media(message, 'donbass_chart_1', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ß—Ç–æ –∑–Ω–∞—á–∏—Ç')), state=donbass_state.start, flags=flags)
async def eight_years_add(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_years_add'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'), state=donbass_state.start, flags=flags)
async def donbass_chart_2(message: Message, state: FSMContext):
    await state.set_state(donbass_state.poll)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è'))
    await simple_media(message, 'donbass_chart_2', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è')), state=donbass_state.poll, flags=flags)
async def donbas_args_poll(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_args_poll'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    await message.answer_poll(text, donbass_first_poll, is_anonymous=False, allows_multiple_answers=True,
                              reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(donbass_state.poll, (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'), flags=flags)
async def poll_filler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–û–õ–û–°–û–í–ê–¢–¨¬ª –∏–ª–∏ ¬´VOTE¬ª',
                         reply_markup=ReplyKeyboardRemove())


@router.poll_answer(state=donbass_state.poll)
async def donbass_arguments_result(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    await state.set_state(donbass_state.after_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'donbass_arguments_result'})

    answers_indexes = poll_answer.option_ids
    user_answers = list()
    for index in answers_indexes:
        answer = donbass_first_poll[index]
        user_answers.append(answer)
        await poll_write(f'Usrs: {poll_answer.user.id}: Donbas_poll:', answer)
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='donbass_ex', value=user_answers)

    if answers_indexes == [0]:
        await mongo_update_stat_new(tg_id=poll_answer.user.id, column='donbas_poll_summary',
                                    value='ü§ù –°–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –±–µ–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π')
    else:
        if 0 in answers_indexes:
            await mongo_update_stat_new(tg_id=poll_answer.user.id, column='donbas_poll_summary',
                                        value='‚òùÔ∏è –°–æ–≥–ª–∞—Å–∏–ª–∏—Å—å, –Ω–æ –≤–æ–∑—Ä–∞–∑–∏–ª–∏')
        else:
            await mongo_update_stat_new(tg_id=poll_answer.user.id, column='donbas_poll_summary',
                                        value='üôÖ‚Äç‚ôÇÔ∏è –ù–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –≤–æ–∑—Ä–∞–∑–∏–ª–∏')

    sorted_dict = await CoolPercReplacer.make_sorted_statistics_dict('donbass_ex', donbass_first_poll[1:])
    sorted_text = str()
    for item in sorted_dict:
        line = str(sorted_dict[item]) + '%: ' + item + '\n\n'
        sorted_text += line
    text = text.replace('[[LIST]]', sorted_text)

    all_sumary = await mongo_count_docs('database', 'statistics_new', {'donbas_poll_summary': {'$exists': True}})
    agree_sumary = await mongo_count_docs('database', 'statistics_new',
                                          {'donbas_poll_summary': 'ü§ù –°–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –±–µ–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π'})
    agree_but_sumary = await mongo_count_docs('database', 'statistics_new',
                                              {'donbas_poll_summary': '‚òùÔ∏è –°–æ–≥–ª–∞—Å–∏–ª–∏—Å—å, –Ω–æ –≤–æ–∑—Ä–∞–∑–∏–ª–∏'})
    not_agree_sumary = await mongo_count_docs('database', 'statistics_new',
                                              {'donbas_poll_summary': 'üôÖ‚Äç‚ôÇÔ∏è –ù–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –≤–æ–∑—Ä–∞–∑–∏–ª–∏'})
    txt = CoolPercReplacer(text, all_sumary)
    txt.replace('XX', agree_sumary)
    txt.replace('YY', agree_but_sumary)
    txt.replace('ZZ', not_agree_sumary)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ'))
    await bot.send_message(poll_answer.user.id, txt(),
                           reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(DonbassOptionsFilter(option='–û–û–ù –≤—Ä—ë—Ç, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏—Ö –∂–µ—Ä—Ç–≤ —Å—Ä–µ–¥–∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è'),
                (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ  üëå", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_OOH(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[2])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ üëå"))
    await simple_media(message, 'civil_casualties', nmarkup.as_markup(resize_keyboard=True))


# @router.message(
#     DonbassOptionsFilter(option='–≠—Ç–∏ "–º–∏—Ä–Ω—ã–µ –ª—é–¥–∏" ‚Äî –∂–∏—Ç–µ–ª–∏ –£–∫—Ä–∞–∏–Ω—ã, –∞ –∑–Ω–∞—á–∏—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∂–∞–ª–∫–æ'),
#     (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
# async def donbas_nazi(message: Message, state=FSMContext):
#     await state.update_data(nazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
#     if '–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤' not in (
#             await poll_get(f'Usrs: {message.from_user.id}: Start_answers: Invasion:')):
#         await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
#                          'ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤')
#         print('TEST NAZI')
#     text = await sql_safe_select('text', 'texts', {'name': 'donbas_nazi'})
#     await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: First:')
#     await message.answer(text, reply_markup=filler_kb())


@router.message(
    DonbassOptionsFilter(
        option="üè¢ –≠—Ç–æ —É–∫—Ä–∞–∏–Ω—Ü—ã —Å–∞–º–∏ —Å—Ç—Ä–µ–ª—è—é—Ç –ø–æ —Å–≤–æ–∏–º –∂–µ –∂–∏—Ç–µ–ª—è–º! –ú—ã –∂–µ –±—å–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º"),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ  üëå", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_only_war_objects(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[4])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∂–∞—Å. üò® –î–∞–≤–∞–π –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."))
    nmarkup.row(types.KeyboardButton(text="–ù–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è, —á—Ç–æ–±—ã –æ–±–≤–∏–Ω–∏—Ç—å –†–æ—Å—Å–∏—é üëÜ"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–æ–º–∞—Ö –∏ –¥–µ–ª–∞—é—Ç –∏—Ö –ª–µ–≥–∏—Ç–∏–º–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é üò°"))
    await simple_media(message, 'only_war_objects', nmarkup.as_markup(resize_keyboard=True))


@router.message(text_contains=('–æ–±–≤–∏–Ω–∏—Ç—å', '–ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def protection(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'protection'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(
        types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–æ–º–∞—Ö –∏ –¥–µ–ª–∞—é—Ç –∏—Ö –ª–µ–≥–∏—Ç–∏–º–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é üò°"))
    nmarkup.row(
        types.KeyboardButton(text="–ñ–µ—Ä—Ç–≤—ã —Å—Ä–µ–¥–∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è - —ç—Ç–æ –ø–ª–æ—Ö–æ, –Ω–æ —ç—Ç–æ –≤—Å–µ —Ä–∞–¥–∏ –≤–∞–∂–Ω—ã—Ö —Ü–µ–ª–µ–π. üá∑üá∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('—Å—Ä–µ–¥–∏', '–Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–≤–∞–∂–Ω—ã—Ö'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def donbas_return_to_donbass(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_return_to_donbass'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ  üëå"))
    await poll_write(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[7])
    await state.update_data(big_game='–ü–æ–º–∏–º–æ –∑–∞—â–∏—Ç—ã –∂–∏—Ç–µ–ª–µ–π –î–æ–Ω–±–∞—Å—Å–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã.')
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")


@router.message(text_contains=('—É–∂–∞—Å', '—Å–ª–µ–¥—É—é—â–µ–π', '—Ç–µ–º–µ'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def exit_point_zero(message: Message, state: FSMContext):
    await DonbassManualFilter(message, state)


@router.message(text_contains=('—É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç—ã', '–ª–µ–≥–∏—Ç–∏–º–Ω–æ–π'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
@router.message(
    DonbassOptionsFilter(
        option="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –¢–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –∫–∞–∫ –∂–∏–≤–æ–π —â–∏—Ç! –ü–æ—ç—Ç–æ–º—É –ø–æ–≥–∏–±–∞—é—Ç –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ  üëå", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_live_shield_start(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[5])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_live_shield_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—á–µ–º –æ–Ω–∏ –≤–æ–æ–±—â–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª–∏—Å—å? ü§∑‚Äç‚ôÄÔ∏è–ú—ã –∂–µ –∏–º –∂–µ–ª–∞–µ–º –º–∏—Ä–∞."))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(text_contains=('—Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª–∏—Å—å', '–º–∏—Ä–∞'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def provocation(message: Message, state: FSMContext):
    await state.update_data(surrender="üè≥Ô∏è –£–∫—Ä–∞–∏–Ω—Ü–∞–º –Ω–∞–¥–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–∞—Ç—å—Å—è, —Ç–æ–≥–¥–∞ –±—ã —Å—Ç–æ–ª—å–∫–æ –∂–µ—Ä—Ç–≤ –Ω–µ –±—ã–ª–æ")
    await donbas_why_not_surrender(message)


@router.message(DonbassOptionsFilter(option=donbass_first_poll[6]),
                (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ  üëå", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_why_not_surrender(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[6])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_why_not_surrender'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), —è –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–∞—á–∞–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è üëå"))
    nmarkup.row(types.KeyboardButton(
        text="–¢—É—Ç –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ, –º—ã –∏—Ö –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Ç –Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç–æ–≤, –∑–∞—Ö–≤–∞—Ç–∏–≤—à–∏—Ö –≤–ª–∞—Å—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üôã‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(
        text="–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞), –≤ —Å–ª—É—á–∞–µ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –†–æ—Å—Å–∏—é –ª—É—á—à–µ —Å–¥–∞—Ç—å—Å—è, –∑–∞—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∂–µ—Ä—Ç–≤ üïä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º', '–Ω–µ–æ–Ω–∞—Ü'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def donbas_putin_unleashed(message: Message, state: FSMContext):
    await state.update_data(neonazi='–í –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–º –∏ –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è.')
    await poll_write(f'Usrs: {message.from_user.id}: Nazi_answers: first_poll:',
                     "üíÄ –ù–∞ –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–æ—Ü–∏–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ  üëå"))
    await simple_media(message, 'donbas_putin_unleashed', nmarkup.as_markup(resize_keyboard=True))


@router.message(text_contains=('—Å–ª—É—á–∞–µ', '–∂–µ—Ä—Ç–≤', '—Å–¥–∞—Ç—å—Å—è'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def donbas_strange_world(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_strange_world'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), —è –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —É–∫—Ä–∞–∏–Ω—Ü—ã –Ω–∞—á–∞–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è üëå"))
    nmarkup.row(types.KeyboardButton(text="–õ—É—á—à–µ –±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∏–∫—Ç–æ –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –Ω–∞–ø–∞–¥–∞–ª üïä"))
    nmarkup.row(
        types.KeyboardButton(text="–ù–æ –†–æ—Å—Å–∏—è - –Ω–µ –∞–≥—Ä–µ—Å—Å–æ—Ä. –ú—ã –Ω–µ –Ω–∞–ø–∞–¥–∞–µ–º, –∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É –æ—Ç –Ω–µ–æ–Ω–∞—Ü–∏–∑–º–∞ üôã‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(text_contains=('–õ—É—á—à–µ', '–Ω–∏–∫—Ç–æ', '–∫–æ–≥–æ'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def donbas_sentient_bot(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_sentient_bot'})
    await message.answer(text, reply_markup=filler_kb(), parse_mode="HTML", disable_web_page_preview=True)


@router.message(text_contains=('–°–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–Ω–∏–º–∞—é', '–Ω–∞—á–∞–ª–∏'), content_types=types.ContentType.TEXT,
                text_ignore_case=True, flags=flags)
async def donbas_understanding(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ  üëå"))
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_understanding'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(DonbassOptionsFilter(
    option='üéØ –≠—Ç–æ —É–∂–∞—Å–Ω–æ, –Ω–æ –ø–æ–º–∏–º–æ –∑–∞—â–∏—Ç—ã –∂–∏—Ç–µ–ª–µ–π –î–æ–Ω–±–∞—Å—Å–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëå', "–•–æ—Ä–æ—à–æ  üëå", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–°–æ–≥–ª–∞—Å–µ–Ω(–∞) üëå"})), flags=flags)
async def donbas_more_reasons(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Donbass_polls: First:', donbass_first_poll[7])
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_more_reasons'})
    reason_list_2 = set(await poll_get(f'Usrs: {message.from_user.id}: Start_answers: Invasion:'))
    reason_text = '\n\n'
    for reason in reason_list_2:
        if reason == welc_message_one[-1]:
            continue
        reason_text = reason_text + reason + '\n'
    text = text.replace('[–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —Å–ø–∏—Å–∫–æ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã]', reason_text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ  üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message(state=donbass_state.after_poll, flags=flags)
async def donbas_who_do_that(message: Message, state: FSMContext):
    await state.set_state(donbass_state.second_poll)
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_who_do_that'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö üìú"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–æ—Ä–æ—á–µ ‚è±"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–∫–æ—Ä–æ—á–µ ‚è±"), flags=flags)
async def short_separ_text(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'short_separ_text'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"))
    nmarkup.row(types.KeyboardButton(
        text="–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª –∂–∏—Ç–µ–ª—è–º –î–æ–Ω–±–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == '–í –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö üìú'), flags=flags)
async def donbas_long_maidan(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_long_maidan'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –¥–∞–ª—å—à–µ? ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


@router.message((F.text == "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –¥–∞–ª—å—à–µ? ‚è≥"), flags=flags)
async def donbas_can_you_be_normal(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"))
    nmarkup.row(types.KeyboardButton(
        text="–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª –∂–∏—Ç–µ–ª—è–º –î–æ–Ω–±–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
    nmarkup.row(
        types.KeyboardButton(text="–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"))
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_can_you_be_normal'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                         disable_web_page_preview=True)


"""@router.poll_answer(state=donbass_state.second_poll)
async def poll_answer_handler(poll_answer: types.PollAnswer, bot: Bot, state=FSMContext):
    indexes = poll_answer.option_ids
    true_options = list()
    print(indexes)
    for index in indexes:
        if index == 0:
            continue
        true_options.append(donbass_second_poll[index])
        await poll_write(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:', donbass_second_poll[index])
    if '–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–í–æ–æ–±—â–µ-—Ç–æ –Ω–∞—à–∏ –≤–æ–π—Å–∫–∞ –±—ã–ª–∏ –≤ –î–ù–† –∏ –õ–ù–†, –≤–æ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n\n"
                               "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>", reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif '–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–∏—é,' \
         ' –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –±—ã –ø–æ–º–æ–≥–ª–æ –ü—É—Ç–∏–Ω—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å\n\n"
                               "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>", reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif '–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û' in true_options:
        await bot.send_message(poll_answer.user.id,
                               "–¢–µ–ø–µ—Ä—å –ù–ê–¢–û –≤–ø–æ—Ä—É –ø—Ä–æ—Å–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω—É."
                               " –ì–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?..\n\n\n\n\n–ó–¥–µ—Å—å: (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)"
                               , reply_markup=filler_kb())
        await redis_pop(f'Usrs: {poll_answer.user.id}: Donbass_polls: Second:')
    elif indexes == [0]:
        await bot.send_message(poll_answer.user.id, '–ù—É —á—Ç–æ –∂–µ, –ø–æ—Ö–æ–∂–µ –º–Ω–µ –Ω–µ'
                                                    ' –Ω–∞–¥–æ –≤–∞—Å –ø–µ—Ä–µ—É–±–µ–∂–¥–∞—Ç—å. –ü–æ–π–¥–µ–º –¥–∞–ª—å—à–µ?', reply_markup=filler_kb())
    await state.set_state(donbass_state.after_second_poll)
"""

"""@router.message(second_donbass_filter(
    option='–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∂–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ –ø–æ—Å–ª–µ –ú–∞–π–¥–∞–Ω–∞'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
async def donbas_no_army_here(message: Message):
    await message.answer(
        "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –±—ã –ø–æ–º–æ–≥–ª–æ –ü—É—Ç–∏–Ω—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å\n\n"
        "<i>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: (—Å—É—â–µ—Å—Ç–≤—É—é—Ç)</i>",
        reply_markup=filler_kb())
    await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: Second:')


@router.message(
    second_donbass_filter(option='–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û'),
    (F.text.in_({'–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', "–•–æ—Ä–æ—à–æ", "–ü–æ–Ω—è—Ç–Ω–æ"})))
async def donbas_no_army_here(message: Message):
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ù–ê–¢–û –≤–ø–æ—Ä—É –ø—Ä–æ—Å–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –£–∫—Ä–∞–∏–Ω—É. –ì–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?..\n"
        "–ó–¥–µ—Å—å:\n\n\n\n (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ)\n           *–∫—Ä–æ–¥–µ—Ç—Å—è*\n\n(–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ2)\n *—Å–ø–∏—Ç*",
        reply_markup=filler_kb())
    await redis_pop(f'Usrs: {message.from_user.id}: Donbass_polls: Second:')


@router.message(state=donbass_state.after_second_poll)
async def donbas_no_army_here(message: Message, state=FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç"))
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–Ω–±–∞—Å—Å–∞
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ")
    await state.set_state(TruereasonsState.main)
    await message.answer(
        "–†–∞–¥, —á—Ç–æ –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –î–æ–Ω–±–∞—Å—Å–æ–º."
        " –í–µ—Ä–Ω–µ–º—Å—è –∂–µ –∫ –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã.\n"
        "–í –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –Ω–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –µ—Å—Ç—å.",
        reply_markup=nmarkup.as_markup(resize_keyboard=True))"""


@router.message((F.text == "–ü—É—Ç–∏–Ω –ø–æ–º–æ–≥ —Ä–∞–∑–∂–µ—á—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–µ—à–∞—Ç—å –£–∫—Ä–∞–∏–Ω–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û üõ°"), flags=flags)
async def donbas_hypocrisy(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='donbass_end', value='–ü—É—Ç–∏–Ω –º–µ—à–∞–ª –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ù–ê–¢–û')
    text = await sql_safe_select('text', 'texts', {'name': 'donbas_hypocrisy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–í–æ–æ–±—â–µ-—Ç–æ, –Ω–∞—à–∏—Ö –≤–æ–π—Å–∫ –Ω–µ –±—ã–ª–æ –≤ –î–ù–†/ –õ–ù–† –≤—Å–µ —ç—Ç–∏ 8 –ª–µ—Ç üôÖ"), flags=flags)
async def donbas_untrue(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='donbass_end', value='–ù–∞—à–∏—Ö –Ω–µ –±—ã–ª–æ –≤ –õ–î–ù–†')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ üëå"))
    await simple_media(message, 'donbas_untrue', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥") | (F.text == '–•–æ—Ä–æ—à–æ üëå'), flags=flags)
@router.message((F.text == "–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–π–Ω—ã üëå"))
@router.message((F.text == "–ü—É—Ç–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–ª –∂–∏—Ç–µ–ª—è–º –î–æ–Ω–±–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–∞–π–¥–∞–Ω–∞ ü§∑"))
async def donbas_no_army_here(message: Message):
    if '–ü—É—Ç–∏–Ω' in message.text or '–ø—Ä–∏—á–∏–Ω–∞–º' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='donbass_end', value=message.text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∑–∞–º–µ—á–∞—é  üòØ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –∑–∞–º–µ—á–∞—éü§∑‚Äç‚ôÄ"))
    await simple_media(message, 'donbass_no_male', nmarkup.as_markup(resize_keyboard=True))


async def donbass_mobilization(message: Message):
    await mongo_update_stat(message.from_user.id, 'donbass')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å üò®"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media(message, 'donbass_mobilization', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå") | (F.text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇÔ∏è") |
                (F.text == "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"), flags=flags)
async def donbass_honest_result(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    text = await sql_safe_select('text', 'texts', {'name': 'donbass_honest_result'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))
