from aiogram import Router, F
from aiogram import types
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import poll_write, sql_safe_select, redis_just_one_write, \
    poll_get, redis_just_one_read
from states.welcome_states import start_dialog
from utilts import simple_media

flags = {"throttling_key": "True"}
router = Router()

router.message.filter(state=start_dialog)


@router.message((F.text.contains('–≤–µ—Ä–∏—Ç—å') | F.text.contains('50 000')), flags=flags)  # –ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?
async def start_why_belive(message: types.Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='first_button', value='–ê —Å —á–µ–≥–æ –º–Ω–µ —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?')
    markup = ReplyKeyboardBuilder()
    markup.add(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º üá∑üá∫üá∫üá¶"))
    text = await sql_safe_select("text", "texts", {"name": "start_why_belive"})
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ù–∞—á–Ω—ë–º üá∑üá∫üá∫üá¶')), flags=flags)
async def start_is_war_bad(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_is_war_bad'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —Ñ–µ–Ω–æ–º–µ–Ω? ü§î"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–ö–∞–∫–æ–π —Ñ–µ–Ω–æ–º–µ–Ω? ü§î'), flags=flags)
async def start_disgusting(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_disgusting'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'), flags=flags)
async def start_what_is_moral(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_what_is_moral'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π üëå'), flags=flags)
async def start_trolley_1(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂—É –µ—Ö–∞—Ç—å –ø—Ä—è–º–æ ‚¨ÜÔ∏è"))
    nmarkap.add(types.KeyboardButton(text="–°–≤–µ—Ä–Ω—É –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è"))
    await simple_media(message, 'start_trolley_1', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü—Ä–æ–¥–æ–ª–∂—É –µ—Ö–∞—Ç—å –ø—Ä—è–º–æ ‚¨ÜÔ∏è", "–°–≤–µ—Ä–Ω—É –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è"})), flags=flags)
async def start_trolley_1_result(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_trolley_1_result',
                                value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'start_trolley_1_result'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ü§î"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ü§î"), flags=flags)
async def start_trolley_2(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkap.add(types.KeyboardButton(text="–°—Ç–æ–ª–∫–Ω—É —Ç–æ–ª—Å—Ç—è–∫–∞ —Å –º–æ—Å—Ç–∞ ‚¨áÔ∏è"))
    await simple_media(message, 'start_trolley_2', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è", "–°—Ç–æ–ª–∫–Ω—É —Ç–æ–ª—Å—Ç—è–∫–∞ —Å –º–æ—Å—Ç–∞ ‚¨áÔ∏è"})), flags=flags)
async def start_trolley_2_result(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_trolley_2_result',
                                value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'start_trolley_2_result'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ –ø—É—Ç—è—Ö, —Ç–æ–ª—Å—Ç—è–∫ –Ω–µ –∑–∞–º–µ—à–∞–Ω –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ ü§î"))
    nmarkap.row(types.KeyboardButton(text="–í–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –º—ã –ª–∏—à—å –Ω–∞–±–ª—é–¥–∞–µ–º, –∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ–º ‚Äî —ç—Ç–æ –¥—Ä—É–≥–æ–µ üëÄ"))
    nmarkap.row(types.KeyboardButton(text="–£–±–∏–≤–∞—Ç—å —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ ‚Äî —ç—Ç–æ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ ‚òùÔ∏è"))
    nmarkap.row(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é / –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–¥—Ä—É–≥–æ–µ')) | (F.text.contains('–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞')) |
                (F.text.contains('—Ç–æ–ª—Å—Ç—è–∫ –Ω–µ –∑–∞–º–µ—à–∞–Ω')), flags=flags)
async def start_trolley_2_result_answers(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_are_you_ready',
                                value=message.text)
    text = None
    if '—Ç–æ–ª—Å—Ç—è–∫ –Ω–µ –∑–∞–º–µ—à–∞–Ω' in message.text:
        text = await sql_safe_select('text', 'texts', {'name': 'start_worker_is_guilty'})
    elif '–º—ã –ª–∏—à—å –Ω–∞–±–ª—é–¥–∞–µ–º' in message.text:
        text = await sql_safe_select('text', 'texts', {'name': 'start_fatty_in_trolley'})
    elif '—ç—Ç–æ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ' in message.text:
        text = await sql_safe_select('text', 'texts', {'name': 'start_fatty_to_trap'})
    if text:
        await message.answer(text, disable_web_page_preview=True)
    text = await sql_safe_select('text', 'texts', {'name': 'start_are_you_ready'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –ª–µ–∫—Ü–∏—é –ø—Ä–æ –º–æ—Ä–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —É–±–∏–π—Å—Ç–≤–∞ üî´"))
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –ª–µ–∫—Ü–∏—é –ø—Ä–æ –º–æ—Ä–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —É–±–∏–π—Å—Ç–≤–∞ üî´"), flags=flags)
async def start_good_lecture(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await simple_media(message, 'start_good_lecture', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'), flags=flags)
async def start_they_show_bad_things(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_they_show_bad_things'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'), flags=flags)
async def start_hard_questions(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_hard_questions'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–û —á—ë–º? ü§î"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–û —á—ë–º? ü§î'), flags=flags)
async def start_red_pill(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_red_pill'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå'), flags=flags)
async def start_dumb_dam(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_dumb_dam'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkap.add(types.KeyboardButton(text="–í–∑–æ—Ä–≤—É –¥–∞–º–±—É üí•"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå'), flags=flags)
async def start_dam_results(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_dam_results'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã üëå"), flags=flags)
async def start_continue_or_peace(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_continue_or_peace'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è"))
    nmarkap.row(types.KeyboardButton(text="–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä"))
    nmarkap.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è", "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})), flags=flags)
async def start_continue_or_peace_results(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_continue_or_peace_results',
                                value=message.text)
    if "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è" in message.text:
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: NewPolitList:', message.text)
    elif "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä" in message.text:
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: NewPolitList:', message.text)
    elif "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è" in message.text:
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: NewPolitList:', message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'start_continue_or_peace_results'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ó–∞–¥–∞–≤–∞–π üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ó–∞–¥–∞–≤–∞–π üëå"), flags=flags)
async def start_now_you_putin(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_now_you_putin'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è"))
    nmarkap.row(types.KeyboardButton(text="–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkap.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è", "–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})), flags=flags)
async def start_continue_or_peace_results(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_now_you_putin_results',
                                value=message.text)
    user_answers = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: NewPolitList:')
    user_answers.append(message.text)
    if "–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è" in user_answers and "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è" in user_answers:
        await redis_just_one_write(f'Usrs: {message.from_user.id}: NewPolitStat:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏')
    elif "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä" in user_answers and "–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è" in user_answers:
        await redis_just_one_write(f'Usrs: {message.from_user.id}: NewPolitStat:', '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã')
    else:
        await redis_just_one_write(f'Usrs: {message.from_user.id}: NewPolitStat:', '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è')
    text = await sql_safe_select('text', 'texts', {'name': 'start_now_you_putin_results'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º üëå"), flags=flags)
async def start_donbas_chart(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ó–Ω–∞–ª(–∞) ‚úÖ"))
    nmarkap.add(types.KeyboardButton(text="–ù–µ –∑–Ω–∞–ª(–∞) ‚ùå"))
    nmarkap.row(types.KeyboardButton(text="–î–æ–∫–∞–∂–∏ ü§î"))
    await simple_media(message, 'start_donbas_chart', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–æ–∫–∞–∂–∏ ü§î"), flags=flags)
async def start_donbas_OOH(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_donbas_OOH'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º  üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ó–Ω–∞–ª(–∞) ‚úÖ") | (F.text == "–ù–µ –∑–Ω–∞–ª(–∞) ‚ùå") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º  üëå"), flags=flags)
async def start_donbas_results(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_donbas_results',
                                value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'start_donbas_results'})
    await redis_just_one_write(f'Usrs: {message.from_user.id}: StartDonbas:', message.text)
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), flags=flags)
async def start_donbas_putin(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ ü§î"))
    await simple_media(message, 'start_donbas_putin', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ ü§î"), flags=flags)
async def start_many_numbers(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_many_numbers'})
    await message.answer(text, disable_web_page_preview=True)
    nmarkap = ReplyKeyboardBuilder()
    if (await redis_just_one_read(f'Usrs: {message.from_user.id}: StartDonbas:')) == "–ó–Ω–∞–ª(–∞) ‚úÖ" or (
            await redis_just_one_read(f'Usrs: {message.from_user.id}: NewPolitStat:')) == '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã':
        await start_remember_money(message)
    else:
        text = await sql_safe_select('text', 'texts', {'name': 'start_how_are_you'})
        nmarkap.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üëå"))
        nmarkap.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å –∫–∞–∫–æ–π —Ü–µ–ª—å—é —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å? ü§î"))
        nmarkap.row(types.KeyboardButton(text="–ó–≤—É—á–∏—Ç –æ–¥–Ω–æ–±–æ–∫–æ ‚Äî —Ç—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—à—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã ‚òùÔ∏è"))
        nmarkap.row(types.KeyboardButton(text="–ù–µ –Ω–∞–¥–æ –ª–µ–∑—Ç—å –∫–æ –º–Ω–µ –≤ –≥–æ–ª–æ–≤—É, –¥–∞–≤–∞–π –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º. üëâ"))
        await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üëå"), flags=flags)
async def start_good(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_good'})
    await message.answer(text, disable_web_page_preview=True)
    await start_remember_money(message)


@router.message((F.text == "–•–æ—Ä–æ—à–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å –∫–∞–∫–æ–π —Ü–µ–ª—å—é —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å? ü§î"), flags=flags)
async def start_everybody_lies(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_everybody_lies'})
    await message.answer(text, disable_web_page_preview=True)
    await start_remember_money(message)


@router.message((F.text == "–ó–≤—É—á–∏—Ç –æ–¥–Ω–æ–±–æ–∫–æ ‚Äî —Ç—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—à—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã ‚òùÔ∏è"), flags=flags)
async def start_harder_than_dum(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_harder_than_dum'})
    await message.answer(text, disable_web_page_preview=True)
    await start_remember_money(message)


@router.message((F.text == "–ù–µ –Ω–∞–¥–æ –ª–µ–∑—Ç—å –∫–æ –º–Ω–µ –≤ –≥–æ–ª–æ–≤—É, –¥–∞–≤–∞–π –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º. üëâ"), flags=flags)
async def start_why_so_agressive(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_why_so_agressive'})
    await message.answer(text, disable_web_page_preview=True)
    await start_remember_money(message)


async def start_remember_money(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_remember_money'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü–æ–º–Ω—é ‚úîÔ∏è"))
    nmarkap.add(types.KeyboardButton(text="–ù–µ –ø–æ–º–Ω—é ü§îÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü–æ–º–Ω—é ‚úîÔ∏è", "–ù–µ –ø–æ–º–Ω—é ü§îÔ∏è"})), flags=flags)
async def start_let_them_rates(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_let_them_rates'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç üëç"))
    nmarkap.add(types.KeyboardButton(text="–£–∂–µ —Ç–∞–∫ –¥–µ–ª–∞—é üëå"))
    nmarkap.row(types.KeyboardButton(text="–ö —á–µ–º—É —ç—Ç–æ? ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç üëç", "–£–∂–µ —Ç–∞–∫ –¥–µ–ª–∞—é üëå", "–ö —á–µ–º—É —ç—Ç–æ? ü§∑‚Äç‚ôÇÔ∏è"})), flags=flags)
async def start_I_will_rates(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_I_will_rates'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–î–∞–≤–∞–π  üëå"))
    nmarkap.add(types.KeyboardButton(text="–£–∂–µ —Ç–∞–∫ –¥–µ–ª–∞—é üëå"))
    nmarkap.row(types.KeyboardButton(text="–ö —á–µ–º—É —ç—Ç–æ? ü§∑‚Äç‚ôÇÔ∏è"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞–≤–∞–π  üëå"), flags=flags)
async def start_donbas_results(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'start_how_to_manipulate'})
    await redis_just_one_write(f'Usrs: {message.from_user.id}: StartDonbas:', message.text)
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ì–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëå"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))
