import asyncio
import re
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot_statistics.stat import mongo_update_stat, mongo_update_stat_new
from data_base.DBuse import sql_safe_select, redis_just_one_write, redis_just_one_read, \
    mongo_select_info, mongo_update_end, del_key, poll_write, redis_delete_from_list, poll_get, mongo_count_docs
from filters.MapFilters import FinalPolFiler
from handlers.story.main_menu_hand import mainmenu_really_menu
from handlers.story.mob_hand import mob_lifesaver
from keyboards.map_keys import stopwar_lecture_kb
from log import logg
from middleware.report_ware import Reportware
from states.main_menu_states import MainMenuStates
from states.stopwar_states import StopWarState
from utils.fakes import fake_message
from utilts import simple_media, percentage_replace, ref_master, ref_spy_sender, MasterCommander, CoolPercReplacer, \
    day_counter

flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=StopWarState)
router.message.middleware(Reportware())


@router.message((F.text == "–ü–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏ üìä"), flags=flags)
async def new_stopwar_start(message: Message, state: FSMContext):
    await state.set_state(StopWarState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_why_they_sad'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏–º –≤–æ–ø—Ä–æ—Å—ã üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–ü–æ–≤—Ç–æ—Ä–∏–º –≤–æ–ø—Ä–æ—Å—ã üëå", flags=flags)
async def stopwar_question_1(message: Message, state: FSMContext):
    await state.set_state(StopWarState.questions)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_question_1'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è", "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})), state=StopWarState.questions, flags=flags)
async def stopwar_question_2(message: Message, state: FSMContext):
    await state.set_state(StopWarState.must_watch)
    await poll_write(f'Usrs: {message.from_user.id}: StopWar: NewPolitList:', message.text)
    await mongo_update_stat_new(message.from_user.id, 'stopwar_continue_or_peace_results', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_question_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üïä"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è", "–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üïä",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄÔ∏è"})), state=StopWarState.must_watch, flags=flags)
async def stopwar_here_they_all(message: Message, bot: Bot):
    await mongo_update_stat_new(message.from_user.id, 'stopwar_will_you_start_war', value=message.text)
    first_question = await poll_get(f'Usrs: {message.from_user.id}: StopWar: NewPolitList:')
    if first_question[0] == "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è" and message.text == "–ù–∞—á–Ω—É –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è":
        await redis_just_one_write(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:',
                                   '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è')
        await mongo_update_stat_new(tg_id=message.from_user.id, column='NewPolitStat_end',
                                    value='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏')
    elif first_question[0] == "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏—Ä–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º üïä" and message.text == "–ù–µ —Å—Ç–∞–Ω—É —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å üïä":
        await redis_just_one_write(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:',
                                   '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä')
        await mongo_update_stat_new(tg_id=message.from_user.id, column='NewPolitStat_end',
                                    value='–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã')
    else:
        await redis_just_one_write(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:',
                                   '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑')
        await mongo_update_stat_new(tg_id=message.from_user.id, column='NewPolitStat_end',
                                    value='–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è')

    if await redis_just_one_read(f'Usrs: {message.from_user.id}: Ref'):
        parent_text = await sql_safe_select('text', 'texts', {'name': 'ref_end_polit'})
        start_answer = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: NewPolitList:')
        await ref_spy_sender(bot, message.from_user.id, parent_text,
                             {'[first_q_start]': start_answer[0], '[second_q_start]': start_answer[1],
                              '[first_q_end]': first_question[0], '[second_q_end]': message.text})

    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_here_they_all'})
    start_staus = await redis_just_one_read(f'Usrs: {message.from_user.id}: Start_answers: NewPolitStat:')
    end_status = await redis_just_one_read(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:')
    text = text.replace('[–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å]', str(start_staus))
    text = text.replace('[–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å]', str(end_status))
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í–∑–≥–ª—è–Ω–µ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–í–∑–≥–ª—è–Ω–µ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä", state=StopWarState.must_watch, flags=flags)
async def stopwar_how_it_was(message: Message, state: FSMContext):
    for x in ('War', 'Peace', 'Doubt'):
        await poll_write(f'Usrs: {message.from_user.id}: Stop_war_answers:', x)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_it_was'})
    await mongo_update_stat_new(message.from_user.id, 'SecondNewPolit')
    start_warbringers_count = await mongo_count_docs('database', 'statistics_new',
                                                     {'NewPolitStat_start': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'})
    start_peacefull_count = await mongo_count_docs('database', 'statistics_new',
                                                   {'NewPolitStat_start': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'})
    start_doubting_count = await mongo_count_docs('database', 'statistics_new',
                                                  {'NewPolitStat_start': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'})
    all_count = start_doubting_count + start_peacefull_count + start_warbringers_count
    start_war_percentage = str(round(start_warbringers_count / all_count * 100))
    start_peace_percentage = str(round(start_peacefull_count / all_count * 100))
    start_doubt_percentage = str(round(start_doubting_count / all_count * 100))
    text = text.replace('XX', start_war_percentage)
    text = text.replace('YY', start_peace_percentage)
    text = text.replace('ZZ', start_doubt_percentage)
    all_count_end = await mongo_count_docs('database', 'statistics_new', [
        {'NewPolitStat_end': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'}, {'NewPolitStat_end': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'},
        {'NewPolitStat_end': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'}])
    await state.update_data({'How_many_will_end': all_count_end, 'start_warbringers_count': start_warbringers_count,
                             'start_peacefull_count': start_peacefull_count,
                             'start_doubting_count': start_doubting_count})

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫–∏ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è"))
    nmarkup.add(types.KeyboardButton(text="–°–æ–º–Ω–µ–≤–∞—é—â–∏–µ—Å—è ü§∑"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –≤–æ–π–Ω—ã üïä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text == "–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫–∏ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è", state=StopWarState.must_watch, flags=flags)
async def stopwar_how_was_warbringers(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_was_warbringers'})
    at_the_end = await mongo_count_docs('database', 'statistics_new',
                                        [{'NewPolitStat_start': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'},
                                         {'NewPolitStat_end': {'$exists': True}}],
                                        hard_link=True)
    start_war = (await state.get_data())['start_warbringers_count']
    end_war_war = await mongo_count_docs('database', 'statistics_new',
                                         [{'NewPolitStat_start': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'},
                                          {'NewPolitStat_end': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'}], hard_link=True)
    end_war_peace = await mongo_count_docs('database', 'statistics_new',
                                           [{'NewPolitStat_start': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'},
                                            {'NewPolitStat_end': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'}], hard_link=True)
    end_war_doubt = await mongo_count_docs('database', 'statistics_new',
                                           [{'NewPolitStat_start': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'},
                                            {'NewPolitStat_end': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'}], hard_link=True)

    text = percentage_replace(text, 'MM', at_the_end, start_war)
    text = percentage_replace(text, 'AA', end_war_war, at_the_end)
    text = percentage_replace(text, 'BB', end_war_doubt, at_the_end)
    text = percentage_replace(text, 'CC', end_war_peace, at_the_end)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Stop_war_answers:', 'War')
    await message.answer(text)
    await stopwar_must_watch_all(message)


@router.message(F.text == "–°–æ–º–Ω–µ–≤–∞—é—â–∏–µ—Å—è ü§∑", state=StopWarState.must_watch, flags=flags)
async def stopwar_how_was_doubting(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_was_doubting'})
    at_the_end = await mongo_count_docs('database', 'statistics_new',
                                        [{'NewPolitStat_start': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'},
                                         {'NewPolitStat_end': {'$exists': True}}],
                                        hard_link=True)
    start_doub = (await state.get_data())['start_doubting_count']
    end_doub_war = await mongo_count_docs('database', 'statistics_new',
                                          [{'NewPolitStat_start': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'},
                                           {'NewPolitStat_end': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'}], hard_link=True)
    end_doub_doub = await mongo_count_docs('database', 'statistics_new',
                                           [{'NewPolitStat_start': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'},
                                            {'NewPolitStat_end': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'}], hard_link=True)
    end_doub_peace = await mongo_count_docs('database', 'statistics_new',
                                            [{'NewPolitStat_start': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'},
                                             {'NewPolitStat_end': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'}], hard_link=True)

    text = percentage_replace(text, 'NN', at_the_end, start_doub)
    text = percentage_replace(text, 'DD', end_doub_war, at_the_end)
    text = percentage_replace(text, 'EE', end_doub_doub, at_the_end)
    text = percentage_replace(text, 'FF', end_doub_peace, at_the_end)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Stop_war_answers:', 'Doubt')
    await message.answer(text)
    await stopwar_must_watch_all(message)


@router.message(F.text == "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –≤–æ–π–Ω—ã üïä", state=StopWarState.must_watch, flags=flags)
async def stopwar_how_was_peacefull(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_was_peacefull'})
    at_the_end = await mongo_count_docs('database', 'statistics_new',
                                        [{'NewPolitStat_start': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'},
                                         {'NewPolitStat_end': {'$exists': True}}],
                                        hard_link=True)
    start_peace = (await state.get_data())['start_peacefull_count']
    end_peace_war = await mongo_count_docs('database', 'statistics_new',
                                           [{'NewPolitStat_start': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'},
                                            {'NewPolitStat_end': '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏'}], hard_link=True)
    end_peace_doub = await mongo_count_docs('database', 'statistics_new',
                                            [{'NewPolitStat_start': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'},
                                             {'NewPolitStat_end': '–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è'}], hard_link=True)
    end_peace_peace = await mongo_count_docs('database', 'statistics_new',
                                             [{'NewPolitStat_start': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'},
                                              {'NewPolitStat_end': '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã'}], hard_link=True)

    text = percentage_replace(text, 'OO', at_the_end, start_peace)
    text = percentage_replace(text, 'GG', end_peace_war, at_the_end)
    text = percentage_replace(text, 'HH', end_peace_doub, at_the_end)
    text = percentage_replace(text, 'II', end_peace_peace, at_the_end)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Stop_war_answers:', 'Peace')
    await message.answer(text)
    await stopwar_must_watch_all(message)


async def stopwar_must_watch_all(message: Message):
    not_watched = await poll_get(f'Usrs: {message.from_user.id}: Stop_war_answers:')
    nmarkup = ReplyKeyboardBuilder()
    if not_watched:
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_must_watch_all'})
        if 'War' in not_watched:
            nmarkup.row(types.KeyboardButton(text="–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫–∏ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è"))
        if 'Doubt' in not_watched:
            nmarkup.add(types.KeyboardButton(text="–°–æ–º–Ω–µ–≤–∞—é—â–∏–µ—Å—è ü§∑"))
        if 'Peace' in not_watched:
            nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –≤–æ–π–Ω—ã üïä"))
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_plastic_views'})
        nmarkup.row(types.KeyboardButton(text="‚úÖ –°–∫–æ—Ä–µ–µ –¥–∞, –±—ã–ª –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç"))
        nmarkup.add(types.KeyboardButton(text="‚ùå –°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –±—ã–ª –ø—Ä–µ–¥–≤–∑—è—Ç"))
        nmarkup.row(types.KeyboardButton(text="ü§∑‚Äç‚ôÇÔ∏è –ù–µ –∑–Ω–∞—é"))
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"‚úÖ –°–∫–æ—Ä–µ–µ –¥–∞, –±—ã–ª –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç", "‚ùå –°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –±—ã–ª –ø—Ä–µ–¥–≤–∑—è—Ç", "ü§∑‚Äç‚ôÇÔ∏è –ù–µ –∑–Ω–∞—é"})),
                state=StopWarState.must_watch, flags=flags)
async def stopwar_thanks_for_time(message: Message, bot: Bot, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='CredibleBot', value=message.text)
    await state.set_state(StopWarState.after_new_stat)
    await del_key(f'Usrs: {message.from_user.id}: StopWar: NewPolitList:')
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_thanks_for_time'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ –∂–µ? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    # –û–û–†
    await MasterCommander(bot, 'chat', message.from_user.id).add({'menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}, check_default_scope=False)
    await mongo_update_end(message.from_user.id)


@router.message(FinalPolFiler(status='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è'), F.text == "–ß—Ç–æ –∂–µ? ü§î", flags=flags)
async def stopwar_stat_lecture_war(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_stat_lecture_war'})
    await message.answer(text, reply_markup=stopwar_lecture_kb(), disable_web_page_preview=True)


@router.message(FinalPolFiler(status='–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑'), F.text == "–ß—Ç–æ –∂–µ? ü§î", flags=flags)
async def stopwar_idk(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_stat_lecture_doub'})
    await message.answer(text, reply_markup=stopwar_lecture_kb(), disable_web_page_preview=True)


@router.message(FinalPolFiler(status='–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä'), F.text == "–ß—Ç–æ –∂–µ? ü§î", flags=flags)
async def stopwar_rather_no(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_stat_lecture_peace'})
    await message.answer(text, reply_markup=stopwar_lecture_kb(), disable_web_page_preview=True)


@router.message((F.text == "–ù—É, –¥–æ–ø—É—Å—Ç–∏–º, –ø—Ä–æ—Å–∫–∞–∫–∏–≤–∞–ª–∞ –º—ã—Å–ª—å, –∏ —á—Ç–æ? ü§î"), flags=flags)
async def stopwar_front_death(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_front_death'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ù–∏ –∑–∞ —á—Ç–æ! üôÖ‚Äç‚ôÇÔ∏è', "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})), state=StopWarState.after_new_stat, flags=flags)
async def stopwar_mob_start(message: Message, state: FSMContext):
    if message.text == '–ù–∏ –∑–∞ —á—Ç–æ! üôÖ‚Äç‚ôÇÔ∏è':
        await message.answer("–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å!", disable_web_page_preview=True)
    await mob_lifesaver(message, state)


# -- –¥–∞–ª—å—à–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã –Ω–∞ –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ü–∞ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏

@router.message((F.text == '–ü–ï–†–ï–•–û–î'), state=StopWarState.stopwar_how_and_when, flags=flags)
async def stopwar_how_and_when(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_how_and_when'})
    await state.set_state(StopWarState.stopwar_how_and_when)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ù–µ—Ç, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ'), state=StopWarState.stopwar_how_and_when, flags=flags)
async def stopwar_nostradamus(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_nostradamus'})
    await state.set_state(StopWarState.stopwar_nostradamus)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–¢–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–¢–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å üëâ'), state=StopWarState.stopwar_nostradamus, flags=flags)
async def stopwar_buffer_001(message: Message, bot: Bot):
    await message.answer('–•–æ—Ä–æ—à–æ üëå')
    await asyncio.sleep(1)
    await router.parent_router.feed_update(bot, fake_message(message.from_user, "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))


@router.message((F.text.in_({'–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç', '–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ üôÇ'})),
                state=(StopWarState.stopwar_how_and_when, StopWarState.stopwar_nostradamus),
                flags=flags)
async def stopwar_ukraine_will_not_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ukraine_will_not_stop'})
    await state.set_state(StopWarState.stopwar_ukraine_will_not_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å?"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ö–∞–∫–æ–π –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å?'), state=StopWarState.stopwar_ukraine_will_not_stop, flags=flags)
async def stopwar_ukraine_at_the_borders(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ukraine_at_the_borders'})
    await state.set_state(StopWarState.stopwar_ukraine_at_the_borders)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, –±—É–¥–µ—Ç ‚öîÔ∏è"))
    nmarkup.add(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ –±—É–¥–µ—Ç "))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.adjust(2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(state=StopWarState.stopwar_ukraine_at_the_borders, flags=flags)
async def stopwar_borders_result(message: Message, state: FSMContext):
    await state.set_state(StopWarState.stopwar_borders_result)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='stopwar_borders_result', value=message.text)
    all_answers = await mongo_count_docs('database', 'statistics_new', {'stopwar_borders_result': {'$exists': True}})
    answer_1 = await mongo_count_docs('database', 'statistics_new',
                                      {'stopwar_borders_result': '–°–∫–æ—Ä–µ–µ –¥–∞, –±—É–¥–µ—Ç ‚öîÔ∏è'})
    answer_2 = await mongo_count_docs('database', 'statistics_new',
                                      {'stopwar_borders_result': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ –±—É–¥–µ—Ç '})
    answer_3 = await mongo_count_docs('database', 'statistics_new',
                                      {'stopwar_borders_result': '–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è'})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'stopwar_borders_result'}), all_answers)
    txt.replace('AA', answer_1)
    txt.replace('BB', answer_2)
    txt.replace('CC', answer_3)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å?"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å?'), state=StopWarState.stopwar_borders_result, flags=flags)
async def stopwar_will_it_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_will_it_stop'})
    await state.set_state(StopWarState.stopwar_will_it_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç –≤–æ–π–Ω—É üïä"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ–≤—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–π–Ω—É üó°"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–î–∞, —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç –≤–æ–π–Ω—É üïä'), state=StopWarState.stopwar_will_it_stop, flags=flags)
async def stopwar_ofc(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_ofc'})
    await state.set_state(StopWarState.stopwar_ofc)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ–≤—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–π–Ω—É üó°', '–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄ'})),
                state=StopWarState.stopwar_will_it_stop, flags=flags)
async def stopwar_war_eternal(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_war_eternal'})
    await state.set_state(StopWarState.stopwar_war_eternal)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'), state=(StopWarState.stopwar_war_eternal, StopWarState.stopwar_ofc),
                flags=flags)
async def stopwar_clever_bot(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_clever_bot'})
    await state.set_state(StopWarState.stopwar_clever_bot)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ì–æ–≤–æ—Ä–∏! üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ì–æ–≤–æ—Ä–∏! üëå'), state=StopWarState.stopwar_clever_bot, flags=flags)
async def stopwar_putin_will_not_stop(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_putin_will_not_stop'})
    await state.set_state(StopWarState.stopwar_putin_will_not_stop)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.row(types.KeyboardButton(text="–ó–≤—É—á–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ó–≤—É—á–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ ü§î'), state=StopWarState.stopwar_putin_will_not_stop, flags=flags)
async def stopwar_putin_already_lost(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_putin_already_lost'})
    await state.set_state(StopWarState.stopwar_putin_already_lost)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FinalPolFiler(status='–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è'),
                (F.text.in_({"–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ", "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"})),
                state=(StopWarState.stopwar_nostradamus, StopWarState.stopwar_putin_already_lost,
                       StopWarState.stopwar_putin_will_not_stop), flags=flags)
async def stopwar_warbringer_ending(message: Message, state: FSMContext):
    await state.set_state(StopWarState.stopwar_ending)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_warbringer_ending'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FinalPolFiler(status='–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑'),
                (F.text.in_({"–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ", "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"})),
                state=(StopWarState.stopwar_nostradamus, StopWarState.stopwar_putin_already_lost,
                       StopWarState.stopwar_putin_will_not_stop), flags=flags)
async def stopwar_doubting_ending(message: Message, state: FSMContext):
    await state.set_state(StopWarState.stopwar_ending)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_doubting_ending'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(FinalPolFiler(status='–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä'),
                (F.text.in_({"–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ", "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"})),
                state=(StopWarState.stopwar_nostradamus, StopWarState.stopwar_putin_already_lost,
                       StopWarState.stopwar_putin_will_not_stop), flags=flags)
async def stopwar_peacemaker_ending(message: Message, state: FSMContext):
    await state.set_state(StopWarState.stopwar_ending)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_peacemaker_ending'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ü–æ–¥–æ–∂–¥–∏-–ø–æ–¥–æ–∂–¥–∏! –ê –º–æ–∂–µ—Ç –ª–∏ –†–æ—Å—Å–∏—è —Ä–∞–∑–≤–∞–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç? üó∫'),
                state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_putin_already_lost(message: Message, state: FSMContext):
    user_status = await redis_just_one_read(f'Usrs: {message.from_user.id}: StopWar: NewPolitStat:')
    nmarkup = ReplyKeyboardBuilder()
    text = "–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏—Ñ"
    if user_status == "–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏ ‚öîÔ∏è":
        nmarkup.row(types.KeyboardButton(text="–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    if user_status == "–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è ü§∑":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    if user_status == "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä":
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
        text = "–ó–∞–≥–ª—É—à–∫–∞"
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá'), state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_time_is_marching(message: Message, bot: Bot, state: FSMContext):
    link = await ref_master(bot, message.from_user.id)
    time = await day_counter(message.from_user)
    text = (await sql_safe_select('text', 'texts', {'name': 'stopwar_time_is_marching'})).replace('[YY:YY]', time)
    text_2 = re.sub('(?<=href\=\")(.*?)(?=\")', link,
                    (await sql_safe_select('text', 'texts', {'name': 'stopwar_send_me'})))
    await state.set_state(StopWarState.stopwar_time_is_marching)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    await message.answer(text_2, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–î–∞–≤–∞–π üëå', '–Ø –≤—Å—ë –∂–µ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–π–Ω—É üëå'})),
                state=StopWarState.stopwar_ending, flags=flags)
async def stopwar_big_responsibility(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_big_responsibility'})
    await state.set_state(StopWarState.stopwar_big_responsibility)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="–ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å ‚ùì‚ùì‚ùì"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å ‚ùì‚ùì‚ùì'), state=StopWarState.stopwar_big_responsibility, flags=flags)
async def stopwar_save_them(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_save_them'})
    await state.set_state(StopWarState.stopwar_save_them)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="üëç"))
    nmarkup.add(types.KeyboardButton(text="üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'üëç', 'üëé'})), state=StopWarState.stopwar_save_them, flags=flags)
async def stopwar_viva_la_resistance(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_viva_la_resistance'})
    await state.set_state(StopWarState.stopwar_viva_la_resistance)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.add(types.KeyboardButton(text="üëç"))
    nmarkup.add(types.KeyboardButton(text="üëé"))
    media_id = await sql_safe_select('t_id', 'assets', {'name': "stopwar_viva_la_resistance"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'üëç', 'üëé'})), flags=flags, state=StopWarState.stopwar_viva_la_resistance)
async def stopwar_lets_fight(message: Message, state: FSMContext):
    await state.set_state(StopWarState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û–±—ä—è—Å–Ω–∏ ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –≤–ª–∞—Å—Ç–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç—è—Ç üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="ü§ù"))
    await simple_media(message, 'stopwar_lets_fight', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–û–±—ä—è—Å–Ω–∏ ü§î") | (F.text == "–ù–µ—Ç, –≤–ª–∞—Å—Ç–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç—è—Ç üôÖ‚Äç‚ôÇÔ∏è"),
                state=StopWarState.final, flags=flags)
async def stopwar_The(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='will_they_stop', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_The'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã? ü§î"), state=StopWarState.final, flags=flags)
async def stopwar_first_manipulation_argument(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_first_manipulation_argument'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"))
    await state.set_state(StopWarState.arg_1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"), state=StopWarState.arg_1, flags=flags)
async def stopwar_second_manipulation_argument(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_second_manipulation_argument'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"))
    await state.set_state(StopWarState.arg_2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"), state=StopWarState.arg_2, flags=flags)
async def stopwar_third_manipulation_argument(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_third_manipulation_argument'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"))
    await state.set_state(StopWarState.arg_3)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–°–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç üëâ"), state=StopWarState.arg_3, flags=flags)
async def stopwar_fourth_manipulation_argument(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_fourth_manipulation_argument'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —É–±–µ–¥–∏–ª–∏ üëç"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —É–±–µ–¥–∏–ª–∏ üëé"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.in_({"–î–∞, —É–±–µ–¥–∏–ª–∏ üëç", "–ù–µ—Ç, –Ω–µ —É–±–µ–¥–∏–ª–∏ üëé", "–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è"}),
                state=StopWarState.arg_3, flags=flags)
async def stopwar_result(message: Message, state: FSMContext):
    await state.set_state(StopWarState.result)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='stopwar_final_result', value=message.text)
    f_all = await mongo_count_docs('database', 'statistics_new', {'stopwar_final_result': {'$exists': True}})
    f_yes = await mongo_count_docs('database', 'statistics_new', {'stopwar_final_result': '–î–∞, —É–±–µ–¥–∏–ª–∏ üëç'})
    f_no = await mongo_count_docs('database', 'statistics_new', {'stopwar_final_result': '–ù–µ—Ç, –Ω–µ —É–±–µ–¥–∏–ª–∏ üëé'})
    f_idk = await mongo_count_docs('database', 'statistics_new', {'stopwar_final_result': '–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è'})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'stopwar_result'}), f_all)
    txt.replace('AA', f_yes)
    txt.replace('BB', f_no)
    txt.replace('CC', f_idk)
    await message.answer(txt(), disable_web_page_preview=True)
    await stopwar_pre_timer(message)


@router.message(F.text.contains('ü§ù'), state=StopWarState.final, flags=flags)
async def stopwar_pre_timer(message: Message):
    text_1 = await sql_safe_select('text', 'texts', {'name': 'stopwar_pre_timer'})
    time = await day_counter(message.from_user)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üéâ"))
    await message.answer(text_1.replace('[YY:YY]', str(time)), reply_markup=nmarkup.as_markup(resize_keyboard=True),
                         disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üéâ"), flags=flags)
async def stopwar_timer(message: Message, bot: Bot):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='will_they_stop', value=message.text)
    link = await ref_master(bot, message.from_user.id)
    text_1 = (await sql_safe_select('text', 'texts', {'name': 'stopwar_hello_world'})).replace('[LINK]', link)
    text_2 = re.sub('(?<=href\=\")(.*?)(?=\")', link,
                    (await sql_safe_select('text', 'texts', {'name': 'stopwar_send_me'})))
    text_3 = await sql_safe_select('text', 'texts', {'name': 'stopwar_send_the_message'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–µ —Å–æ–≤–µ—Ç—ã? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    user_info = await mongo_select_info(message.from_user.id)
    if user_info['datetime_end'] is None:
        sec = 299
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        bot_message = await message.answer('5:00')
        try:
            await message.answer(text_1, disable_web_page_preview=True)
            await message.answer(text_2, disable_web_page_preview=True)
            await message.answer(text_3, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                                 disable_web_page_preview=True)
        except Exception as er:
            await logg.get_error(er)
        m_id = bot_message.message_id
        await bot.pin_chat_message(chat_id=message.from_user.id, message_id=m_id, disable_notification=True)
        await mongo_update_stat_new(tg_id=message.from_user.id, column='timer', value='–î–∞')
        await redis_just_one_write(f'Usrs: {message.from_user.id}: count:', '1')
        while sec:
            m, s = divmod(sec, 60)
            sec_t = '{:02d}:{:02d}'.format(m, s)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=m_id, text=f'{sec_t}')
            await asyncio.sleep(1)
            sec -= 1
        await mongo_update_stat(message.from_user.id, 'end')
        await asyncio.sleep(1)
        await del_key(f"Current_users: {message.from_user.id}")
        await del_key(f'Usrs: {message.from_user.id}: count:')
        textend = await sql_safe_select('text', 'texts', {'name': 'stopwar_end_timer'})
        await message.answer(textend, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                             disable_web_page_preview=True)
        await bot.delete_message(chat_id=message.from_user.id, message_id=m_id)
    else:
        await del_key(f'Usrs: {message.from_user.id}: count:')
        try:
            await message.answer(text_1, disable_web_page_preview=True)
            await message.answer(text_2, disable_web_page_preview=True)
            await message.answer(text_3, reply_markup=nmarkup.as_markup(resize_keyboard=True),
                                 disable_web_page_preview=True)
        except Exception as er:
            await logg.get_error(er)


@router.message((F.text == "–ö–∞–∫–∏–µ —Å–æ–≤–µ—Ç—ã? ü§î"), flags=flags)
async def stopwar_share_blindly(message: Message):
    timer = await redis_just_one_read(f'Usrs: {message.from_user.id}: count:')
    if timer == '1':
        text = await sql_safe_select('text', 'texts', {'name': 'stopwar_share_blindly'})
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üìù"))
        nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
        textend = await sql_safe_select('text', 'texts', {'name': 'stopwar_end_timer'})
        await message.answer(textend, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML",
                             disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üìù"), flags=flags)
async def stopwar_bulk_forwarding(message: Message):
    timer = await redis_just_one_read(f'Usrs: {message.from_user.id}: count:')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"))
    if timer == '1':
        await simple_media(message, 'stopwar_bulk_forwarding', reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        textend = await sql_safe_select('text', 'texts', {'name': 'stopwar_end_timer'})
        await message.answer(textend, reply_markup=nmarkup.as_markup(resize_keyboard=True), parse_mode="HTML")


@router.message((F.text == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá"), flags=flags)
async def main_menu(message: Message, bot: Bot, state: FSMContext):
    timer = await redis_just_one_read(f'Usrs: {message.from_user.id}: count:')
    if timer == '1':
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞,'
                             ' –ø—Ä–µ–∂–¥–µ, —á–µ–º –ø–æ–ø–∞—Å—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–µ —Ç–µ—Ä—è–π—Ç–µ'
                             ' —ç—Ç–æ –≤—Ä–µ–º—è –∑—Ä—è ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–Ω–æ–π —Å–æ —Å–≤–æ–∏–º–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏,'
                             ' –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏! üôè')
    else:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='main_menu', value='–î–∞')
        await state.set_state(MainMenuStates.main)
        await mainmenu_really_menu(message, state)
