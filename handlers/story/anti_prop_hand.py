import asyncio
from typing import List

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove, User
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bata import all_data
from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import poll_get, redis_just_one_read, sql_select_row_like, mongo_game_answer, mongo_count_docs, \
    redis_just_one_write
from data_base.DBuse import sql_safe_select, data_getter
from filters.MapFilters import WebPropagandaFilter, PplPropagandaFilter, \
    NotYandexPropagandaFilter
from keyboards.map_keys import antip_killme_kb, polls_continue_kb
from resources.all_polls import antip_q1_options, antip_q2_options, antip_q3_options
from resources.variables import release_date
from states.antiprop_states import propaganda_victim
from states.true_goals_states import TrueGoalsState
from utilts import simple_media, dynamic_media_answer, simple_media_bot, simple_video_album, CoolPercReplacer

flags = {"throttling_key": "True"}
router = Router()

router.message.filter(state=propaganda_victim)


async def antip_wolves(user: User, bot: Bot, state: FSMContext):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await state.set_state(propaganda_victim.next_0)
    await simple_media_bot(bot, user.id, 'antip_wolves', reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), flags=flags, state=propaganda_victim.next_0)
async def antip_black_and_white(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_black_and_white'})
    nmarkap = ReplyKeyboardBuilder()
    await state.set_state(propaganda_victim.fake_tv)
    nmarkap.add(types.KeyboardButton(text="–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëå"))
    nmarkap.row(types.KeyboardButton(text="–ù–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í üôÖ‚Äç‚ôÄÔ∏è"))
    nmarkap.adjust(2)
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == '–ù–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í üôÖ‚Äç‚ôÄÔ∏è'), state=propaganda_victim.fake_tv, flags=flags)
async def antip_just_a_little(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_just_a_little'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, —É–±–µ–¥–∏–ª üëå"))
    nmarkap.row(types.KeyboardButton(text="–õ–∞–¥–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä—é ü§∑Ô∏è"))
    tv_answers = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: tv:')
    polit_status = await redis_just_one_read(f'Usrs: {message.from_user.id}: Start_answers: NewPolitStat:')
    if '–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî' in tv_answers \
            or "–ù–µ –∑–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—é –Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–í, –Ω–∏ –∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≤–µ—Ä—Å–∏—é ü§∑‚Äç‚ôÇ" in tv_answers:
        if '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ–π–Ω—ã üïä' == polit_status:
            nmarkap.row(types.KeyboardButton(text="–í—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í üôÖ‚Äç‚ôÇÔ∏è"))

    nmarkap.adjust(2, 1)

    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message(((F.text.contains('–í—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å')) | (F.text.contains('—É–¥–∏–≤–ª–µ–Ω(–∞)')) | (
        F.text.contains('—á—Ç–æ –ø–æ –¢–í –≤—Ä—É—Ç')) | (F.text.contains('–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –≤ —à–æ–∫–µ'))), flags=flags)
async def antip_TV_makes_them_bad(message: Message):
    if '–í—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å' in message.text:
        await message.answer('–•–æ—Ä–æ—à–æ üëå')

    trust = await mongo_count_docs('database', 'statistics_new', {'tv_love_gen': '–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ'})
    dont_trust = await mongo_count_docs('database', 'statistics_new', {'tv_love_gen': '–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî'})
    maybe_trust = await mongo_count_docs('database', 'statistics_new', {'tv_love_gen': '–°–∫–æ—Ä–µ–µ –¥–∞ üëç'})
    maybe_dont_trust = await mongo_count_docs('database', 'statistics_new', {'tv_love_gen': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé'})

    var_true_and_trust = await mongo_count_docs(
        'database', 'statistics_new', {'start_continue_or_peace_results': '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è',
                                       'tv_love_gen': '–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é ‚úÖ'})
    var_true_and_dont_trust = await mongo_count_docs(
        'database', 'statistics_new', {'start_continue_or_peace_results': '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è',
                                       'tv_love_gen': '–ù–µ—Ç, –Ω–µ –≤–µ—Ä—é –Ω–∏ —Å–ª–æ–≤—É ‚õî'})
    var_true_and_maybe_trust = await mongo_count_docs(
        'database', 'statistics_new', {'start_continue_or_peace_results': '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è',
                                       'tv_love_gen': '–°–∫–æ—Ä–µ–µ –¥–∞ üëç'})
    var_true_and_maybe_dont_trust = await mongo_count_docs(
        'database', 'statistics_new', {'start_continue_or_peace_results': '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚öîÔ∏è',
                                       'tv_love_gen': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé'})

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_TV_makes_them_bad'}), trust)
    txt.replace('AA', var_true_and_trust)
    txt.replace('BB', var_true_and_maybe_trust, temp_base=maybe_trust)
    txt.replace('CC', var_true_and_maybe_dont_trust, temp_base=maybe_dont_trust)
    txt.replace('DD', var_true_and_dont_trust, temp_base=dont_trust)

    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î"))
    nmarkap.row(types.KeyboardButton(text="–≠—Ç–æ –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ üëå"))
    nmarkap.adjust(2)
    await message.answer(txt(), disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message(((F.text == '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëå') | F.text.contains('–•–æ—Ä–æ—à–æ, —É–±–µ–¥–∏–ª') |
                 F.text.contains('–õ–∞–¥–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä—é')), state=propaganda_victim.fake_tv, flags=flags)
async def antip_time_wasted(message: Message):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–í —á—ë–º –ø–æ–¥–≤–æ—Ö? ü§î"))
    nmarkap.row(types.KeyboardButton(text="–Ø –∑–∞–º–µ—Ç–∏–ª(–∞)! üòØ"))
    nmarkap.adjust(2)
    await simple_media(message, 'antip_time_wasted', nmarkap.as_markup(resize_keyboard=True))


@router.message(((F.text == '–í —á—ë–º –ø–æ–¥–≤–æ—Ö? ü§î') | (F.text == '–Ø –∑–∞–º–µ—Ç–∏–ª(–∞)! üòØ')), flags=flags)
async def antip_water_lie(message: Message, state: FSMContext):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await state.set_state(propaganda_victim.next_2)
    await simple_media(message, 'antip_water_lie', nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=propaganda_victim.next_2, flags=flags)
async def antip_cant_unsee(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_cant_unsee'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text="–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å üó£"))
    nmarkap.add(types.KeyboardButton(text="–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ü§∑‚Äç‚ôÄÔ∏èÔ∏è"))
    nmarkap.row(types.KeyboardButton(text='–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å, –Ω–æ –∏ –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ —Ç–∞–∫ –∂–µ –¥–µ–ª–∞—é—Ç ‚òùÔ∏è'))
    nmarkap.add(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkap.adjust(2, 1, 1)
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å, –Ω–æ –∏ –Ω–∞') | F.text.contains('–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è')
                 | F.text.contains('–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å') | F.text.contains('–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å')),
                state=propaganda_victim.next_2, flags=flags)
async def antip_eye_log(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='antip_eye_log', value=message.text)
    if '–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å, –Ω–æ –∏ –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ —Ç–∞–∫ –∂–µ –¥–µ–ª–∞—é—Ç ‚òùÔ∏è' == message.text:
        text_fake = await sql_safe_select('text', 'texts', {'name': 'antip_eye_log'})
        await message.answer(text_fake)
    await state.update_data(antip_eye_log_answ=message.text)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='corpses', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_how_could_they'})
    fake_1 = await mongo_count_docs('database', 'statistics_new',
                                    {'antip_eye_log': '–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å üó£'})
    fake_2 = await mongo_count_docs('database', 'statistics_new',
                                    {'antip_eye_log': '–≠—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å, –Ω–æ –∏ –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ —Ç–∞–∫ –∂–µ –¥–µ–ª–∞—é—Ç ‚òùÔ∏è'})
    random = await mongo_count_docs('database', 'statistics_new',
                                    {'antip_eye_log': '–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ü§∑‚Äç‚ôÄÔ∏èÔ∏è'})

    dont_know = await mongo_count_docs('database', 'statistics_new',
                                       {'antip_eye_log': '–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è'})
    fake = fake_1 + fake_2
    all_count = fake + random + dont_know
    try:
        fake_result = str(round(fake / all_count * 100))
        random_result = int(round(random / all_count * 100))
        dont_know_result = int(round(dont_know / all_count * 100))
        text = text.replace('XX', fake_result)
        text = text.replace('YY', str(random_result))
        text = text.replace('ZZ', str(dont_know_result))
        text = text.replace('AA', str(random_result + dont_know_result))
    except:
        text = text.replace('XX', 'N/A')
        text = text.replace('YY', 'N/A')
        text = text.replace('ZZ', 'N/A')
        text = text.replace('AA', 'N/A')

    nmarkap = ReplyKeyboardBuilder()
    await state.set_state(propaganda_victim.next_1)
    nmarkap.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π') | F.text.contains('–•–æ—Ä–æ—à–æ ü§ù')),
                state=propaganda_victim.next_1, flags=flags)
async def antip_stop_emotions(message: Message, state: FSMContext):
    data = await state.get_data()
    if '–Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–∂—å' not in data['antip_eye_log_answ'] and '–•–æ—Ä–æ—à–æ' not in message.text:
        text = await sql_safe_select('text', 'texts', {'name': 'antip_listen_to_facts'})
        nmarkap = ReplyKeyboardBuilder()
        nmarkap.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ ü§ù"))
        await state.set_state(propaganda_victim.next_1)
        await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))
    else:
        await state.set_state(propaganda_victim.start)
        text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_statistics'})
        nmarkap = ReplyKeyboardBuilder()
        await state.set_state(propaganda_victim.start)
        nmarkap.row(types.KeyboardButton(text="–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ"))
        nmarkap.row(types.KeyboardButton(text="–ù—É, —É–¥–∏–≤–∏ –º–µ–Ω—è üßê"))
        nmarkap.adjust(2)
        await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–û—Ç–∫—Ä–æ–π –º–Ω–µ –≥–ª–∞–∑–∞ üëÄ', "–ù—É, —É–¥–∏–≤–∏ –º–µ–Ω—è üßê"})), flags=flags)
async def antip_censorship_lie(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.choose_TV)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_censorship_lie'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.row(types.KeyboardButton(text="–ë–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–æ—Ä–∏—é –∑–∞–≥–æ–≤–æ—Ä–∞ üëΩ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—Ç–µ–æ—Ä–∏—é –∑–∞–≥–æ–≤–æ—Ä–∞')), state=propaganda_victim.choose_TV, flags=flags)
async def antip_conspirasy(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_conspiracy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=propaganda_victim.choose_TV, flags=flags)
async def antip_pile_of_lies(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='false_on_tv', value='–î–∞')
    text = await sql_safe_select('text', 'texts', {'name': 'antip_pile_of_lies'})
    utv_list = ['1 –∫–∞–Ω–∞–ª üì∫', '–†–æ—Å—Å–∏—è 1 / 24 üì∫', '–ù–¢–í üì∫', '–ó–≤–µ–∑–¥–∞ üì∫']
    await state.update_data(first_tv_count=0, rus24_tv_count=0, HTB_tv_count=0, Star_tv_count=0)
    nmarkup = ReplyKeyboardBuilder()
    for channel in utv_list:
        nmarkup.row(types.KeyboardButton(text=channel))
    nmarkup.adjust(2, 2)
    nmarkup.row(types.KeyboardButton(text='–£–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –¢–í üì∫'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–£–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –¢–í üì∫") |
                 (F.text == "–ü–æ–¥–æ–∂–¥–∏. –ê —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É —Ç—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å? ü§î")),
                state=(propaganda_victim.choose_TV, propaganda_victim.after_quizez),
                flags=flags)
async def antip_ukrainian_lie_1(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î'))
    await simple_media(message, 'antip_ukrainian_lie_1', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"),
                state=(propaganda_victim.choose_TV, propaganda_victim.after_quizez), flags=flags)
async def antip_ukrainian_lie_2(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ'))
    await simple_media(message, 'antip_ukrainian_lie_2', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"), state=(propaganda_victim.choose_TV, propaganda_victim.after_quizez),
                flags=flags)
async def antip_already_not_involved(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_already_not_involved'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Ukr_tv:', 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('1 –∫–∞–Ω–∞–ª')) & ~(F.text.contains('üá∑üá∫')), flags=flags)
async def antiprop_tv_first(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_first)
        count = (await state.get_data())['first_tv_count'] + 1
        await state.update_data(first_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await dynamic_media_answer(message, 'tv_first_lie_', count, nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('1 / 24 üì∫')), flags=flags)
async def antiprop_tv_24(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_russia24)
        count = (await state.get_data())['rus24_tv_count'] + 1
        await state.update_data(rus24_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞).–ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await dynamic_media_answer(message, 'tv_24_lie_', count, nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ù–¢–í üì∫')), flags=flags)
async def antiprop_tv_HTB(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_HTB)
        count = (await state.get_data())['HTB_tv_count'] + 1
        await state.update_data(HTB_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await dynamic_media_answer(message, 'tv_HTB_lie_', count, nmarkup.as_markup(resize_keyboard=True))
    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ó–≤–µ–∑–¥')), flags=flags)
async def antiprop_tv_star(message: Message, state: FSMContext):
    try:
        await state.set_state(propaganda_victim.tv_star)
        count = (await state.get_data())['Star_tv_count'] + 1
        await state.update_data(Star_tv_count=count)
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–°—é–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–∏–º –Ω–µ —Ç–∞–∫? ü§î"))
        await dynamic_media_answer(message, 'tv_star_lie_', count, nmarkup.as_markup(resize_keyboard=True))

    except TelegramBadRequest:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—é–∂–µ—Ç–æ–≤ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥—Ä—É–≥–æ–π?',
                             reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ß—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_first, flags=flags)
async def russia_tv_first_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['first_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_select_row_like('assets', count + 1, {'name': 'tv_first_lie_'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å 1 –∫–∞–Ω–∞–ª–∞ üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í ‚úã"))
    await dynamic_media_answer(message, 'tv_first_reb_', count, nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ß—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_russia24, flags=flags)
async def tv_russia24_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['rus24_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_select_row_like('assets', count + 1, {'name': 'tv_24_lie_'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç c –†–æ—Å—Å–∏–∏ 1 / 24 üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í ‚úã"))
    await dynamic_media_answer(message, 'tv_24_reb_', count, nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ß—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_HTB, flags=flags)
async def tv_HTB_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['HTB_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_select_row_like('assets', count + 1, {'name': 'tv_HTB_lie_'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç –ù–¢–í üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í ‚úã"))
    await dynamic_media_answer(message, 'tv_HTB_reb_', count, nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ß—Ç–æ')) & F.text.contains('–Ω–µ —Ç–∞–∫'), state=propaganda_victim.tv_star, flags=flags)
async def tv_star_reb(message: Message, state: FSMContext):
    count = (await state.get_data())['Star_tv_count']
    nmarkup = ReplyKeyboardBuilder()
    if await sql_select_row_like('assets', count + 1, {'name': 'tv_star_lie_'}) is not False:
        nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –æ–¥–∏–Ω —Å—é–∂–µ—Ç —Å —Ç–µ–ª–µ–∫–∞–Ω–∞–ª–∞ –ó–≤–µ–∑–¥–∞ üì∫"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª üîÑ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í ‚úã"))
    await dynamic_media_answer(message, 'tv_star_reb_', count, nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ') & (F.text.contains('–ø–æ –¢–í ‚úã'))), flags=flags)
async def antip_TV_how_about_more(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_TV_how_about_more'})
    nmarkup = ReplyKeyboardBuilder()
    data = await state.get_data()
    if (await sql_select_row_like('assets', data['Star_tv_count'] + 1, {'name': 'tv_star_lie_'})) is not False or \
            (await sql_select_row_like('assets', data['HTB_tv_count'] + 1, {'name': 'tv_HTB_lie_'})) is not False or \
            (await sql_select_row_like('assets', data['rus24_tv_count'] + 1, {'name': 'tv_24_lie_'})) is not False or \
            (await sql_select_row_like('assets', data['first_tv_count'] + 1, {'name': 'tv_first_lie_'})) is not False:
        nmarkup.row(types.KeyboardButton(text='–ù–µ—Ç, –ø–æ—Å–º–æ—Ç—Ä–∏–º –µ—â—ë –ª–æ–∂—å –ø–æ –¢–í üì∫'))
    nmarkup.row(types.KeyboardButton(text='–î–∞, –∑–∞–∫–æ–Ω—á–∏–º —Å –¢–í üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == '–î–∞, –∑–∞–∫–æ–Ω—á–∏–º —Å –¢–í üëå'), flags=flags)
async def antip_crossed_boy_1(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.choose_TV)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'))
    await simple_media(message, 'antip_crossed_boy_1', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫'), state=propaganda_victim.choose_TV, flags=flags)
async def antip_crossed_boy_2(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥"))
    await simple_media(message, 'antip_crossed_boy_2', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π... ‚è≥'), flags=flags)
async def antip_crossed_boy_3(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_crossed_boy_3'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å üò±"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üòï"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–∞–∫–æ–π —É–∂–∞—Å üò±") | (F.text == "–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üòï"), flags=flags)
async def antip_be_honest(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='crucified_man', value=message.text)
    text2 = await sql_safe_select('text', 'texts', {'name': 'antip_be_honest'})
    await message.answer(text2, reply_markup=antip_killme_kb(), disable_web_page_preview=True)


@router.message(((F.text.contains('–¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–∫–∞–Ω–∞–ª')) | (F.text.contains('–µ—â—ë –ª–æ–∂—å –ø–æ –¢–í')) |
                 (F.text.contains('–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå'))),
                state=(propaganda_victim.choose_TV, propaganda_victim.tv_HTB, propaganda_victim.tv_star,
                       propaganda_victim.tv_russia24, propaganda_victim.tv_first), flags=flags)
async def antip_lies_for_you(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.choose_TV)
    bigdata = await state.get_data()
    nmarkup = ReplyKeyboardBuilder()
    if await sql_select_row_like('assets', bigdata["first_tv_count"] + 1, {'name': "tv_first_lie_"}):
        nmarkup.row(types.KeyboardButton(text='1 –∫–∞–Ω–∞–ª üì∫'))
    if await sql_select_row_like('assets', bigdata["rus24_tv_count"] + 1, {'name': "tv_24_lie_"}):
        nmarkup.add(types.KeyboardButton(text='–†–æ—Å—Å–∏—è 1 / 24 üì∫'))
    if await sql_select_row_like('assets', bigdata["Star_tv_count"] + 1, {'name': "tv_star_lie_"}):
        nmarkup.row(types.KeyboardButton(text='–ó–≤–µ–∑–¥–∞ üì∫'))
    if await sql_select_row_like('assets', bigdata["HTB_tv_count"] + 1, {'name': "tv_HTB_lie_"}):
        nmarkup.add(types.KeyboardButton(text='–ù–¢–í üì∫'))
    if not await redis_just_one_read(f'Usrs: {message.from_user.id}: Ukr_tv:'):
        nmarkup.add(types.KeyboardButton(text='–£–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –¢–í üì∫'))
    nmarkup.adjust(2)
    nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∂—å –ø–æ –¢–í ‚úã"))
    text = await sql_safe_select('text', 'texts', {'name': 'antip_lies_for_you'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WebPropagandaFilter(), (
        (F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î')) | (F.text.contains('–≠—Ç–æ –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ üëå'))), flags=flags)
@router.message(WebPropagandaFilter(), commands=["test"])
async def antip_not_only_TV(message: Message, web_lies_list: List[str], state: FSMContext):
    await state.set_state(propaganda_victim.web)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='grade_tv', value=message.text)
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ"))
    all_answers_user = web_lies_list.copy()
    try:
        all_answers_user.remove('Meduza / –î–æ–∂–¥—å / –ë–∏-–±–∏-—Å–∏')
    except Exception as err:
        print(err)
    try:
        all_answers_user.remove("–í–∏–∫–∏–ø–µ–¥–∏—è")
    except Exception as err:
        print(err)
    try:
        all_answers_user.remove("–Ø–Ω–¥–µ–∫—Å")
    except Exception as err:
        print(err)
    try:
        all_answers_user.remove("–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...")
    except Exception as err:
        print(err)

    await state.update_data(RIANEWS_c=0)
    await state.update_data(RUSSIATODAY_c=0)
    await state.update_data(TCHANEL_WAR_c=0)
    await state.update_data(TACC_c=0)
    await state.update_data(MINISTRY_c=0)
    await state.update_data(count_news=0)
    await state.update_data(all_answers_user=all_answers_user)  # –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channel = all_answers_user[0]
    text = await sql_safe_select('text', 'texts', {'name': 'antip_not_only_TV'})
    text = text.replace('[[–ø–µ—Ä–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫]]', channel)
    text = text.replace('[[–µ—â—ë —Ä–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞]]', channel)
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


async def keyboard_for_next_chanel(text):
    markup = ReplyKeyboardBuilder()
    if text:
        markup.row(types.KeyboardButton(text=text + ' üëÄ'))
    markup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö"))
    return markup.as_markup(resize_keyboard=True)


async def keyboard_for_all_chanel(lst_kb):
    markup = ReplyKeyboardBuilder()

    for button in lst_kb:
        markup.row(types.KeyboardButton(text=button + ' üëÄ'))
        markup.adjust(2)
    markup.row(types.KeyboardButton(text='–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è'))
    return markup.as_markup(resize_keyboard=True)


async def get_tag(viewed_channel) -> str:
    if '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏' in viewed_channel:
        return 'RIANEWS'
    elif 'Russia Today' in viewed_channel:
        return 'RUSSIATODAY'
    elif '–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ¬´–í–æ–π–Ω–∞' in viewed_channel:
        return 'TCHANEL_WAR'
    elif '–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞' in viewed_channel:
        return 'TACC'
    elif '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ' in viewed_channel:
        return 'MINISTRY'


async def get_count(tag: str, state) -> int:
    data = await state.get_data()
    if 'RIANEWS' == tag:
        count = data['RIANEWS_c']
        await state.update_data(RIANEWS_c=count + 1)
        return count
    elif 'RUSSIATODAY' == tag:
        count = data['RUSSIATODAY_c']
        await state.update_data(RUSSIATODAY_c=count + 1)
        return count
    elif 'TCHANEL_WAR' == tag:
        count = data['TCHANEL_WAR_c']
        await state.update_data(TCHANEL_WAR_c=count + 1)
        return count
    elif 'TACC' == tag:
        count = data['TACC_c']
        await state.update_data(TACC_c=count + 1)
        return count
    elif 'MINISTRY' == tag:
        count = data['MINISTRY_c']
        await state.update_data(MINISTRY_c=count + 1)
        return count


@router.message(((F.text.contains('–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ')) | (F.text.contains('–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏ üëÄ')) | (
        F.text.contains('Russia Today üëÄ')) | (
                         F.text.contains('–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§ üëÄ')) | (
                         F.text.contains('–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ¬´–í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏¬ª üëÄ')) | (F.text.contains('–†–ë–ö üëÄ')) | (
                         F.text.contains('–¢–ê–°–° / –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞ / –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä / Lenta.ru / –ò–∑–≤–µ—Å—Ç–∏—è üëÄ')) |
                 (F.text.contains('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))) & ~(
        F.text.contains('–µ—â–µ')), flags=flags)  # –≤—Ö–æ–¥ –≤ —Ü–∏–∫–ª
async def show_the_news(message: types.Message, state: FSMContext):
    data = await state.get_data()
    all_answers_user = data['all_answers_user']
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î'))
    if message.text == '–ü–æ–∫–∞–∂–∏ –Ω–æ–≤–æ—Å—Ç—å üëÄ':
        await mongo_update_stat_new(tg_id=message.from_user.id, column='false_on_web_prop', value='–î–∞')
        tag = await get_tag(all_answers_user[0])
        news = await data_getter(f"SELECT name FROM assets WHERE name LIKE '{tag}_media_%'")
        count = await get_count(tag, state)
        await state.update_data(viewed_channel=all_answers_user[0])
        await state.update_data(actual_count=count)
        await simple_media(message, news[count][0], reply_markup=markup.as_markup(resize_keyboard=True))
    elif message.text != '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        tag = await get_tag(message.text)
        news = await data_getter(f"SELECT name FROM assets WHERE name LIKE '{tag}_media_%'")
        count = await get_count(tag, state)
        await state.update_data(viewed_channel=message.text[:-2])
        await state.update_data(actual_count=count)
        await simple_media(message, news[count][0], reply_markup=markup.as_markup(resize_keyboard=True))
    elif message.text == '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ':
        not_viewed_chanel = data['not_viewed_chanel']
        tag = await get_tag(not_viewed_chanel)
        news = await data_getter(f"SELECT name FROM assets WHERE name LIKE '{tag}_media_%'")
        count = await get_count(tag, state)
        await state.update_data(viewed_channel=not_viewed_chanel)
        await state.update_data(actual_count=count)
        await simple_media(message, news[count][0], reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î')), flags=flags)
async def revealing_the_news(message: types.Message, state: FSMContext):
    data = await state.get_data()
    count = data['actual_count']
    all_answers_user = data['all_answers_user']
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª  –º–µ–Ω—è—Ç—å —ç—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    tag = await get_tag(viewed_channel)
    news_exposure = await data_getter(f"SELECT name FROM assets WHERE name LIKE '{tag}_exposure_%'")
    if len(news_exposure) != count + 1:
        keyboard = await keyboard_for_next_chanel(f'–ü–æ–∫–∞–∂–∏ –µ—â–µ –Ω–æ–≤–æ—Å—Ç—å —Å {viewed_channel}')
        await simple_media(message, news_exposure[count][0], reply_markup=keyboard)
    else:
        all_answers_user.remove(viewed_channel)
        await state.update_data(all_answers_user=all_answers_user)
        markup = ReplyKeyboardBuilder()
        markup.row(types.KeyboardButton(text='–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö'))
        await simple_media(message, news_exposure[count][0], reply_markup=markup.as_markup(resize_keyboard=True))


@router.message(text_contains=('–ü–æ–∫–∞–∂–∏', '–µ—â–µ', '–Ω–æ–≤–æ—Å—Ç—å'), content_types=types.ContentType.TEXT, text_ignore_case=True,
                flags=flags)
async def show_more(message: types.Message, state: FSMContext):
    data = await state.get_data()
    viewed_channel = data['viewed_channel']  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª  –º–µ–Ω—è—Ç—å —ç—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    tag = await get_tag(viewed_channel)
    count = await get_count(tag, state)
    actual_count = data['actual_count']
    await state.update_data(actual_count=actual_count + 1)
    news_media = await data_getter(f"SELECT name FROM assets WHERE name LIKE '{tag}_media_%'")
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞). –ß—Ç–æ —Å –Ω–µ–π –Ω–µ —Ç–∞–∫? ü§î'))
    await simple_media(message, news_media[count][0], reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ ü§ö')), flags=flags)
async def revealing_the_news(message: Message, state: FSMContext):
    data = await state.get_data()
    viewed_channel = data['viewed_channel']
    all_answers_user = data['all_answers_user']
    try:  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        all_answers_user.remove(viewed_channel)  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏
    except:  # –•–æ—Ç—å –æ–¥–∏–Ω —Å—é–∂–µ—Ç
        pass  # –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    await state.update_data(all_answers_user=all_answers_user)  # –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
    if len(all_answers_user) != 0:
        all_answers_user = data['all_answers_user']
        markup = await keyboard_for_all_chanel(all_answers_user)
        text = await sql_safe_select('text', 'texts', {'name': 'antip_another_web_lie'})
        await message.answer(text, reply_markup=markup)
    else:
        redis = all_data().get_data_red()
        for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:*"):
            if key != "–Ø–Ω–¥–µ–∫—Å" or key != "–í–∏–∫–∏–ø–µ–¥–∏—è":
                redis.delete(key)
        propagandist_list = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
        if set(propagandist_list).isdisjoint(
                ("–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤",
                 "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –°–∏–º–æ–Ω—å—è–Ω", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤")) is False:
            await antip_bad_people_lies(message, propagandist_list, state)
        else:
            await antip_funny_propaganda(message, state)


@router.message((F.text.contains('–•–≤–∞—Ç–∏—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ üôÖ‚Äç‚ôÇÔ∏è')), flags=flags)
async def skip_web(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_channel = data['all_answers_user']  # –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    markup = ReplyKeyboardBuilder()
    markup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º üëÄ'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –∏ —Ç–∞–∫ –∑–Ω–∞—é, —á—Ç–æ –æ–Ω–∏ –≤—Ä—É—Ç üòí'))
    markup.row(types.KeyboardButton(text='–ù–µ –Ω–∞–¥–æ, —è –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É –¥–æ–≤–µ—Ä—è—Ç—å –∏–º üëç'))
    lst_web_answers = str(', '.join(answer_channel))
    next_channel = answer_channel[0]
    if next_channel == '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã –†–§':
        next_channel = '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –æ–±–æ—Ä–æ–Ω—ã –†–§'
    if next_channel == '–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ¬´–í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏¬ª':
        next_channel = '–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ªa ¬´–í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏¬ª'

    text = await sql_safe_select('text', 'texts', {'name': 'antip_maybe_just_one'})
    text = text.replace('[[—Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∫—Ä–∞—Å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]]', lst_web_answers)
    text = text.replace('[[–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞]]', next_channel)
    await state.update_data(not_viewed_chanel=answer_channel[0])
    await message.answer(text, reply_markup=markup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text.contains('–ù–µ –Ω–∞–¥–æ')) & ~(F.text.contains('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'))), state=(propaganda_victim.web,
                                                                                         propaganda_victim.options),
                flags=flags)
async def antip_web_exit_1(message: Message, state: FSMContext):
    redis = all_data().get_data_red()
    for key in redis.scan_iter(f"Usrs: {message.from_user.id}: Start_answers: ethernet:"):
        if key != "–Ø–Ω–¥–µ–∫—Å" or key != "–í–∏–∫–∏–ø–µ–¥–∏—è":
            redis.delete(key)
    if await state.get_state() == "propaganda_victim:options":
        await antip_funny_propaganda(message, state)
        redis.delete(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
        return
    propagandist_list = await poll_get(f'Usrs: {message.from_user.id}: Start_answers: who_to_trust_persons:')
    if set(propagandist_list).isdisjoint(("–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤", "–°–µ—Ä–≥–µ–π –õ–∞–≤—Ä–æ–≤",
                                          "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –°–∏–º–æ–Ω—å—è–Ω", "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å–µ–≤", "–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤")) is False:
        await antip_bad_people_lies(message, propagandist_list, state)
    else:
        await antip_funny_propaganda(message, state)


@router.message(PplPropagandaFilter(),
                (F.text.contains('–≠—Ç–æ –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ üëå')) | (F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î')), flags=flags)
async def antip_bad_people_lies(message: Message, ppl_lies_list: List[str], state: FSMContext):
    await state.set_state(propaganda_victim.ppl_propaganda)
    persons = ppl_lies_list
    text = await sql_safe_select('text', 'texts', {'name': 'antip_bad_people_lies'})
    text = text.replace('[[–ø–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å]]', persons[0] if len(persons) > 0 else 'N/A')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω—ë–º üôÇ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î')) | (F.text.contains('–∏ —Ç–∞–∫')) | (F.text.contains('—è –≤—Å—ë —Ä–∞–≤–Ω–æ')),
                state=(propaganda_victim.choose_TV, propaganda_victim.web, propaganda_victim.ppl_propaganda,
                       propaganda_victim.fake_tv),
                flags=flags)
async def antip_funny_propaganda(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.quiz_1)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"))
    await simple_media(message, 'antip_funny_propaganda', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"), state=propaganda_victim.quiz_1, flags=flags)
async def antip_quiz_1(message: Message, bot: Bot):
    await bot.send_poll(message.from_user.id, '–°–∫–æ–ª—å–∫–æ?', antip_q1_options,
                        is_anonymous=False, correct_option_id=3, type='quiz',
                        reply_markup=polls_continue_kb())


@router.poll_answer(state=propaganda_victim.quiz_1, flags=flags)
async def antip_quiz_1_answer(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    answer = poll_answer.option_ids[0]
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='antiprop_quiz_1',
                                value=antip_q1_options[answer])
    p_all = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_1': {'$exists': True}})
    p3000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_1': '–û–∫–æ–ª–æ 3000 —á–µ–ª–æ–≤–µ–∫'})
    p11000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_1': '–û–∫–æ–ª–æ 11000 —á–µ–ª–æ–≤–µ–∫'})
    p25000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_1': '–û–∫–æ–ª–æ 25000 —á–µ–ª–æ–≤–µ–∫'})
    p40000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_1': '–û–∫–æ–ª–æ 40000 —á–µ–ª–æ–≤–µ–∫'})

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_quiz_1_answer'}), p_all)
    txt.replace('AA', p3000)
    txt.replace('BB', p11000)
    txt.replace('CC', p25000)
    txt.replace('DD', p40000)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media_bot(bot, poll_answer.user.id, 'antip_quiz_1_answer', nmarkup.as_markup(resize_keyboard=True),
                           custom_caption=txt())


@router.message((F.text.in_({'–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î', "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})), state=propaganda_victim.quiz_1, flags=flags)
async def antip_how_much_they_lie(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.quiz_2)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"))
    await simple_media(message, 'antip_how_much_they_lie', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è"), state=propaganda_victim.quiz_2, flags=flags)
async def antip_quiz_2(message: Message, bot: Bot):
    await bot.send_poll(message.from_user.id, '–°–∫–æ–ª—å–∫–æ?', antip_q2_options,
                        is_anonymous=False, correct_option_id=3, type='quiz',
                        reply_markup=polls_continue_kb())


@router.poll_answer(state=propaganda_victim.quiz_2, flags=flags)
async def antip_quiz_2_answer(poll_answer: types.PollAnswer, bot: Bot):
    answer = poll_answer.option_ids[0]
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='antiprop_quiz_2',
                                value=antip_q2_options[answer])
    s_all = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_2': {'$exists': True}})
    s1000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_2': '–û–∫–æ–ª–æ 1000 —Å–∫–æ–ø–ª–µ–Ω–∏–π'})
    s4000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_2': '–û–∫–æ–ª–æ 4000 —Å–∫–æ–ø–ª–µ–Ω–∏–π'})
    s12000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_2': '–û–∫–æ–ª–æ 12000 —Å–∫–æ–ø–ª–µ–Ω–∏–π'})
    s39000 = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_2': '–û–∫–æ–ª–æ 39000 —Å–∫–æ–ø–ª–µ–Ω–∏–π'})

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_quiz_2_answer'}), s_all)
    txt.replace('AA', s1000)
    txt.replace('BB', s4000)
    txt.replace('CC', s12000)
    txt.replace('DD', s39000)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.add(types.KeyboardButton(text="–ß—Ç–æ–æ–æ? üò≥"))
    await simple_media_bot(bot, poll_answer.user.id, 'antip_quiz_2_answer', nmarkup.as_markup(resize_keyboard=True),
                           custom_caption=txt())


@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ', "–ß—Ç–æ–æ–æ? üò≥"})), state=propaganda_victim.quiz_2, flags=flags)
async def antip_noone_will_do_this(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await state.set_state(propaganda_victim.quiz_2)
    await simple_media(message, 'antip_noone_will_do_this', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=propaganda_victim.quiz_2, flags=flags)
async def antip_not_only_numbers(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ê –Ω–∞ —á—Ç–æ –µ—â—ë? ü§î"))
    await simple_media(message, 'antip_not_only_numbers', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ê –Ω–∞ —á—Ç–æ –µ—â—ë? ü§î"), state=propaganda_victim.quiz_2, flags=flags)
async def antip_what_they_told_us(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.quiz_3)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_what_they_told_us'})
    await message.answer(text, disable_web_page_preview=True)
    await message.answer_poll('–ö–∞–∫–∏–µ?', antip_q3_options, allows_multiple_answers=True, is_anonymous=False,
                              reply_markup=polls_continue_kb())


@router.poll_answer(state=propaganda_victim.quiz_3, flags=flags)
async def antip_unhumanity(poll_answer: types.PollAnswer, bot: Bot):
    answers = poll_answer.option_ids
    if answers == [0, 1, 2, 3, 4]:
        tomongo = '–û—Ç–º–µ—Ç–∏–ª –≤—Å–µ'
    else:
        tomongo = '–ù–µ –æ—Ç–º–µ—Ç–∏–ª –≤—Å–µ'
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='antiprop_quiz_3',
                                value=tomongo)
    l_all = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_3': {'$exists': True}})
    l_right = await mongo_count_docs('database', 'statistics_new', {'antiprop_quiz_3': '–û—Ç–º–µ—Ç–∏–ª –≤—Å–µ'})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_unhumanity'}), l_all)
    txt.replace('XX', l_right)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß—Ç–æ –∂–µ? ü§î"))
    await simple_media_bot(bot, poll_answer.user.id, 'antip_unhumanity', nmarkup.as_markup(resize_keyboard=True),
                           custom_caption=txt())


@router.message((F.text == "–ß—Ç–æ –∂–µ? ü§î"), state=propaganda_victim.quiz_3, flags=flags)
async def antip_torture_not_recommended(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_torture_not_recommended'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ —ç—Ç–∏ –≤–∏–¥–µ–æ üòØ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ —ç—Ç–∏ –≤–∏–¥–µ–æ üòØ"), state=propaganda_victim.quiz_3, flags=flags)
async def antip_torture_really_not_recommended(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_torture_really_not_recommended'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–∫–∞–∂–∏ —ç—Ç–∏ –≤–∏–¥–µ–æ ü§Ø"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ —Å—Ç–æ–∏—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–î–∞, –ø–æ–∫–∞–∂–∏ —ç—Ç–∏ –≤–∏–¥–µ–æ ü§Ø"), state=propaganda_victim.quiz_3, flags=flags)
async def antip_torture(message: Message, bot: Bot):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_torture_really_not_recommended'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ"))
    await simple_video_album(message, bot, ['antip_torture_v_1', 'antip_torture_v_2', 'antip_torture_v_3'])
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text.contains('—Ä–æ–¥–æ–ª–∂')) & (F.text.contains('üëâ'))
                 & ~(F.text.contains('–∞–µ–º'))), state=propaganda_victim.quiz_3, flags=flags)
async def antip_chicken_and_egg(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_chicken_and_egg'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–í —Ü–µ–ª–æ–º —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üòå"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    ((F.text.contains('–í —Ü–µ–ª–æ–º —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')) | (F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ')) | (F.text == "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå")),
    state=(propaganda_victim.quiz_3, propaganda_victim.after_quizez), flags=flags)
async def antip_german_list(message: Message, state: FSMContext):
    if '–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º' in message.text:
        text = await sql_safe_select('text', 'texts', {'name': 'antip_return_to_german_list'})
        await message.answer(text)
        await asyncio.sleep(1)
    await state.set_state(propaganda_victim.after_quizez)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç"))
    nmarkup.add(types.KeyboardButton(text="–°–∫—É—á–Ω–æ–≤–∞—Ç–æ üëé"))
    if not await redis_just_one_read(f'Usrs: {message.from_user.id}: Ukr_tv:'):
        nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏. –ê —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É —Ç—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å? ü§î"))
    await simple_media(message, 'antip_german_list', nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç") | (F.text == "–°–∫—É—á–Ω–æ–≤–∞—Ç–æ üëé")),
                state=propaganda_victim.after_quizez, flags=flags)
async def antip_truth_game_start(message: Message):
    if message.text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç":
        text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start'})
    else:
        text = await sql_safe_select('text', 'texts', {'name': 'antip_truth_game_start_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º! üöÄ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–∞—á–Ω–µ–º! üöÄ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ") |
                (F.text == "–ù–µ—Ç, –ø–æ–∏–≥—Ä–∞–µ–º –µ—â—ë! üëà"), flags=flags)
async def antip_truth_game_start_question(message: Message, state: FSMContext):
    if message.text == '–ù–∞—á–Ω–µ–º! üöÄ':
        await mongo_update_stat_new(tg_id=message.from_user.id, column='game_false_or_true',
                                    value='–ù–∞—á–∞–ª–∏ –∏ –ù–ï –∑–∞–∫–æ–Ω—á–∏–ª–∏')
    try:
        count = (await state.get_data())['gamecount']
    except KeyError:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.truthgame"))[0][0]
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter(f"""SELECT * FROM (Select truth, a.t_id as plot_media, t.text as plot_text,
                                         belivers, nonbelivers,
                                         t2.text as rebb_text, a2.t_id as rebb_media,
                                         ROW_NUMBER () OVER (ORDER BY id), id FROM public.truthgame
                                         left outer join assets a on a.name = truthgame.asset_name
                                         left outer join assets a2 on a2.name = truthgame.reb_asset_name
                                         left outer join texts t on truthgame.text_name = t.name
                                         left outer join texts t2 on truthgame.rebuttal = t2.name)
                                         AS sub WHERE row_number = {count}"""))[0]
        await state.update_data(gamecount=count, truth=truth_data[0], rebuttal=truth_data[5], belive=truth_data[3],
                                not_belive=truth_data[4], reb_media=truth_data[6], game_id=truth_data[8])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ"))
        nmarkup.add(types.KeyboardButton(text="–≠—Ç–æ –ª–æ–∂—å ‚ùå"))
        if truth_data[1] is not None:
            capt = ""
            if truth_data[2] is not None:
                capt = truth_data[2]
            try:
                await message.answer_video(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[1], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(truth_data[2], reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º"))
        await message.answer(
            "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—é–∂–µ—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—Éü§ù",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ") | (F.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå"), flags=flags)
async def antip_truth_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    END = bool(data['gamecount'] == (await data_getter('SELECT COUNT(id) FROM public.truthgame'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ  üôÖ‚Äç‚ôÄÔ∏è"))
    else:
        nmarkup.row(types.KeyboardButton(text="ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º"))
    answer_group, reality = str(), str()
    if message.text == "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ ‚úÖ":
        if data['truth'] is True:
            reality = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ø—Ä–∞–≤–¥–∞!"
        elif data['truth'] is False:
            reality = "–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –ª–æ–∂—å!"
        answer_group = 'belivers'
    elif message.text == "–≠—Ç–æ –ª–æ–∂—å ‚ùå":
        if data['truth'] is True:
            reality = "–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –ø—Ä–∞–≤–¥–∞!"
        elif data['truth'] is False:
            reality = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ª–æ–∂—å!"
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'truthgame', data['game_id'], answer_group, {'id': data['game_id']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    text = reality + f'\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n‚úÖ <b>–ü—Ä–∞–≤–¥–∞:</b> {round(t_percentage * 100)}%\n' \
                     f'‚ùå <b>–õ–æ–∂—å</b>: {round((100 - t_percentage * 100))}%' + '\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –Ω–∏–∂–µ.'
    reb = data['rebuttal']
    media = data['reb_media']
    if media is None:
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
        await message.answer(reb, disable_web_page_preview=True)
    else:
        await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
        try:
            await message.answer_video(media, caption=reb)
        except TelegramBadRequest:
            await message.answer_photo(media, caption=reb)
    if END is True:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='game_false_or_true', value='–ù–∞—á–∞–ª–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏')
        await message.answer('–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—é–∂–µ—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—Éü§ù')


@router.message(F.text == '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ  üôÖ‚Äç‚ôÄÔ∏è', flags=flags)
async def sure_you_are(message: Message, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –ø–æ–∏–≥—Ä–∞–µ–º –µ—â—ë! üëà"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—â–∞—Ç—å—Å—è üëå"))
    await message.answer('–£–≤–µ—Ä–µ–Ω—ã?', reply_markup=nmarkup.as_markup(resize_keyboard=True),
                         disable_web_page_preview=True)


@router.message(NotYandexPropagandaFilter(), ((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è") | (F.text == 'ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º')
                                              | (F.text == '–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—â–∞—Ç—å—Å—è üëå')), flags=flags)
async def antip_yandex_do_you_like_it(message: Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è':
        await mongo_update_stat_new(tg_id=message.from_user.id, column='game_false_or_true', value='–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏')
        await message.answer('–•–æ—Ä–æ—à–æ')
    await state.set_state(propaganda_victim.yandex)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_yandex_do_you_like_it'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ß–∞—Å—Ç–æ üëç"))
    nmarkup.add(types.KeyboardButton(text="–†–µ–¥–∫–æ ü§è"))
    nmarkup.add(types.KeyboardButton(text="–ù–∏–∫–æ–≥–¥–∞ üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({"–ß–∞—Å—Ç–æ üëç", "–†–µ–¥–∫–æ ü§è"})), state=propaganda_victim.yandex, flags=flags)
async def antip_yandex_but_I_want(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_yandex_but_I_want'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–∏–∫–æ–≥–¥–∞ üëé"), state=propaganda_victim.yandex, flags=flags)
async def antip_yandex_do_you_want_to_know(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_yandex_do_you_want_to_know'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üëå"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –Ω–∞–¥–æ, –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üôÖ‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è") | (F.text == 'ü§ù –ü—Ä–æ–¥–æ–ª–∂–∏–º')
                 | (F.text == '–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—â–∞—Ç—å—Å—è üëå')), flags=flags)
@router.message((F.text == "–î–∞–≤–∞–π üëå"), state=propaganda_victim.yandex, flags=flags)
async def antip_propaganda_here_too(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.yandex)
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è':
        await mongo_update_stat_new(tg_id=message.from_user.id, column='game_false_or_true', value='–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏')
        await message.answer('–•–æ—Ä–æ—à–æ')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ü§î"))
    await simple_media(message, 'antip_propaganda_here_too', nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ü§î") | (F.text == "–†–∞—Å—Å–∫–∞–∂–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üëå")),
                state=propaganda_victim.yandex, flags=flags)
async def antip_they_lie_to_you(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"))
    await simple_media(message, 'antip_they_lie_to_you', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) üì∫"), state=propaganda_victim.yandex, flags=flags)
async def antip_yandex(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await simple_media(message, 'antip_yandex', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=propaganda_victim.yandex, flags=flags)
async def antip_yandex_rupor(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_yandex_rupor'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø —É–¥–∏–≤–ª—ë–Ω(–∞) ü§î"))
    nmarkup.add(types.KeyboardButton(text="–Ø –Ω–µ —É–¥–∏–≤–ª—ë–Ω(–∞) ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –≤–µ—Ä—é üòï"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–Ø –Ω–µ –≤–µ—Ä—é üòï"), state=propaganda_victim.yandex, flags=flags)
async def antip_well_you_will(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_well_you_will'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—É–¥–∏–≤–ª—ë–Ω')) | (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'), state=propaganda_victim.yandex, flags=flags)
@router.message(F.text == "–ù–µ –Ω–∞–¥–æ, –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üôÖ‚Äç‚ôÇÔ∏è", flags=flags)
async def antip_family_conflicts(message: Message, state: FSMContext):
    await state.set_state(propaganda_victim.final)
    if '—É–¥–∏–≤–ª—ë–Ω' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='antip_yandex_rupor', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'antip_family_conflicts'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, –±—ã–ª–∏ —Å—Å–æ—Ä—ã üó£"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, —Å—Å–æ—Ä –Ω–µ –±—ã–ª–æ üôè"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–µ—Ç, —Å—Å–æ—Ä –Ω–µ –±—ã–ª–æ üôè") | (F.text == "–î–∞, –±—ã–ª–∏ —Å—Å–æ—Ä—ã üó£"),
                state=propaganda_victim.final, flags=flags)
async def antip_people_conflicts(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='family_conflicts', value=message.text)
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Antip: family:', message.text)
    f_all = await mongo_count_docs('database', 'statistics_new', {'family_conflicts': {'$exists': True}})
    f_no = await mongo_count_docs('database', 'statistics_new', {'family_conflicts': "–ù–µ—Ç, —Å—Å–æ—Ä –Ω–µ –±—ã–ª–æ üôè"})
    f_yes = await mongo_count_docs('database', 'statistics_new', {'family_conflicts': "–î–∞, –±—ã–ª–∏ —Å—Å–æ—Ä—ã üó£"})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_people_conflicts'}), f_all)
    txt.replace('XX', f_yes)
    txt.replace('YY', f_no)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —Ç–∞–∫–∏–µ –µ—Å—Ç—å ü§ê"))
    nmarkup.add(types.KeyboardButton(text="–ù–µ—Ç, —Ç–∞–∫–∏—Ö –Ω–µ—Ç üôè"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–î–∞, —Ç–∞–∫–∏–µ –µ—Å—Ç—å ü§ê") | (F.text == "–ù–µ—Ç, —Ç–∞–∫–∏—Ö –Ω–µ—Ç üôè"),
                state=propaganda_victim.final, flags=flags)
async def antip_zombie_everywere(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='breaking_conflicts', value=message.text)
    b_all = await mongo_count_docs('database', 'statistics_new', {'breaking_conflicts': {'$exists': True}})
    b_no = await mongo_count_docs('database', 'statistics_new', {'breaking_conflicts': "–ù–µ—Ç, —Ç–∞–∫–∏—Ö –Ω–µ—Ç üôè"})
    b_yes = await mongo_count_docs('database', 'statistics_new', {'breaking_conflicts': "–î–∞, —Ç–∞–∫–∏–µ –µ—Å—Ç—å ü§ê"})
    if '–ù–µ—Ç' in await redis_just_one_read(f'Usrs: {message.from_user.id}: Antip: family:') \
            and '–ù–µ—Ç' in message.text:
        text_tag = 'antip_zombie_everywere_not_you'
    else:
        text_tag = 'antip_zombie_everywere_you'
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': text_tag}), b_all)
    txt.replace('XX', b_yes)
    txt.replace('YY', b_no)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=propaganda_victim.final, flags=flags)
async def antip_honesty_in_2022(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_honesty_in_2022'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç üëç"))
    nmarkup.add(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –≤—Å–µ –°–ú–ò –≤—Ä—É—Ç üëé"))
    nmarkup.row(types.KeyboardButton(text="–ú–æ–∂–µ—Ç –¥–∞, –º–æ–∂–µ—Ç –Ω–µ—Ç ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–°–∫–æ—Ä–µ–µ –¥–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç üëç") | (F.text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –≤—Å–µ –°–ú–ò –≤—Ä—É—Ç üëé")
                 | (F.text == "–ú–æ–∂–µ—Ç –¥–∞, –º–æ–∂–µ—Ç –Ω–µ—Ç ü§∑‚Äç‚ôÄÔ∏è")), state=propaganda_victim.final, flags=flags)
async def antip_normal_sources(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='antip_honest_sources', value=message.text)
    h_all = await mongo_count_docs('database', 'statistics_new', {'antip_honest_sources': {'$exists': True}})
    h_no = await mongo_count_docs('database', 'statistics_new', {'antip_honest_sources': "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –≤—Å–µ –°–ú–ò –≤—Ä—É—Ç üëé"})
    h_yes = await mongo_count_docs('database', 'statistics_new', {'antip_honest_sources': "–°–∫–æ—Ä–µ–µ –¥–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç üëç"})
    h_mb = await mongo_count_docs('database', 'statistics_new', {'antip_honest_sources': "–ú–æ–∂–µ—Ç –¥–∞, –º–æ–∂–µ—Ç –Ω–µ—Ç ü§∑‚Äç‚ôÄÔ∏è"})
    if message.text == '–°–∫–æ—Ä–µ–µ –¥–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç üëç':
        text_tag = 'antip_normal_sources_normal'
    else:
        text_tag = 'antip_normal_sources_zombie'
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': text_tag}), h_all)
    txt.replace('AA', h_yes)
    txt.replace('BB', h_no)
    txt.replace('CC', h_mb)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏! –ï—Å–ª–∏ —á–µ—Å—Ç–Ω—ã–µ –°–ú–ò —Å—É—â–µ—Å—Ç–≤—É—é—Ç,"
                                          " —Ç–æ –ª—é–¥–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –±—ã –∏—Ö, –∞ –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É ü§î"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –º–Ω–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ Ô∏èüôÖ‚Äç‚ôÇÔ∏è"))
    await message.answer(txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—Å–º–æ—Ç—Ä–µ–ª–∏ –±—ã –∏—Ö')), state=propaganda_victim.final, flags=flags)
async def antip_orwell(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_orwell'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –º–Ω–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ Ô∏èüôÖ‚Äç‚ôÇÔ∏è"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–†–∞—Å—Å–∫–∞–∂–∏ üôÇ"), state=propaganda_victim.final, flags=flags)
async def antip_three_categories(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_three_categories'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞–∑–æ–≤–∏ —ç—Ç–∏ –°–ú–ò üëÄ"))
    nmarkup.row(types.KeyboardButton(text=
                                     "–ü–æ–¥–æ–∂–¥–∏! –ê –Ω–µ –ª—É—á—à–µ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∏ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ, –∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –°–ú–ò? ü§î"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.contains('–ª—É—á—à–µ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º '), state=propaganda_victim.final, flags=flags)
async def antip_good_idea(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_good_idea'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞–∑–æ–≤–∏ —ç—Ç–∏ –°–ú–ò üëÄ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥')), flags=flags, state=propaganda_victim.next_3)
async def antip_look_at_it_yourself(message: Message, state: FSMContext):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text='–°–ø–∞—Å–∏–±–æ, –Ω–µ –∑–Ωa–ª(–∞) üôÇ'))
    nmarkap.add(types.KeyboardButton(text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ü§∑‚Äç‚ôÄÔ∏è'))
    nmarkap.add(types.KeyboardButton(text='–Ø –Ω–µ –≤–µ—Ä—é üòï'))
    nmarkap.adjust(2)
    await simple_media(message, 'antip_look_at_it_yourself', reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–Ø –Ω–µ –≤–µ—Ä—é')), flags=flags, state=propaganda_victim.next_3)
async def antip_learn_yourself(message: Message, state: FSMContext):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    text = await sql_safe_select('text', 'texts', {'name': 'antip_learn_yourself'})
    await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text.contains('–Ω–µ –∑–Ωa–ª(–∞)')) | (F.text.contains('–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ')) | (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå')),
                state=(propaganda_victim.wiki, propaganda_victim.next_3), flags=flags)
@router.message((F.text.contains('–¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ')), flags=flags)
async def antip_ok(message: Message, state: FSMContext):
    if '–°–ø–∞—Å–∏–±–æ' in message.text or '–Ω–æ–≤–æ–≥–æ' in message.text or '–Ω–µ –≤–µ—Ä—é' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='antip_look_at_it_yourself', value=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(1)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞–≤–∞–π ü§î'))
    await state.set_state(propaganda_victim.final)
    await message.answer("–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π ü§î'), state=propaganda_victim.final, flags=flags)
async def antip_anecdote(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_anecdote'})
    await state.clear()
    await state.set_state(propaganda_victim.final_end)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="üòÅ"))
    nmarkup.row(types.KeyboardButton(text="üôÇ"))
    nmarkup.row(types.KeyboardButton(text="üòï"))
    nmarkup.adjust(3)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'üòÅ', "üôÇ", "üòï"})), state=propaganda_victim.final_end, flags=flags)
async def antip_hole_in_deck(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='reaction_on_anecdot', value=message.text)
    a_all = await mongo_count_docs('database', 'statistics_new', {'reaction_on_anecdot': {'$exists': True}})
    a_hoho = await mongo_count_docs('database', 'statistics_new', {'reaction_on_anecdot': "üòÅ"})
    a_haha = await mongo_count_docs('database', 'statistics_new', {'reaction_on_anecdot': "üôÇ"})
    a_meh = await mongo_count_docs('database', 'statistics_new', {'reaction_on_anecdot': "üòï"})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_anecdote_reaction'}), a_all)
    txt.replace('XX', a_hoho)
    txt.replace('YY', a_haha)
    txt.replace('ZZ', a_meh)
    await message.answer(txt())
    await asyncio.sleep(1)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.add(types.KeyboardButton(text="–ó–∞–±–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ üôÇ"))
    await simple_media(message, 'antip_hole_in_deck', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ù–∞–∑–æ–≤–∏ —ç—Ç–∏ –°–ú–ò üëÄ') | (F.text.contains('–≠—Ç–æ –º–Ω–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ Ô∏èüôÖ‚Äç‚ôÇÔ∏è'))), flags=flags)
async def antip_best_of_the_best(message: Message):
    if '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ' in message.text:
        fake_text = await sql_safe_select('text', 'texts', {'name': 'antip_to_the_point'})
        await message.answer(fake_text)
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text='–û —á—ë–º? ü§î'))
    nmarkap.row(types.KeyboardButton(text="–ì–æ—Ç–æ–≤—å –¥–µ–Ω—å–≥–∏ üòâÔ∏è"))
    nmarkap.adjust(2)
    await simple_media(message, 'antip_best_of_the_best', reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–û —á—ë–º? ü§î') | (F.text.contains('–ì–æ—Ç–æ–≤—å –¥–µ–Ω—å–≥–∏'))), flags=flags)
async def antip_many_links_normal(message: Message):
    if await redis_just_one_read(f'Usrs: {message.from_user.id}: Start_answers: BBC'):
        nmarkap = ReplyKeyboardBuilder()
        nmarkap.add(types.KeyboardButton(text="–ì–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëå"))
        text = await sql_safe_select('text', 'texts', {'name': 'antip_many_links_normal'})
        await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        nmarkap = ReplyKeyboardBuilder()
        nmarkap.add(types.KeyboardButton(text="–í—Å—ë, —è –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)! ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏–º! üëå"))
        nmarkap.row(types.KeyboardButton(text="–Ø –Ω–µ –±—É–¥—É –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è. ‚ùå –ù–æ —è –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. üëå"))
        text = await sql_safe_select('text', 'texts', {'name': 'antip_many_links_zombie'})
        await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ì–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') | (F.text.contains('—è –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)')) |
                 (F.text.contains('–Ø –Ω–µ –±—É–¥—É –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.'))), flags=flags)
async def antip_forbidden_truth(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'antip_forbidden_truth'})
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text="–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å? ü§î"))
    nmarkap.add(types.KeyboardButton(text="–í–∏–∫–∏–ø–µ–¥–∏—è —á—Ç–æ –ª–∏? üôÇ"))
    await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å? ü§î') | (F.text.contains('–í–∏–∫–∏–ø–µ–¥–∏—è —á—Ç–æ –ª–∏? üôÇ'))), flags=flags)
async def antip_bite_me(message: Message):
    if '–í–∏–∫–∏–ø–µ–¥–∏—è —á—Ç–æ –ª–∏' in message.text:
        fake_text = await sql_safe_select('text', 'texts', {'name': 'antip_bite_me'})
        await message.answer(fake_text)
    if await redis_just_one_read(f'Usrs: {message.from_user.id}: Start_answers: NotWiki'):
        nmarkap = ReplyKeyboardBuilder()
        nmarkap.add(types.KeyboardButton(text="–¢–∞–º —Å—Ç–∞—Ç—å–∏ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ ‚úçÔ∏è"))
        nmarkap.add(types.KeyboardButton(text="–í–∏–∫–∏–ø–µ–¥–∏—è ‚Äî –ø—Ä–æ–µ–∫—Ç –ó–∞–ø–∞–¥–∞ üá∫üá∏"))
        nmarkap.add(types.KeyboardButton(text="–ù–µ –ø–æ–ª—å–∑—É—é—Å—å / –ù–µ —Å–ª—ã—à–∞–ª(–∞) ü§∑‚Äç‚ôÄÔ∏è"))
        nmarkap.add(types.KeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ, –≤–æ–æ–±—â–µ —è –¥–æ–≤–µ—Ä—è—é –í–∏–∫–∏–ø–µ–¥–∏–∏ üëå"))
        nmarkap.adjust(1, 2, 1)
        text = await sql_safe_select('text', 'texts', {'name': 'antip_why_not_wiki'})
        await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)
    else:
        nmarkap = ReplyKeyboardBuilder()
        nmarkap.add(types.KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ üôÇÔ∏è"))
        nmarkap.add(types.KeyboardButton(text="–ù–µ –Ω–∞–¥–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëâ"))
        p_all = await mongo_count_docs('database', 'statistics_new', {'web_prop_ex': {'$exists': True}})
        p_wiki = await mongo_count_docs('database', 'statistics_new', {'web_prop_ex': "–í–∏–∫–∏–ø–µ–¥–∏—è"})
        txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'antip_two_words'}), p_all)
        txt.replace('XX', p_wiki)
        await message.answer(txt(), reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text.contains('–¢–∞–º —Å—Ç–∞—Ç—å–∏ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫') | (F.text.contains('–í–∏–∫–∏–ø–µ–¥–∏—è ‚Äî –ø—Ä–æ–µ–∫—Ç –ó–∞–ø–∞–¥–∞')) |
     (F.text.contains('–ù–µ –ø–æ–ª—å–∑—É—é—Å—å / –ù–µ —Å–ª—ã—à–∞–ª(–∞)')) | (F.text.contains('–°–ª—É—á–∞–π–Ω–æ, –≤–æ–æ–±—â–µ —è –¥–æ–≤–µ—Ä—è—é –í–∏–∫–∏–ø–µ–¥–∏–∏')) |
     (F.text.contains('–†–∞—Å—Å–∫–∞–∂–∏ üôÇ'))), flags=flags)
async def antip_clear_and_cool(message: Message, state: FSMContext):
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'))
    text = await sql_safe_select('text', 'texts', {'name': 'antip_clear_and_cool'})
    await state.set_state(propaganda_victim.next_3)
    await message.answer(text, reply_markup=nmarkap.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥', "–ó–∞–±–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ üôÇ"})), state=propaganda_victim.final_end, flags=flags)
async def antip_how_they_made_it(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–æ–π —É–∂–∞—Å üòØ"))
    nmarkup.add(types.KeyboardButton(text="–°–º–µ—à–Ω–æ üôÇ"))
    nmarkup.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media(message, 'antip_how_they_made_it', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–ö–∞–∫–æ–π —É–∂–∞—Å üòØ", "–°–º–µ—à–Ω–æ üôÇ", "–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"})),
                state=propaganda_victim.final_end, flags=flags)
async def antip_only_tip_of_the_berg(message: Message, state: FSMContext):
    await state.set_state(TrueGoalsState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëç"))
    nmarkup.add(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —Å–ª–µ–≥–∫–∞ –∑–∞—Ç—è–Ω—É—Ç–æ ü§è"))
    nmarkup.row(types.KeyboardButton(text="–ì–¥–µ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –≥–¥–µ-—Ç–æ —Å–∫—É—á–Ω–æ üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–î–æ–≤–æ–ª—å–Ω–æ —Å–∫—É—á–Ω–æ ü•±"))
    await simple_media(message, 'antip_only_tip_of_the_berg', reply_markup=nmarkup.as_markup(resize_keyboard=True))
