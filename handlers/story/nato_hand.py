from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import  mongo_count_docs
from data_base.DBuse import sql_safe_select
from keyboards.map_keys import polls_continue_kb
from resources.all_polls import welc_message_one

from states.true_goals_states import  WarGoalsState
from utilts import simple_media, CoolPercReplacer

from states.nato_states import Nato_states

flags = {"throttling_key": "True"}
router = Router()


# router.message.filter(state=Nato_states)


@router.message(commands='test_nato')
async def nato_start(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'nato_start'})
    await state.set_state(Nato_states.nato_start)
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üôÇ"))
    nmarkap.row(types.KeyboardButton(text="–ù—É, –ø–æ–ø—Ä–æ–±—É–π ü§î"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ')) | (F.text.contains('–ù—É, –ø–æ–ø—Ä–æ–±—É–π')), flags=flags,
                state=Nato_states.nato_start)
async def nato_first_poll(message: Message, bot: Bot, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'first_poll'})
    await state.set_state(Nato_states.first_poll)
    nmarkap = ReplyKeyboardBuilder()
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))
    poll_options = ['0 —Ä–∞–∑', '1 —Ä–∞–∑', '2 —Ä–∞–∑a', '3 —Ä–∞–∑a', ]
    await message.answer_poll("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑?",
                              explanation_parse_mode="HTML",
                              options=poll_options, correct_option_id=0, is_anonymous=False, type='quiz',
                              reply_markup=polls_continue_kb())


@router.poll_answer(state=Nato_states.first_poll, flags=flags)
async def nato_poll_answer(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='nato_poll_answer',
                                value=poll_answer.option_ids[0])
    right_answers = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 0})
    answer_1 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 1})
    answer_2 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 2})
    answer_3 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 3})
    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': {'$exists': True}})
    await state.set_state(Nato_states.poll_answer)
    await state.update_data(nato_poll_answer=poll_answer.option_ids[0])

    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'nato_poll_answer'}), all_answers)
    txt.replace("AA", right_answers)
    txt.replace("BB", answer_1)
    txt.replace("CC", answer_2)
    txt.replace("DD", answer_3)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëç"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëé"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"))
    nmarkup.adjust(2, 1)
    await bot.send_message(text=txt(), chat_id=poll_answer.user.id, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({'–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëç', '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëé',
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"})), state=Nato_states.poll_answer, flags=flags)
async def nato_other_questions(message: Message, state: FSMContext):
    await state.set_state(Nato_states.nato_other_questions)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='nato_other_questions',
                                value=message.text)
    answer_1 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëç'})
    answer_2 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëé'})
    answer_3 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ'})
    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_other_questions': {'$exists': True}})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'nato_other_questions'}), all_answers)
    txt.replace("AA", answer_1)
    txt.replace("BB", answer_2)
    txt.replace("CC", answer_3)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–°—Ç—Ä–∞–Ω—ã –ù–ê–¢–û —á—Ç–æ –ª–∏? üòè"))
    await message.answer(txt(), disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(
    ((F.text.contains('–ö–∞–∫–∏–µ? ü§î')) | (F.text.contains('–°—Ç—Ä–∞–Ω—ã –ù–ê–¢–û —á—Ç–æ –ª–∏? üòè'))),
    state=Nato_states.nato_other_questions, flags=flags)
async def nato_countries(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_countries)
    text = await sql_safe_select('text', 'texts', {'name': 'nato_countries'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–æ –ù–ê–¢–û –æ–±–µ—â–∞–ª–∏, —á—Ç–æ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –≤–æ—Å—Ç–æ–∫. –ù–∞–¥—É–ª–∏? ü§®"))
    nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ù–∞–¥—É–ª–∏? ü§®'), state=Nato_states.nato_countries, flags=flags)
async def nato_extention(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons'])
    except Exception:
        nato_buttons = 0
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await state.update_data(nato_buttons=f'{nato_buttons + 1}')
    await simple_media(message, 'nato_extention', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_propagandons(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons=f'{nato_buttons + 1}')
    nmarkup = ReplyKeyboardBuilder()
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–ù–æ –ù–ê–¢–û –æ–±–µ—â–∞–ª–∏, —á—Ç–æ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –≤–æ—Å—Ç–æ–∫. –ù–∞–¥—É–ª–∏? ü§®"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await simple_media(message, 'nato_propagandons', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_not_enemy(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await simple_media(message, 'nato_not_enemy', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_no_args(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_no_args)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º? ü§î"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_no_args'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º? ü§î'),
                state=Nato_states.nato_no_args, flags=flags)
async def nato_ucraine_in(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    await state.set_state(Nato_states.nato_ucraine_in)
    nmarkup.row(types.KeyboardButton(text="–í–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É üó∫"))
    await simple_media(message, 'nato_ucraine_in', reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message(F.text.contains('–í–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É üó∫'), state=Nato_states.nato_ucraine_in, flags=flags)
async def nato_map(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_map)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    await simple_media(message, 'nato_map', reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message(F.text.contains('–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è'),
                state=Nato_states.nato_map, flags=flags)
async def nato_krim_naw(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()

    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons_2'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons_2=f'{nato_buttons + 1}')
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_krim_naw'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(F.text.contains('–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î'),
                state=Nato_states.nato_map, flags=flags)
async def nato_diff_with_fin(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()

    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons_2'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons_2=f'{nato_buttons + 1}')
    if nato_buttons == 0:
        nmarkup.row(
            types.KeyboardButton(text="–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    await simple_media(message, 'nato_diff_with_fin', reply_markup=nmarkup.as_markup(resize_keyboard=True))



@router.message(F.text.contains('–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ'),
                state=Nato_states.nato_map, flags=flags)
async def nato_pre_end(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_pre_end)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"))
    nmarkup.adjust(2, 1)
    text = await sql_safe_select('text', 'texts', {'name': 'nato_pre_end'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(Nato_states.nato_pre_end,
                (F.text.in_({'–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå', "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇ",
                             "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"})), flags=flags)
async def nato_end(message: Message, state: FSMContext):
    await state.set_state(WarGoalsState.main)
    await mongo_update_stat_new(tg_id=message.from_user.id, column='nato_end',
                                value=message.text)
    answer_1 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå',
                                       'war_aims_ex': welc_message_one[5]})
    answer_2 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇ',
                                       'war_aims_ex': welc_message_one[5]})
    answer_3 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ',
                                       'war_aims_ex': welc_message_one[5]})
    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_end': {'$exists': True},
                                                                        'war_aims_ex': welc_message_one[5]})
    txt = CoolPercReplacer(await sql_safe_select('text', 'texts', {'name': 'nato_end'}), all_answers)
    txt.replace("AA", answer_1)
    txt.replace("BB", answer_2)
    txt.replace("CC", answer_3)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    await message.answer(text=txt(), reply_markup=nmarkup.as_markup(resize_keyboard=True),
                         disable_web_page_preview=True)
