import asyncio
from typing import List

from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bata import all_data
from bot_statistics.stat import mongo_update_stat_new
from data_base.DBuse import poll_get, redis_just_one_read, sql_select_row_like, mongo_game_answer, mongo_count_docs, \
    redis_just_one_write, mongo_select, mongo_ez_find_one
from data_base.DBuse import sql_safe_select, data_getter
from filters.MapFilters import WebPropagandaFilter, PplPropagandaFilter, \
    NotYandexPropagandaFilter
from filters.isAdmin import IsAdmin
from handlers.story import true_resons_hand
from keyboards.map_keys import antip_killme_kb
from resources.all_polls import antip_q1_options, antip_q2_options, antip_q3_options
from resources.variables import release_date
from states.antiprop_states import propaganda_victim
from states.true_goals_states import TrueGoalsState, WarGoalsState
from utilts import simple_media, dynamic_media_answer, simple_media_bot, simple_video_album, CoolPercReplacer

from states.nato_states import Nato_states

flags = {"throttling_key": "True"}
router = Router()


# router.message.filter(state=Nato_states)


@router.message(commands='nato')
@router.message((F.text.contains('–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º üíÇ')) , flags=flags,
                state=WarGoalsState.donbas_enter)
async def nato_start(message: Message, bot: Bot, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'nato_start'})
    await state.set_state(Nato_states.nato_start)
    nmarkap = ReplyKeyboardBuilder()
    nmarkap.add(types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üôÇ"))
    nmarkap.row(types.KeyboardButton(text="–ù—É, –ø–æ–ø—Ä–æ–±—É–π ü§î"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))


@router.message((F.text.contains('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ')) | (F.text.contains('–ù—É, –ø–æ–ø—Ä–æ–±—É–π')), flags=flags,
                state=Nato_states.nato_start)
async def nato_first_poll(message: Message, bot: Bot, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'first_poll'})
    await state.set_state(Nato_states.first_poll)
    nmarkap = ReplyKeyboardBuilder()
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkap.as_markup(resize_keyboard=True))
    poll_options = ['0 —Ä–∞–∑', '1 —Ä–∞–∑', '2 —Ä–∞–∑a', '3 —Ä–∞–∑a', ]
    await message.answer_poll("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑?",
                              explanation_parse_mode="HTML",
                              options=poll_options, correct_option_id=0, is_anonymous=False, type='quiz',
                              reply_markup=ReplyKeyboardRemove())


@router.poll_answer(state=Nato_states.first_poll, flags=flags)
async def poll_answer(poll_answer: types.PollAnswer, bot: Bot, state: FSMContext):
    await mongo_update_stat_new(tg_id=poll_answer.user.id, column='nato_poll_answer',
                                value=poll_answer.option_ids[0])
    right_answers = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 0})
    answer_1 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 1})
    answer_2 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 2})
    answer_3 = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': 3})
    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_poll_answer': {'$exists': True}})
    await state.set_state(Nato_states.poll_answer)
    await state.update_data(nato_poll_answer=poll_answer.option_ids[0])

    result = (right_answers * 100) / all_answers  # TODO test this percentage
    result_1 = (answer_1 * 100) / all_answers
    result_2 = (answer_2 * 100) / all_answers
    result_3 = (answer_3 * 100) / all_answers

    print(f'all {all_answers}')
    print(f'right {right_answers}')

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëç"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëé"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"))
    nmarkup.adjust(2, 1)
    text = await sql_safe_select('text', 'texts', {'name': 'nato_poll_answer'})
    text = text.replace("AA", f"{str(result)[:-2]}")
    text = text.replace("BB", f"{str(result_1)[:-2]}")
    text = text.replace("CC", f"{str(result_2)[:-2]}")
    text = text.replace("DD", f"{str(result_3)[:-2]}")
    print(all_answers)
    print(right_answers)
    await bot.send_message(text=text, chat_id=poll_answer.user.id, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(
    ((F.text.contains('–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')) | (F.text.contains('–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')) | (
            F.text == "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ")),
    state=Nato_states.poll_answer, flags=flags)
async def nato_other_questions(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_other_questions)
    print("asdasd")
    try:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='nato_other_questions',
                                    value=message.text)
    except Exception:
        print("asdasd")

    answer_1 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–°–∫–æ—Ä–µ–µ –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëç'})
    answer_2 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) üëé'})
    answer_3 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_other_questions': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ'})
    print("asdasd")

    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_other_questions': {'$exists': True}})
    if all_answers == 0:
        all_answers = 1
    print(all_answers)
    print(answer_1)
    print(answer_2)
    print(answer_3)
    result_1 = (answer_1 * 100) / all_answers
    result_2 = (answer_2 * 100) / all_answers
    result_3 = (answer_3 * 100) / all_answers
    text = await sql_safe_select('text', 'texts', {'name': 'nato_other_questions'})
    print(text)
    text = text.replace("AA", f"{str(result_1)[:-2]}")
    text = text.replace("BB", f"{str(result_2)[:-2]}")
    text = text.replace("CC", f"{str(result_3)[:-2]}")
    print(text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–°—Ç—Ä–∞–Ω—ã –ù–ê–¢–û —á—Ç–æ –ª–∏? üòè"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(
    ((F.text.contains('–ö–∞–∫–∏–µ? ü§î')) | (F.text.contains('–°—Ç—Ä–∞–Ω—ã –ù–ê–¢–û —á—Ç–æ –ª–∏? üòè'))),
    state=Nato_states.nato_other_questions, flags=flags)
async def nato_countries(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_countries)
    text = await sql_safe_select('text', 'texts', {'name': 'nato_countries'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–æ –ù–ê–¢–û –æ–±–µ—â–∞–ª–∏, —á—Ç–æ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –≤–æ—Å—Ç–æ–∫. –ù–∞–¥—É–ª–∏? ü§®"))
    nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ù–∞–¥—É–ª–∏? ü§®'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_extention(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()

    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons'])
    except Exception:
        nato_buttons = 0
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    await state.update_data(nato_buttons=f'{nato_buttons + 1}')
    text = await sql_safe_select('text', 'texts', {'name': 'nato_extention'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–í–æ–ø—Ä–æ—Å_–æ_–Ω–µ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏_–ù–ê–¢–û_–Ω–∞_–≤–æ—Å—Ç–æ–∫"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–¢–∞–∫ –∞ —á–µ–≥–æ –∏–º –±–æ—è—Ç—å—Å—è? –†–æ—Å—Å–∏—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞—Ç—å. ü§î'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_propagandons(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons=f'{nato_buttons + 1}')
    nmarkup = ReplyKeyboardBuilder()
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–ù–æ –ù–ê–¢–û –æ–±–µ—â–∞–ª–∏, —á—Ç–æ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –≤–æ—Å—Ç–æ–∫. –ù–∞–¥—É–ª–∏? ü§®"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_propagandons'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞_–æ_—Ç–æ–º,_—á—Ç–æ_–º—ã_–Ω–µ_–æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è_–Ω–∞_–£–∫—Ä–∞–∏–Ω–µ"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∏–º üëâ'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_not_enemy(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_not_enemy'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–ü—É—Ç–∏–Ω:_–ù–ê–¢–û_–Ω–µ_–≤—Ä–∞–≥,_–Ω–æ_–∑–∞—á–µ–º_–¥–≤–∏–≥–∞—é—Ç—Å—è_–∫_–Ω–∞–º?"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'),
                state=Nato_states.nato_countries, flags=flags)
async def nato_no_args(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_no_args)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º? ü§î"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_no_args'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º? ü§î'),
                state=Nato_states.nato_no_args, flags=flags)
async def nato_ucraine_in(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()
    await state.set_state(Nato_states.nato_ucraine_in)
    nmarkup.row(types.KeyboardButton(text="–í–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É üó∫"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_ucraine_in'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–ü—É—Ç–∏–Ω_–æ–±_–£–∫—Ä–∞–∏–Ω–µ_–≤_–ù–ê–¢–û_–∏_–®–≤–µ—Ü–∏–∏_—Å_–§–∏–Ω–ª—è–Ω–¥–∏–µ–π_–≤_–ù–ê–¢–û"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–í–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É üó∫'),
                state=Nato_states.nato_ucraine_in, flags=flags)
async def nato_map(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_map)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_map'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–ù–ê–¢–û,_–†–æ—Å—Å–∏—è,_–£–∫—Ä–∞–∏–Ω–∞,_–®–≤–µ—Ü–∏—è_–∏_–§–∏–Ω–ª—è–Ω–¥–∏—è_–Ω–∞_–∫–∞—Ä—Ç–µ"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(F.text.contains('–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è'),
                state=Nato_states.nato_map, flags=flags)
async def nato_krim_naw(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()

    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons_2'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons_2=f'{nato_buttons + 1}')
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_krim_naw'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)



@router.message(F.text.contains('–ê –ü—É—Ç–∏–Ω –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É –£–∫—Ä–∞–∏–Ω–∞ –∏ –§–∏–Ω–ª—è–Ω–¥–∏—è‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–µ? ü§î'),
                state=Nato_states.nato_map, flags=flags)
async def nato_diff_with_fin(message: Message, bot: Bot, state: FSMContext):
    nmarkup = ReplyKeyboardBuilder()

    data = await state.get_data()
    try:
        nato_buttons = int(data['nato_buttons_2'])
    except Exception:
        nato_buttons = 0
    await state.update_data(nato_buttons_2=f'{nato_buttons + 1}')
    if nato_buttons == 0:
        nmarkup.row(types.KeyboardButton(text="–¢–∞–∫ –µ—Å–ª–∏ –±—ã –£–∫—Ä–∞–∏–Ω–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ –ù–ê–¢–û, –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –≤—Ç–æ—Ä–≥–ª–∏—Å—å –±—ã –≤ –ö—Ä—ã–º!  ‚úàÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ"))
    text = await sql_safe_select('text', 'texts', {'name': 'nato_diff_with_fin'})
    media_id = await sql_safe_select('t_id', 'assets', {'name': "–ü—É—Ç–∏–Ω_–æ–±—ä—è—Å–Ω—è–µ—Ç_–≤_—á—ë–º_—Ä–∞–∑–Ω–∏—Ü–∞_–º–µ–∂–¥—É_–£–∫—Ä–∞–∏–Ω–æ–π_–≤_–ù–ê–¢–û_–∏_–§–∏–Ω–ª—è–Ω–¥–∏–µ–π"})
    await message.answer_video(media_id, caption=text, reply_markup=nmarkup.as_markup(resize_keyboard=True))

@router.message(F.text.contains('–ó–∞–∫–æ–Ω—á–∏–º –¥–∏–∞–ª–æ–≥ –æ –ù–ê–¢–û üëâ'),
                state=Nato_states.nato_map, flags=flags)
async def nato_pre_end(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Nato_states.nato_pre_end)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ"))
    nmarkup.adjust(2,1)

    text = await sql_safe_select('text', 'texts', {'name': 'nato_pre_end'})
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)



@router.message(state=Nato_states.nato_pre_end, flags=flags)
async def nato_end(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(WarGoalsState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå"))
    try:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='nato_end',
                                    value=message.text)
    except Exception:
        print("asdasd")

    answer_1 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–°–∫–æ—Ä–µ–µ –¥–∞, —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–ª–æ–≥ üëå'})
    answer_2 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ üôÖ‚Äç‚ôÇ'})
    answer_3 = await mongo_count_docs('database', 'statistics_new',
                                      {'nato_end': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ü§∑‚Äç‚ôÄ'})

    all_answers = await mongo_count_docs('database', 'statistics_new', {'nato_end': {'$exists': True}})
    if all_answers == 0:
        all_answers = 1
    print(all_answers)
    print(answer_1)
    print(answer_2)
    print(answer_3)
    result_1 = (answer_1 * 100) / all_answers
    result_2 = (answer_2 * 100) / all_answers
    result_3 = (answer_3 * 100) / all_answers

    text = await sql_safe_select('text', 'texts', {'name': 'nato_end'})
    text = text.replace("AA", f"{str(result_1)[:-2]}")
    text = text.replace("BB", f"{str(result_2)[:-2]}")
    text = text.replace("CC", f"{str(result_3)[:-2]}")
    await message.answer(text=text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)