import asyncio
from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from data_base.DBuse import data_getter, sql_safe_select, redis_just_one_write, poll_write, mongo_game_answer
from data_base.DBuse import redis_delete_from_list
from filters.MapFilters import OperationWar, WarReason
from handlers import anti_prop_hand
from handlers.nazi_hand import NaziState
from handlers.preventive_strike import PreventStrikeState
from handlers.putin_hand import StateofPutin
from resources.all_polls import welc_message_one
from states.donbass_states import donbass_state
from stats.stat import mongo_update_stat, mongo_update_stat_new
from utilts import simple_media


class TruereasonsState(StatesGroup):
    main = State()
    game = State()
    final = State()


flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=TruereasonsState)


@router.message((F.text.contains('–Ω–µ')) & (F.text.contains('–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å')) & (F.text.contains('–ø–æ–ª–∏—Ç–∏–∫–æ–π')),
                flags=flags)
async def reasons_true_reason_for_all(message: Message):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Politics:', '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
    base_list = ("üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ", "üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†",
                 "ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤")
    for thing in base_list:
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:', thing)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_true_reason_for_all'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ü–µ–ª—è—Ö üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text.contains('—Ü–µ–ª–∏')) & (F.text.contains('–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã')) & (F.text.contains('–ù–µ'))), flags=flags)
async def reasons_king_of_info(message: Message, state: FSMContext):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Politics:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
    await state.set_state(anti_prop_hand.propaganda_victim.final)
    await anti_prop_hand.reasons_king_of_info(message, state)


@router.message((F.text == "–ü–æ–¥–æ–∂–¥–∏. –Ø —Ç–∞–∫ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª(–∞). –° —á–µ–≥–æ —Ç—ã –≤–∑—è–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏? ü§∑‚Äç‚ôÇÔ∏è"),
                flags=flags)
async def reasons_king_of_info(message: Message):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Politics:', '–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –≤–æ–π–Ω—ã')
    base_list = ("üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ", "üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†",
                 "ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤")
    for thing in base_list:
        await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:', thing)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_not_so_fast'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ü–µ–ª—è—Ö üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ü–µ–ª—è—Ö üëå"), flags=flags)
async def reasons_now_you_nothing(message: Message, state: FSMContext):
    await anti_prop_hand.war_point_now(message, state)


@router.message((F.text == "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º üëå"), flags=flags)
async def reasons_now_you_fucked(message: Message, state: FSMContext):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Politics:', '–ê–ø–æ–ª–∏—Ç–∏—á–Ω—ã–π')
    await anti_prop_hand.war_point_now(message, state)


@router.message((F.text == "–•–æ—Ä–æ—à–æ!"), flags=flags)
async def reasons_now_you_blessed(message: Message, state: FSMContext):
    await redis_just_one_write(f'Usrs: {message.from_user.id}: Politics:', '–û–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–µ—Ä')
    await reasons_normal_game_start(message, state)


@router.message(OperationWar(answer='–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–°–í–û)'), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'),
                state=TruereasonsState.main, flags=flags)
async def reasons_operation(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_operation'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ - –≤–æ–π–Ω–∞ üó°'))
    nmarkup.row(types.KeyboardButton(text='–ù–µ—Ç - —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è üõ°'))
    await message.answer(text, disable_web_page_preview=True, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.contains('—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è')), flags=flags)
async def reasons_sorry_im_bot(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_sorry_im_bot'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ...'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text.contains('–≤–æ–π–Ω–∞') & (F.text.contains('–•–æ—Ä–æ—à–æ'))) | (F.text == '–•–æ—Ä–æ—à–æ...')), flags=flags)
@router.message(OperationWar(answer='–í–æ–π–Ω–∞'), (F.text == '–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥'),
                state=TruereasonsState.main, flags=flags)
async def reasons_war(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(WarReason(answer="üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ"), flags=flags)
async def donbass_big_tragedy(message: Message, state=FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_donbass', value='–î–∞')
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "üë™ –ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å—Å–µ")
    await state.set_state(donbass_state.eight_years)
    text = await sql_safe_select('text', 'texts', {'name': 'donbass_big_tragedy'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ß—Ç–æ –≥–ª–∞–≤–Ω–æ–µ? ü§î'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WarReason(answer="ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤"), flags=flags)
async def reasons_denazi(message: Message, state=FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='start_nazi', value='–î–∞')
    await state.set_state(NaziState.first_poll)
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "ü§¨ –î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è / –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤")
    text = await sql_safe_select('text', 'texts', {'name': 'nazi_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚úçÔ∏è'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WarReason(answer="üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†"), flags=flags)
async def prevent_strike_start(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "üõ° –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –∏–ª–∏ –î–ù–†/–õ–ù–†")
    await state.clear()
    await state.set_state(PreventStrikeState.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º üëå'))
    await simple_media(message, 'prevent_strike_start', nmarkup.as_markup(resize_keyboard=True))


@router.message(WarReason(answer="–î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏"), flags=flags)
async def reasons_demilitarism(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "üí£ –î–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è / –°–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏")
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_putin_demilitar'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ò–º –Ω–∞–≤–µ—Ä—Ö—É –≤–∏–¥–Ω–µ–µ ü§î'))
    nmarkup.row(types.KeyboardButton(text='–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û üõ°'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ üí•'))
    nmarkup.row(types.KeyboardButton(text='–î—É–º–∞—é –æ–Ω —Ö–æ—Ç–µ–ª, –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–æ–±–æ—Ä–æ—Ç ü§∑‚Äç‚ôÇÔ∏è'))
    nmarkup.adjust(2, 1, 1, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text == '–ò–º –Ω–∞–≤–µ—Ä—Ö—É –≤–∏–¥–Ω–µ–µ ü§î') | (F.text == '–Ø –Ω–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è') | (F.text.contains('—Ö–æ—Ç–µ–ª, –∫–∞–∫ –ª—É—á—à–µ')),
    flags=flags)
async def reasons_lie_no_more_1(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_lie_no_more_1'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑')), flags=flags)
async def reasons_lie_no_more_2(message: Message):
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                     "üíÇ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ")
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_lie_no_more_2'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.contains('—Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–∞')), flags=flags)
async def reasons_lie_no_more_3(message: Message):
    await poll_write(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                     "ü§Ø –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ / —è–¥–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ")
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_lie_no_more_3'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WarReason(answer="üíÇ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö –±–∞–∑ –ù–ê–¢–û –Ω–∞ –£–∫—Ä–∞–∏–Ω–µ"), flags=flags)
async def reasons_big_bad_nato(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:', welc_message_one[8])
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–î–∞–≤–∞–π üëå'))
    await simple_media(message, 'reasons_big_bad_NATO', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == '–î–∞–≤–∞–π üëå'), state=TruereasonsState.main, flags=flags)
async def reasons_lie_no_more_1(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_NATO_is_coming'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(WarReason(answer="ü§Ø –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ / —è–¥–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ"),
                flags=flags)
async def reasons_biopigeons(message: Message):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:',
                                 "ü§Ø –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ / —è–¥–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ")
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_bio_nuclear'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


"""@router.message(WarReason(answer="üó∫ –í–µ—Ä–Ω—É—Ç—å –†–æ—Å—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏ / –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥"))
async def reasons_take_lands(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:', 
                                                                        "üó∫ –í–µ—Ä–Ω—É—Ç—å –†–æ—Å—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏ / –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –Ω–∞—Ä–æ–¥")
    text = "–ö—É—Å–æ–∫ –ø—Ä–æ –∑–∞—Ö–≤–∞—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º"
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–Ω–æ–ø–∫–∞'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(WarReason(answer="–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ"))
async def reasons_new_power(message: Message, state: FSMContext):
    await redis_delete_from_list(f'Usrs: {message.from_user.id}: Start_answers: Invasion:', "‚ôªÔ∏è –°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ")
    text = "–ö—É—Å–æ–∫ –ø—Ä–æ —Å–º–µ–Ω—É –≤–ª–∞—Å—Ç–∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–æ –º—ã –µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º."
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ö–Ω–æ–ø–∫–∞'))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True))"""


@router.message(state=TruereasonsState.main, flags=flags)
async def reasons_normal_game_start(message: Message, state: FSMContext):
    await state.set_state(TruereasonsState.game)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_normal_game_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text='–ù–∞—á–Ω–µ–º! üöÄ'))
    nmarkup.row(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è'))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–∞—á–Ω–µ–º! üöÄ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ")), state=TruereasonsState.game,
                flags=flags)
async def reasons_normal_game_question(message: Message, state: FSMContext):
    if '–ù–∞—á–Ω–µ–º! üöÄ' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats', value='–ù–∞—á–∞–ª–∏ –∏ –ù–ï –∑–∞–∫–æ–Ω—á–∏–ª–∏')
    try:
        count = (await state.get_data())['ngamecount']
    except:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.normal_game"))[0][0]
    print(f"–í —Ç–∞–±–ª–∏—Ü–µ {how_many_rounds} –∑–∞–ø–∏—Å–µ–π, –∞ –≤–æ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ–π—á–∞—Å {count}")
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter("SELECT * FROM (SELECT t_id, text, belivers, nonbelivers, rebuttal, "
                                        " ROW_NUMBER () OVER (ORDER BY id)"
                                        "FROM normal_game "
                                        "left outer join assets on asset_name = assets.name "
                                        "left outer join texts ON text_name = texts.name)"
                                        f"AS sub WHERE row_number = {count}"))[0]
        await state.update_data(ngamecount=count, belive=truth_data[2], not_belive=truth_data[3])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è"))
        nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå"))
        nmarkup.adjust(2)
        if truth_data[0] is not None:
            capt = ""
            if truth_data[1] is not None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'{truth_data[1]}', reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats', value='–ù–∞—á–∞–ª–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏')
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù"))
        await message.answer(
            "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è") | (F.text == "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå")), state=TruereasonsState.game,
                flags=flags)
async def reasons_normal_game_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    END = bool(data['ngamecount'] == (await data_getter('SELECT COUNT(id) FROM public.normal_game'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–≤–∞–π –µ—â–µ! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º üôÖ"))
    else:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù"))
    answer_group = str()
    if message.text == "–≠—Ç–æ –∞–±—Å—É—Ä–¥ü§¶üèº‚Äç‚ôÄÔ∏è":
        answer_group = 'belivers'
    elif message.text == "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æüëå":
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'normal_game', data['ngamecount'],
                            answer_group, {'id': data['ngamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    await message.answer(
        f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\nü§¶‚Äç‚ôÇÔ∏è –≠—Ç–æ –∞–±—Å—É—Ä–¥: {round(t_percentage * 100)}%'
        f'\nüëå –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ: {round(100 - t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer("–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù",
                             reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text.contains("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ,")) | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏–º ü§ù") | (F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É üôÖ‚Äç‚ôÄÔ∏è')),
                state=TruereasonsState.game, flags=flags)
async def reasons_real_reasons(message: Message, state: FSMContext):
    if '–ü—Ä–æ–ø—É—Å—Ç–∏–º –∏–≥—Ä—É' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='normal_game_stats', value='–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏')

    await state.set_state(TruereasonsState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    nmarkup.row(types.KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∏, –∞ –∫–∞–∫–∏–µ —Ç–æ–≥–¥–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏ –≤–æ–π–Ω—ã? üéØ"))
    await simple_media(message, 'reasons_real_reasons', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–¥–æ–∂–¥–∏, –∞ –∫–∞–∫–∏–µ —Ç–æ–≥–¥–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏ –≤–æ–π–Ω—ã? üéØ"), state=TruereasonsState.final,
                flags=flags)
async def reasons_are_they_real(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='real_reasons_wanted', value='–î–∞')
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_are_they_real'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚è≥"), state=TruereasonsState.final, flags=flags)
async def reasons_war_of_noone(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üòî"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–Ø –¥—É–º–∞—é, —á—Ç–æ –ª—é–¥–∏ –Ω–∞–≤–µ—Ä—Ö—É –∑–Ω–∞—é—Ç, —á—Ç–æ –¥–µ–ª–∞—é—Ç üëÆ‚Äç‚ôÇÔ∏è"))
    nmarkup.adjust(2, 1)
    await simple_media(message, 'reasons_war_of_noone', nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–Ø –¥—É–º–∞—é, —á—Ç–æ –ª—é–¥–∏ –Ω–∞–≤–µ—Ä—Ö—É –∑–Ω–∞—é—Ç, —á—Ç–æ –¥–µ–ª–∞—é—Ç üëÆ‚Äç‚ôÇÔ∏è") | (F.text == "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üôÖ‚Äç‚ôÇÔ∏è")),
                state=TruereasonsState.final, flags=flags)
async def reasons_cynical_view(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='do_you_need_war_1', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_cynical_view'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∏ –≤ —á–µ–º –Ω–µ —É–ª—É—á—à–∞–ª–æ—Å—å ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ üì¶"))
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—Ü –≥–µ–≥–µ–º–æ–Ω–∏–∏ –°–®–ê / –û–¥–Ω–æ–ø–æ–ª—è—Ä–Ω–æ–≥–æ –º–∏—Ä–∞ üá∫üá∏"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–æ–Ω–µ—Ü –≥–µ–≥–µ–º–æ–Ω–∏–∏ –°–®–ê / –û–¥–Ω–æ–ø–æ–ª—è—Ä–Ω–æ–≥–æ –º–∏—Ä–∞ üá∫üá∏"), state=TruereasonsState.final, flags=flags)
async def reasons_usa_gegemony(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='how_it_helped', value=message.text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –ø–æ–Ω–∏–º–∞—é ‚úîÔ∏è"))
    await simple_media(message, 'reasons_USA_gegemony', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞, –ø–æ–Ω–∏–º–∞—é ‚úîÔ∏è"), state=TruereasonsState.final, flags=flags)
async def reasons_europe_cold(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_Europe_cold'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, —Ü–µ–ª—å –Ω–µ –≤ —ç—Ç–æ–º üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º üëç"))
    nmarkup.adjust(2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–∏ –≤ —á–µ–º –Ω–µ —É–ª—É—á—à–∞–ª–æ—Å—å ü§∑‚Äç‚ôÇÔ∏è"), state=TruereasonsState.final, flags=flags)
async def reasons_only_misery(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='how_it_helped', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_only_misery'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ üì¶"), state=TruereasonsState.final, flags=flags)
async def reasons_nails_lol(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='how_it_helped', value=message.text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await simple_media(message, 'reasons_nails_lol', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ù–µ—Ç, –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§∑‚Äç‚ôÇÔ∏è"), state=TruereasonsState.final, flags=flags)
async def reasons_21_cent(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_21_cent'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ù–µ—Ç, —Ü–µ–ª—å –Ω–µ –≤ —ç—Ç–æ–º üôÖ‚Äç‚ôÇÔ∏è"), state=TruereasonsState.final, flags=flags)
async def reasons_hail_china(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_hail_China'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–î–∞, –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º üëç"), state=TruereasonsState.final, flags=flags)
async def reasons_bot_afraid(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_bot_afraid'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–î–∞–≤–∞–π üëå"), state=TruereasonsState.final, flags=flags)
async def reasons_why_only_rus(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_why_only_rus'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? üìä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? üìä"), state=TruereasonsState.final, flags=flags)
async def reasons_eritrea(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_eritrea'})
    media = await sql_safe_select('t_id', 'assets', {'name': 'reasons_eritrea'})
    await state.set_state(TruereasonsState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä... üôÅ"))
    nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –≤–µ—Å—å –º–∏—Ä –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å üñï"))
    await simple_media(message, 'reasons_eritrea', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä... üôÅ"), state=TruereasonsState.final, flags=flags)
async def reasons_mb_think(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
    await simple_media(message, 'reasons_mb_think', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü—Ä–æ—Å—Ç–æ –≤–µ—Å—å –º–∏—Ä –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å üñï"), state=TruereasonsState.final, flags=flags)
async def reasons_propaganda_man(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
    await simple_media(message, 'reasons_propaganda_man', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–î–∞–≤–∞–π"), state=TruereasonsState.final, flags=flags)
async def reasons_celeb_video(message: Message, state: FSMContext):
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_celeb_video'})
    media = await sql_safe_select('t_id', 'assets', {'name': 'reasons_celeb_video'})
    await state.set_state(TruereasonsState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="..."))
    await simple_media(message, 'reasons_celeb_video', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "..."), state=TruereasonsState.final, flags=flags)
async def reasons_open_eyes(message: Message, state: FSMContext):
    await state.set_state(TruereasonsState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞... üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é...üò®"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, —è –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–π–Ω—É / —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é üí•"))
    nmarkup.row(types.KeyboardButton(text="–°—Ç–æ–ª—å–∫–æ –ø–∞—Ä–Ω–µ–π –ø–æ–≥–∏–±–ª–æ, —Ç–µ–ø–µ—Ä—å –º—ã –Ω–µ –∏–º–µ–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å... üòî"))
    nmarkup.row(types.KeyboardButton(text="–Ø —Ö–æ—á—É –ø–æ–¥—É–º–∞—Ç—å, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É... ‚è±"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä! üñï"))
    nmarkup.adjust(2, 1, 1, 2)
    await simple_media(message, 'reasons_open_eyes', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–Ø —Ö–æ—á—É –ø–æ–¥—É–º–∞—Ç—å, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É... ‚è±"), state=TruereasonsState.final, flags=flags)
async def reasons_pause(message: Message, state: FSMContext):
    await state.set_state(TruereasonsState.final)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞... üôÖ‚Äç‚ôÇÔ∏èÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é...üò®"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, —è –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–π–Ω—É / —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é üí•"))
    nmarkup.row(types.KeyboardButton(text="–°—Ç–æ–ª—å–∫–æ –ø–∞—Ä–Ω–µ–π –ø–æ–≥–∏–±–ª–æ, —Ç–µ–ø–µ—Ä—å –º—ã –Ω–µ –∏–º–µ–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å... üòî"))
    nmarkup.adjust(2, 1, 1)
    await simple_media(message, 'reasons_pause', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–°—Ç–æ–ª—å–∫–æ –ø–∞—Ä–Ω–µ–π –ø–æ–≥–∏–±–ª–æ, —Ç–µ–ø–µ—Ä—å –º—ã –Ω–µ –∏–º–µ–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å... üòî"),
                state=TruereasonsState.final, flags=flags)
async def reasons_why_support_war(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='do_you_need_war_2', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_why_support_war'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞... üôÖ‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–Ø –Ω–µ –∑–Ω–∞—é...üò®"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, —è –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–π–Ω—É / —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é üí•"))
    nmarkup.row(types.KeyboardButton(text="–Ø —Ö–æ—á—É –ø–æ–¥—É–º–∞—Ç—å, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É... ‚è±"))
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä! üñï"))
    nmarkup.adjust(2, 1, 2)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–µ—Ç, –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞... üôÖ‚Äç‚ôÇÔ∏è") |
                 (F.text == "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞...üôÖ") |
                 (F.text == "–Ø –Ω–µ –∑–Ω–∞—é...üò®")),
                state=TruereasonsState.final, flags=flags)
async def reasons_now_he_normal(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='do_you_need_war_2', value=message.text)
    if '–Ω–µ –Ω—É–∂–Ω–∞' in message.text:
        await mongo_update_stat_new(tg_id=message.from_user.id, column='now_he_normal', value='–î–∞')
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_now_he_normal'})
    await mongo_update_stat(message.from_user.id, 'war_aims')
    await state.set_state(StateofPutin.main)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π ü§ù"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    ((F.text == "–î–∞, —è –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–π–Ω—É / —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—é üí•") | (F.text == "–î–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä! üñï")),
    state=TruereasonsState.final, flags=flags)
async def reasons_he_needs_war(message: Message):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='do_you_need_war_2', value=message.text)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ü–æ–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ üìù"))
    nmarkup.row(types.KeyboardButton(text="–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞...üôÖ"))
    await simple_media(message, 'reasons_he_needs_war', nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ü–æ–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ üìù"), state=TruereasonsState.final, flags=flags)
async def reasons_generation_z(message: Message):
    await simple_media(message, 'reasons_generation_Z', ReplyKeyboardRemove())
    await asyncio.sleep(4)
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –≤–æ–π–Ω–∞...üôÖ"))
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_generation_Z_1'})
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–°–∫–æ—Ä–µ–µ –¥–∞ üòî"), state=TruereasonsState.final, flags=flags)
async def reasons_who_to_blame(message: Message, state: FSMContext):
    await mongo_update_stat_new(tg_id=message.from_user.id, column='do_you_need_war_1', value=message.text)
    text = await sql_safe_select('text', 'texts', {'name': 'reasons_who_to_blame'})
    await state.set_state(StateofPutin.main)
    await mongo_update_stat(message.from_user.id, 'war_aims')
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π ü§ù"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
