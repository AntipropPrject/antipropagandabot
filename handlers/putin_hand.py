from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from data_base.DBuse import data_getter, sql_safe_select, mongo_game_answer
from filters.MapFilters import PutinFilter
from handlers.stopwar_hand import StopWarState
from stats.stat import mongo_update_stat
from utilts import simple_media


class StateofPutin(StatesGroup):
    main = State()
    game1 = State()
    game2 = State()
    final = State()


flags = {"throttling_key": "True"}
router = Router()
router.message.filter(state=StateofPutin)


@router.message(PutinFilter(), (F.text.in_({"–î–∞–≤–∞–π ü§ù"})), state=StateofPutin.main, flags=flags)
async def putin_love_putin(message: Message, state: FSMContext):
    await state.set_state(StateofPutin.main)

    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω(–∞), –∫—Ç–æ, –µ—Å–ª–∏ –Ω–µ –ü—É—Ç–∏–Ω? ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω üôÖ‚Äç‚ôÇÔ∏è"))
    await simple_media(message, tag='putin_love_putin', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message((F.text.in_({"–î–∞–≤–∞–π ü§ù"})), state=StateofPutin.main, flags=flags)
async def putin_not_love_putin(message: Message, state: FSMContext):
    await state.set_state(StateofPutin.main)
    text = await sql_safe_select('text', 'texts', {'name': 'putin_lets_speak_about'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç ‚úä"))
    nmarkup.row(types.KeyboardButton(text="–í–æ–µ–Ω–Ω—ã–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ üò§"))
    nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç, –Ω–æ –µ–≥–æ –ø—Ä–∏–∫–∞–∑—ã –ø–ª–æ—Ö–æ –∏—Å–ø–æ–ª–Ω—è—é—Ç ü§∑‚Äç‚ôÄÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –ª—É—á—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç, –Ω–æ –∫—Ç–æ, –µ—Å–ª–∏ –Ω–µ –ü—É—Ç–∏–Ω? ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ë—ã–ª —Ö–æ—Ä–æ—à–∏–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Ä–∞–Ω—å—à–µ, –Ω–æ —Å–µ–π—á–∞—Å - –Ω–µ—Ç üôÖ"))
    nmarkup.adjust(2, 1, 1, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text.in_({"–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω üôÖ‚Äç‚ôÇÔ∏è", "–ú–æ–∂–µ—Ç –∏ –µ—Å—Ç—å, –Ω–æ –ø–æ–∫–∞ –∏—Ö –Ω–µ –≤–∏–¥–Ω–æ ü§∑‚Äç‚ôÇÔ∏è", "–ö–æ–Ω–µ—á–Ω–æ —Ç–∞–∫–∏–µ –ª—é–¥–∏ –µ—Å—Ç—å üôÇ"})),
    flags=flags)
async def putin_big_love_putin(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_big_love_putin'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–°–æ–≥–ª–∞—Å–µ–Ω(–∞), –∫—Ç–æ, –µ—Å–ª–∏ –Ω–µ –ü—É—Ç–∏–Ω? ü§∑‚Äç‚ôÇÔ∏è") |
                (F.text == "–ù–µ –ª—É—á—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç, –Ω–æ –∫—Ç–æ, –µ—Å–ª–∏ –Ω–µ –ü—É—Ç–∏–Ω? ü§∑‚Äç‚ôÇÔ∏è"),
                flags=flags)
async def putin_only_one(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_only_one'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ú–æ–∂–µ—Ç –∏ –µ—Å—Ç—å, –Ω–æ –ø–æ–∫–∞ –∏—Ö –Ω–µ –≤–∏–¥–Ω–æ ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.row(types.KeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ —Ç–∞–∫–∏–µ –ª—é–¥–∏ –µ—Å—Ç—å üôÇ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –≥–æ–≤–æ—Ä–∏ —Ç–∞–∫–∏–µ –≤–µ—â–∏, –ü—É—Ç–∏–Ω —Å –Ω–∞–º–∏ –Ω–∞–¥–æ–ª–≥–æ! ‚úä"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(
    (F.text == "–ù–µ –≥–æ–≤–æ—Ä–∏ —Ç–∞–∫–∏–µ –≤–µ—â–∏, –ü—É—Ç–∏–Ω —Å –Ω–∞–º–∏ –Ω–∞–¥–æ–ª–≥–æ! ‚úä") | (F.text == "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç ‚úä"), flags=flags)
async def putin_so_handsome(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_so_handsome'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text == "–•–æ—Ä–æ—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç, –Ω–æ –µ–≥–æ –ø—Ä–∏–∫–∞–∑—ã –ø–ª–æ—Ö–æ –∏—Å–ø–æ–ª–Ω—è—é—Ç ü§∑‚Äç‚ôÄÔ∏è"), flags=flags)
async def putin_not_putin(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_not_putin'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ üëç"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message((F.text.in_({'–°–∫–æ—Ä–µ–µ –¥–∞ üëç', "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç üëé"})), flags=flags)
async def putin_game_of_lie(message: Message, state: FSMContext):
    await state.set_state(StateofPutin.game1)
    text = await sql_safe_select('text', 'texts', {'name': 'putin_game_of_lie'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!  üöÄ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–∞—á–Ω–µ–º!  üöÄ") | (F.text == "–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ")),
                state=StateofPutin.game1, flags=flags)
async def putin_game1_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['pgamecount']
    except:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.putin_lies"))[0][0]
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter("SELECT * FROM (SELECT t_id, text, belivers, nonbelivers, rebuttal,"
                                        " row_number() over (order by id) FROM public.putin_lies "
                                        "left outer join assets on asset_name = assets.name "
                                        "left outer join texts ON text_name = texts.name) as "
                                        f"BAKABAKABAKA where row_number = {count}"))[0]
        await state.update_data(pgamecount=count, belive=truth_data[2], not_belive=truth_data[3])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.add(types.KeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç"))
        nmarkup.add(types.KeyboardButton(text="–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé"))
        if truth_data[0] is not None:
            capt = ""
            if truth_data[1] is not None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'{truth_data[1]}\n',
                                 reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π"))
        await message.answer(
            "–û–π, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã :(\n–ù–æ –Ω–µ –≤–æ–ª—É–π—Ç–µ—Å—å, —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ –∏–≥—Ä–∞!",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç") | (F.text == "–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé")),
                state=StateofPutin.game1, flags=flags)
async def putin_game1_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_group = str()
    END = bool(data['pgamecount'] == (await data_getter('SELECT COUNT(id) FROM public.putin_lies'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"))
    else:
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ ü§î"))
    if message.text == "–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –ù–µ –ª–æ–∂—å üëç":
        answer_group = 'belivers'
    elif message.text == "–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å üëé":
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'putin_lies', data['pgamecount'],
                            answer_group, {'id': data['pgamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    await message.answer(
        f'–ê –≤–æ—Ç —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\nüëç <b>–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ / –Ω–µ –ª–æ–∂—å:</b> {round(t_percentage * 100)}%\n'
        f'üëé <b>–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∂—å: </b>'
        f'{round((100 - t_percentage * 100))}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer('–ù–∞ —ç—Ç–æ–º –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥—ë–º –ø–µ—Ä–µ–π–¥—ë–º –∫ –¥—Ä—É–≥–æ–º—É, '
                             '–Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞.')


@router.message((F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"), state=StateofPutin.game1, flags=flags)
async def putin_game1_are_you_sure(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, —Ö–≤–∞—Ç–∏—Ç üôÖ‚Äç‚ôÄÔ∏è"))
    await message.answer('–¢–æ—á–Ω–æ?', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–î–∞, —Ö–≤–∞—Ç–∏—Ç üôÖ‚Äç‚ôÄÔ∏è") | (F.text == "–î–∞–≤–∞–π") | (F.text == "–•–æ—Ä–æ—à–æ ü§î")),
                state=StateofPutin.game1, flags=flags)
async def putin_plenty_promises(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(StateofPutin.game2)
    text = await sql_safe_select('text', 'texts', {'name': 'putin_plenty_promises'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–î–∞–≤–∞–π üëå")), state=StateofPutin.game2, flags=flags)
async def putin_nothing_done(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_nothing_done'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–∞—á–Ω–µ–º! üöÄ"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–ù–∞—á–Ω–µ–º! üöÄ")), state=StateofPutin.game2, flags=flags)
async def putin_gaming(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_gaming'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤(–∞) üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–Ø –≥–æ—Ç–æ–≤(–∞) üëå") | (F.text == "–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ") | (F.text == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üëâ")),
                state=StateofPutin.game2, flags=flags)
async def putin_game2_question(message: Message, state: FSMContext):
    try:
        count = (await state.get_data())['pgamecount']
    except:
        count = 0
    how_many_rounds = (await data_getter("SELECT COUNT (*) FROM public.putin_old_lies"))[0][0]
    if count < how_many_rounds:
        count += 1
        truth_data = (await data_getter("SELECT * FROM (SELECT t_id, text, belivers, nonbelivers, rebuttal, "
                                        "row_number() over (order by id) FROM public.putin_old_lies "
                                        "left outer join assets on asset_name = assets.name "
                                        f"left outer join texts ON text_name = texts.name) as subb "
                                        f"where row_number = {count}"))[0]
        print(truth_data)
        await state.update_data(pgamecount=count, belive=truth_data[2], not_belive=truth_data[3])
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.add(types.KeyboardButton(text="–í–∏–Ω–æ–≤–∞—Ç üëé"))
        nmarkup.add(types.KeyboardButton(text="–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç"))
        if truth_data[0] is not None:
            capt = ""
            if truth_data[1] is not None:
                capt = truth_data[1]
            try:
                await message.answer_video(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
            except TelegramBadRequest:
                await message.answer_photo(truth_data[0], caption=capt,
                                           reply_markup=nmarkup.as_markup(resize_keyboard=True))
        else:
            await message.answer(f'–í–æ—Ç —á—Ç–æ –æ–±–µ—â–∞–ª –ü—É—Ç–∏–Ω:\n\n{truth_data[1]}',
                                 reply_markup=nmarkup.as_markup(resize_keyboard=True))
    else:
        nmarkup = ReplyKeyboardBuilder()
        nmarkup.row(types.KeyboardButton(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ"))
        await message.answer(
            "–ë–æ—é—Å—å, —á—Ç–æ –ø–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã. –Ø –ø–æ–∏—â—É –µ—â–µ, –∞ –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º",
            reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç") | (F.text == "–í–∏–Ω–æ–≤–∞—Ç üëé")), state=StateofPutin.game2, flags=flags)
async def putin_game2_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_group = str()
    END = bool(data['pgamecount'] == (await data_getter('SELECT COUNT(id) FROM public.putin_old_lies'))[0][0])
    nmarkup = ReplyKeyboardBuilder()
    if END is False:
        nmarkup.row(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üëâ"))
        nmarkup.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"))
    else:
        nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π ü§ù"))
    if message.text == "–ù–µ –≤–∏–Ω–æ–≤–∞—Ç üëç":
        answer_group = 'belivers'
    elif message.text == "–í–∏–Ω–æ–≤–∞—Ç üëé":
        answer_group = 'nonbelivers'
    await mongo_game_answer(message.from_user.id, 'putin_old_lies', data['pgamecount'],
                            answer_group, {'id': data['pgamecount']})
    t_percentage = data['belive'] / (data['belive'] + data['not_belive'])
    await message.answer(
        f'–ê –≤–æ—Ç —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n'
        f'üëé <b>–í–∏–Ω–æ–≤–∞—Ç</b>: {round((100 - t_percentage * 100))}% \nüëç <b>–ù–µ –≤–∏–Ω–æ–≤–∞—Ç</b>: {round(t_percentage * 100)}%',
        reply_markup=nmarkup.as_markup(resize_keyboard=True))
    if END is True:
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É ü§ù –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏.')


@router.message((F.text == "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úã"), state=StateofPutin.game2, flags=flags)
async def putin_game2_are_you_sure(message: Message):
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâ"))
    nmarkup.row(types.KeyboardButton(text="–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è"))
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –£ –º–µ–Ω—è –µ—â–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã', reply_markup=nmarkup.as_markup(resize_keyboard=True))


@router.message(((F.text == "–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§∑‚Äç‚ôÄÔ∏è") | (F.text == "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ") |
                 (F.text == "–î–∞–≤–∞–π ü§ù")), state=StateofPutin.game2, flags=flags)
async def putin_in_the_past(message: Message, state: FSMContext):
    await state.clear()
    await mongo_update_stat(message.from_user.id, 'putin')
    await state.set_state(StateofPutin.final)
    text = await sql_safe_select('text', 'texts', {'name': 'putin_in_the_past'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) ‚úÖ"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ—Ç, —è –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) ‚ùå"))
    nmarkup.row(types.KeyboardButton(text="–î–æ–∫–∞–∂–∏ ü§î"))
    nmarkup.adjust(2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–î–æ–∫–∞–∂–∏ ü§î") | (F.text == "–ù–µ—Ç, —è –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) ‚ùå")), state=StateofPutin.final,
                flags=flags)
async def putin_prove_me(message: Message):
    text = await sql_safe_select('text', 'texts', {'name': 'putin_prove_me'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–î–∞–≤–∞–π üëå"))
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)


@router.message(((F.text == "–î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) ‚úÖ") | (F.text == "–í–æ–µ–Ω–Ω—ã–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ üò§") |
                 (F.text == "–ë—ã–ª —Ö–æ—Ä–æ—à–∏–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Ä–∞–Ω—å—à–µ, –Ω–æ —Å–µ–π—á–∞—Å - –Ω–µ—Ç üôÖ") |
                 (F.text == "–î–∞–≤–∞–π üëå")), state=StateofPutin, flags=flags)
async def stopwar_start(message: Message, state: FSMContext):
    await mongo_update_stat(message.from_user.id, 'putin')
    await state.set_state(StopWarState.main)
    text = await sql_safe_select('text', 'texts', {'name': 'stopwar_p_start'})
    nmarkup = ReplyKeyboardBuilder()
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –¥–∞ ‚úÖ"))
    nmarkup.row(types.KeyboardButton(text="–°–∫–æ—Ä–µ–µ –Ω–µ—Ç ‚ùå"))
    nmarkup.row(types.KeyboardButton(text="–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è"))
    nmarkup.adjust(2, 1)
    await message.answer(text, reply_markup=nmarkup.as_markup(resize_keyboard=True), disable_web_page_preview=True)
