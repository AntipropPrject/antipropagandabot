apiVersion: v1
kind: Namespace
#Namespace: bot
metadata:
  name: bot
  labels:
    app: bot
    tier: backend
    role: master
  annotations:
    replicas-min: "3"
    replicas-max: "5"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bot
  namespace: bot
spec:
  selector:
    matchLabels:
      app: app
      tier: backend
  replicas: 3
  template:
    metadata:
      labels:
        app: app
        tier: backend
    spec:
      containers:
      - name: bot
        image: registry.digitalocean.com/antipropreg/bot:0.1
        imagePullPolicy: IfNotPresent
        #imagePullSecrets: registry-antipropreg
        env:
        - name: DEMO_IP
          valueFrom:
            configMapKeyRef:
              name: bot
              key: ip
          #value: 1.1.1.1
        #imagePullPolicy:IfNotPresent
          #volumeMounts:
        resources:
          limits:
            cpu: 400m
            memory: 768Mi
          requests:
            cpu: 200m
            memory: 256Mi
        ports:
        - containerPort: 443
        # readinessProbe:
          # exec:
            # command:
            # - python
            # - Testbot.py
          # initialDelaySeconds: 5
          # periodSeconds: 8
      #restartPolicy: never
      # volumes:
      # - name: code
        # hostPath:
          # path: /code
          # type: DirectoryOrCreate
      # - name: code-pv-storage
        # persistenVolumeClaim:
          # claimName: code-pv-claim
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bot
  namespace: bot
data:
  webhook_ip: "1.1.1.1"
  ip: "1.1.1.1"
  port: "443"

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
  # name: code-pv-volume
  # namespace: bot
  # labels:
    # type: local
# spec:
  # storageClassName: local-storage
  # local:
    # path: "."
  # capacity:
    # storage: 5Gi
  # volumeMode: Filesystem
  # accessModes:
  # - ReadWriteOnce
  # # hostPath:
    # # path: "."
---
apiVersion: v1
kind: Service
metadata:
  name: bot
  labels:
    app: bot
    tier: backend
spec:
  ports:
  - port: 443
  selector:
    app: app
    tier: backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bot
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: bot
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: bot
                port:
                  number: 443